Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> print_instr newline
Rule 5     instruccion -> println_instr newline
Rule 6     instruccion -> definicion_instr newline
Rule 7     instruccion -> asignacion_instr newline
Rule 8     instruccion -> asignacion_arreglo_instr newline
Rule 9     instruccion -> definicion_asignacion_instr newline
Rule 10    instruccion -> call_function newline
Rule 11    instruccion -> declare_function newline
Rule 12    instruccion -> return_state newline
Rule 13    instruccion -> break_state newline
Rule 14    instruccion -> continue_state newline
Rule 15    instruccion -> if_state newline
Rule 16    instruccion -> while_state newline
Rule 17    instruccion -> for_state newline
Rule 18    instruccion -> nativas newline
Rule 19    instruccion -> create_struct newline
Rule 20    instruccion -> declare_struct newline
Rule 21    instruccion -> assign_access newline
Rule 22    expression -> MENOS expression
Rule 23    expression -> NOT expression
Rule 24    expression -> expression MAS expression
Rule 25    expression -> expression MENOS expression
Rule 26    expression -> expression POR expression
Rule 27    expression -> expression DIVIDIDO expression
Rule 28    expression -> expression POTENCIA expression
Rule 29    expression -> expression MODULO expression
Rule 30    expression -> expression MAYQUE expression
Rule 31    expression -> expression MENQUE expression
Rule 32    expression -> expression MENIGUALQUE expression
Rule 33    expression -> expression MAYIGUALQUE expression
Rule 34    expression -> expression IGUALQUE expression
Rule 35    expression -> expression NIGUALQUE expression
Rule 36    expression -> expression OR expression
Rule 37    expression -> expression AND expression
Rule 38    expression -> final_expression
Rule 39    final_expression -> PARIZQ expression PARDER
Rule 40    final_expression -> CORCHETEIZQ exp_list CORCHETEDER
Rule 41    final_expression -> DECIMAL
Rule 42    final_expression -> ENTERO
Rule 43    final_expression -> CADENA
Rule 44    final_expression -> CARACTER
Rule 45    final_expression -> ID
Rule 46    final_expression -> ID index_list
Rule 47    final_expression -> TRUE
Rule 48    final_expression -> FALSE
Rule 49    final_expression -> call_function
Rule 50    final_expression -> access_struct
Rule 51    final_expression -> nativas
Rule 52    nativas -> LOG PARIZQ ENTERO COMA expression PARDER
Rule 53    nativas -> LOG10 PARIZQ expression PARDER
Rule 54    nativas -> COS PARIZQ expression PARDER
Rule 55    nativas -> SIN PARIZQ expression PARDER
Rule 56    nativas -> TAN PARIZQ expression PARDER
Rule 57    nativas -> SQRT PARIZQ expression PARDER
Rule 58    nativas -> UPPERCASE PARIZQ expression PARDER
Rule 59    nativas -> LOWERCASE PARIZQ expression PARDER
Rule 60    nativas -> TOSTRING PARIZQ expression PARDER
Rule 61    nativas -> TOFLOAT PARIZQ expression PARDER
Rule 62    nativas -> TRUNC PARIZQ INT COMA expression PARDER
Rule 63    nativas -> TRUNC PARIZQ expression PARDER
Rule 64    nativas -> TYPEOF PARIZQ expression PARDER
Rule 65    nativas -> PARSE PARIZQ tipo COMA expression PARDER
Rule 66    nativas -> LENGTH PARIZQ expression PARDER
Rule 67    nativas -> PUSH PARIZQ expression COMA expression PARDER
Rule 68    nativas -> POP PARIZQ expression PARDER
Rule 69    print_instr -> PRINT PARIZQ exp_list PARDER
Rule 70    println_instr -> PRINTLN PARIZQ exp_list PARDER
Rule 71    tipo -> INT
Rule 72    tipo -> FLOAT
Rule 73    tipo -> BOOL
Rule 74    tipo -> CHAR
Rule 75    tipo -> STRING
Rule 76    tipo -> ARRAY
Rule 77    tipo -> NOTHING
Rule 78    definicion_instr -> LOCAL ID
Rule 79    asignacion_instr -> ID IGUAL expression
Rule 80    asignacion_instr -> LOCAL ID IGUAL expression
Rule 81    definicion_asignacion_instr -> ID IGUAL expression DOSP tipo
Rule 82    definicion_asignacion_instr -> LOCAL ID IGUAL expression DOSP tipo
Rule 83    asignacion_arreglo_instr -> ID index_list IGUAL expression
Rule 84    call_function -> ID PARIZQ PARDER
Rule 85    call_function -> ID PARIZQ exp_list PARDER
Rule 86    exp_list -> exp_list COMA expression
Rule 87    exp_list -> expression
Rule 88    index_list -> index_list CORCHETEIZQ expression CORCHETEDER
Rule 89    index_list -> CORCHETEIZQ expression CORCHETEDER
Rule 90    statement -> instrucciones
Rule 91    declare_function -> FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
Rule 92    declare_function -> FUNCTION ID PARIZQ PARDER DOSP newline statement END
Rule 93    dec_params -> dec_params COMA ID DOSP DOSP tipo
Rule 94    dec_params -> dec_params COMA ID DOSP DOSP ID
Rule 95    dec_params -> dec_params COMA ID
Rule 96    dec_params -> ID DOSP DOSP tipo
Rule 97    dec_params -> ID DOSP DOSP ID
Rule 98    dec_params -> ID
Rule 99    if_state -> IF expression DOSP newline statement END
Rule 100   if_state -> IF expression DOSP newline statement ELSE DOSP newline statement END
Rule 101   if_state -> IF expression DOSP newline statement else_if_list END
Rule 102   else_if_list -> ELSEIF expression DOSP newline statement
Rule 103   else_if_list -> ELSEIF expression DOSP newline statement ELSE DOSP newline statement
Rule 104   else_if_list -> ELSEIF expression DOSP newline statement else_if_list
Rule 105   while_state -> WHILE expression DOSP newline statement END
Rule 106   for_state -> FOR ID IN expression DOSP expression DOSP newline statement END
Rule 107   for_state -> FOR ID IN expression DOSP newline statement END
Rule 108   break_state -> BREAK
Rule 109   continue_state -> CONTINUE
Rule 110   return_state -> RETURN
Rule 111   return_state -> RETURN expression
Rule 112   create_struct -> STRUCT ID DOSP newline attList END
Rule 113   attList -> attList ID DOSP tipo PTCOMA newline
Rule 114   attList -> ID DOSP tipo PTCOMA newline
Rule 115   declare_struct -> ID DOSP DOSP ID
Rule 116   assign_access -> ID PUNTO ID IGUAL expression
Rule 117   access_struct -> ID PUNTO ID

Terminals, with rules where they appear

AND                  : 37
ARRAY                : 76
BOOL                 : 73
BREAK                : 108
CADENA               : 43
CARACTER             : 44
CHAR                 : 74
COMA                 : 52 62 65 67 86 93 94 95
CONTINUE             : 109
CORCHETEDER          : 40 88 89
CORCHETEIZQ          : 40 88 89
COS                  : 54
DECIMAL              : 41
DIVIDIDO             : 27
DOSP                 : 81 82 91 92 93 93 94 94 96 96 97 97 99 100 100 101 102 103 103 104 105 106 106 107 112 113 114 115 115
ELSE                 : 100 103
ELSEIF               : 102 103 104
END                  : 91 92 99 100 101 105 106 107 112
ENTERO               : 42 52
FALSE                : 48
FLOAT                : 72
FOR                  : 106 107
FUNCTION             : 91 92
ID                   : 45 46 78 79 80 81 82 83 84 85 91 92 93 94 94 95 96 97 97 98 106 107 112 113 114 115 115 116 116 117 117
IF                   : 99 100 101
IGUAL                : 79 80 81 82 83 116
IGUALQUE             : 34
IN                   : 106 107
INT                  : 62 71
LENGTH               : 66
LOCAL                : 78 80 82
LOG                  : 52
LOG10                : 53
LOWERCASE            : 59
MAS                  : 24
MAYIGUALQUE          : 33
MAYQUE               : 30
MENIGUALQUE          : 32
MENOS                : 22 25
MENQUE               : 31
MODULO               : 29
NIGUALQUE            : 35
NOT                  : 23
NOTHING              : 77
OR                   : 36
PARDER               : 39 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 84 85 91 92
PARIZQ               : 39 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 84 85 91 92
PARSE                : 65
POP                  : 68
POR                  : 26
POTENCIA             : 28
PRINT                : 69
PRINTLN              : 70
PTCOMA               : 113 114
PUNTO                : 116 117
PUSH                 : 67
RETURN               : 110 111
SIN                  : 55
SQRT                 : 57
STRING               : 75
STRUCT               : 112
TAN                  : 56
TOFLOAT              : 61
TOSTRING             : 60
TRUE                 : 47
TRUNC                : 62 63
TYPEOF               : 64
UPPERCASE            : 58
WHILE                : 105
error                : 
newline              : 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 91 92 99 100 100 101 102 103 103 104 105 106 107 112 113 114

Nonterminals, with rules where they appear

access_struct        : 50
asignacion_arreglo_instr : 8
asignacion_instr     : 7
assign_access        : 21
attList              : 112 113
break_state          : 13
call_function        : 10 49
continue_state       : 14
create_struct        : 19
dec_params           : 91 93 94 95
declare_function     : 11
declare_struct       : 20
definicion_asignacion_instr : 9
definicion_instr     : 6
else_if_list         : 101 104
exp_list             : 40 69 70 85 86
expression           : 22 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 39 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 67 68 79 80 81 82 83 86 87 88 89 99 100 101 102 103 104 105 106 106 107 111 116
final_expression     : 38
for_state            : 17
if_state             : 15
index_list           : 46 83 88
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 90
nativas              : 18 51
print_instr          : 4
println_instr        : 5
return_state         : 12
statement            : 91 92 99 100 100 101 102 103 103 104 105 106 107
tipo                 : 65 81 82 93 96 113 114
while_state          : 16

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (69) print_instr -> . PRINT PARIZQ exp_list PARDER
    (70) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (78) definicion_instr -> . LOCAL ID
    (79) asignacion_instr -> . ID IGUAL expression
    (80) asignacion_instr -> . LOCAL ID IGUAL expression
    (83) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (81) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (82) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (91) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (92) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (110) return_state -> . RETURN
    (111) return_state -> . RETURN expression
    (108) break_state -> . BREAK
    (109) continue_state -> . CONTINUE
    (99) if_state -> . IF expression DOSP newline statement END
    (100) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (101) if_state -> . IF expression DOSP newline statement else_if_list END
    (105) while_state -> . WHILE expression DOSP newline statement END
    (106) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (107) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER
    (112) create_struct -> . STRUCT ID DOSP newline attList END
    (115) declare_struct -> . ID DOSP DOSP ID
    (116) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48
    STRUCT          shift and go to state 49

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (69) print_instr -> . PRINT PARIZQ exp_list PARDER
    (70) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (78) definicion_instr -> . LOCAL ID
    (79) asignacion_instr -> . ID IGUAL expression
    (80) asignacion_instr -> . LOCAL ID IGUAL expression
    (83) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (81) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (82) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (91) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (92) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (110) return_state -> . RETURN
    (111) return_state -> . RETURN expression
    (108) break_state -> . BREAK
    (109) continue_state -> . CONTINUE
    (99) if_state -> . IF expression DOSP newline statement END
    (100) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (101) if_state -> . IF expression DOSP newline statement else_if_list END
    (105) while_state -> . WHILE expression DOSP newline statement END
    (106) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (107) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER
    (112) create_struct -> . STRUCT ID DOSP newline attList END
    (115) declare_struct -> . ID DOSP DOSP ID
    (116) assign_access -> . ID PUNTO ID IGUAL expression

    $end            reduce using rule 1 (init -> instrucciones .)
    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48
    STRUCT          shift and go to state 49

    instruccion                    shift and go to state 50
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 3

    (3) instrucciones -> instruccion .

    PRINT           reduce using rule 3 (instrucciones -> instruccion .)
    PRINTLN         reduce using rule 3 (instrucciones -> instruccion .)
    LOCAL           reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    FUNCTION        reduce using rule 3 (instrucciones -> instruccion .)
    RETURN          reduce using rule 3 (instrucciones -> instruccion .)
    BREAK           reduce using rule 3 (instrucciones -> instruccion .)
    CONTINUE        reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    LOG             reduce using rule 3 (instrucciones -> instruccion .)
    LOG10           reduce using rule 3 (instrucciones -> instruccion .)
    COS             reduce using rule 3 (instrucciones -> instruccion .)
    SIN             reduce using rule 3 (instrucciones -> instruccion .)
    TAN             reduce using rule 3 (instrucciones -> instruccion .)
    SQRT            reduce using rule 3 (instrucciones -> instruccion .)
    UPPERCASE       reduce using rule 3 (instrucciones -> instruccion .)
    LOWERCASE       reduce using rule 3 (instrucciones -> instruccion .)
    TOSTRING        reduce using rule 3 (instrucciones -> instruccion .)
    TOFLOAT         reduce using rule 3 (instrucciones -> instruccion .)
    TRUNC           reduce using rule 3 (instrucciones -> instruccion .)
    TYPEOF          reduce using rule 3 (instrucciones -> instruccion .)
    PARSE           reduce using rule 3 (instrucciones -> instruccion .)
    LENGTH          reduce using rule 3 (instrucciones -> instruccion .)
    PUSH            reduce using rule 3 (instrucciones -> instruccion .)
    POP             reduce using rule 3 (instrucciones -> instruccion .)
    STRUCT          reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    END             reduce using rule 3 (instrucciones -> instruccion .)
    ELSE            reduce using rule 3 (instrucciones -> instruccion .)
    ELSEIF          reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> print_instr . newline

    newline         shift and go to state 51


state 5

    (5) instruccion -> println_instr . newline

    newline         shift and go to state 52


state 6

    (6) instruccion -> definicion_instr . newline

    newline         shift and go to state 53


state 7

    (7) instruccion -> asignacion_instr . newline

    newline         shift and go to state 54


state 8

    (8) instruccion -> asignacion_arreglo_instr . newline

    newline         shift and go to state 55


state 9

    (9) instruccion -> definicion_asignacion_instr . newline

    newline         shift and go to state 56


state 10

    (10) instruccion -> call_function . newline

    newline         shift and go to state 57


state 11

    (11) instruccion -> declare_function . newline

    newline         shift and go to state 58


state 12

    (12) instruccion -> return_state . newline

    newline         shift and go to state 59


state 13

    (13) instruccion -> break_state . newline

    newline         shift and go to state 60


state 14

    (14) instruccion -> continue_state . newline

    newline         shift and go to state 61


state 15

    (15) instruccion -> if_state . newline

    newline         shift and go to state 62


state 16

    (16) instruccion -> while_state . newline

    newline         shift and go to state 63


state 17

    (17) instruccion -> for_state . newline

    newline         shift and go to state 64


state 18

    (18) instruccion -> nativas . newline

    newline         shift and go to state 65


state 19

    (19) instruccion -> create_struct . newline

    newline         shift and go to state 66


state 20

    (20) instruccion -> declare_struct . newline

    newline         shift and go to state 67


state 21

    (21) instruccion -> assign_access . newline

    newline         shift and go to state 68


state 22

    (69) print_instr -> PRINT . PARIZQ exp_list PARDER

    PARIZQ          shift and go to state 69


state 23

    (70) println_instr -> PRINTLN . PARIZQ exp_list PARDER

    PARIZQ          shift and go to state 70


state 24

    (78) definicion_instr -> LOCAL . ID
    (80) asignacion_instr -> LOCAL . ID IGUAL expression
    (82) definicion_asignacion_instr -> LOCAL . ID IGUAL expression DOSP tipo

    ID              shift and go to state 71


state 25

    (79) asignacion_instr -> ID . IGUAL expression
    (83) asignacion_arreglo_instr -> ID . index_list IGUAL expression
    (81) definicion_asignacion_instr -> ID . IGUAL expression DOSP tipo
    (84) call_function -> ID . PARIZQ PARDER
    (85) call_function -> ID . PARIZQ exp_list PARDER
    (115) declare_struct -> ID . DOSP DOSP ID
    (116) assign_access -> ID . PUNTO ID IGUAL expression
    (88) index_list -> . index_list CORCHETEIZQ expression CORCHETEDER
    (89) index_list -> . CORCHETEIZQ expression CORCHETEDER

    IGUAL           shift and go to state 72
    PARIZQ          shift and go to state 75
    DOSP            shift and go to state 74
    PUNTO           shift and go to state 76
    CORCHETEIZQ     shift and go to state 77

    index_list                     shift and go to state 73

state 26

    (91) declare_function -> FUNCTION . ID PARIZQ dec_params PARDER DOSP newline statement END
    (92) declare_function -> FUNCTION . ID PARIZQ PARDER DOSP newline statement END

    ID              shift and go to state 78


state 27

    (110) return_state -> RETURN .
    (111) return_state -> RETURN . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    newline         reduce using rule 110 (return_state -> RETURN .)
    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 79
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 28

    (108) break_state -> BREAK .

    newline         reduce using rule 108 (break_state -> BREAK .)


state 29

    (109) continue_state -> CONTINUE .

    newline         reduce using rule 109 (continue_state -> CONTINUE .)


state 30

    (99) if_state -> IF . expression DOSP newline statement END
    (100) if_state -> IF . expression DOSP newline statement ELSE DOSP newline statement END
    (101) if_state -> IF . expression DOSP newline statement else_if_list END
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 95
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 31

    (105) while_state -> WHILE . expression DOSP newline statement END
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 96
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 32

    (106) for_state -> FOR . ID IN expression DOSP expression DOSP newline statement END
    (107) for_state -> FOR . ID IN expression DOSP newline statement END

    ID              shift and go to state 97


state 33

    (52) nativas -> LOG . PARIZQ ENTERO COMA expression PARDER

    PARIZQ          shift and go to state 98


state 34

    (53) nativas -> LOG10 . PARIZQ expression PARDER

    PARIZQ          shift and go to state 99


state 35

    (54) nativas -> COS . PARIZQ expression PARDER

    PARIZQ          shift and go to state 100


state 36

    (55) nativas -> SIN . PARIZQ expression PARDER

    PARIZQ          shift and go to state 101


state 37

    (56) nativas -> TAN . PARIZQ expression PARDER

    PARIZQ          shift and go to state 102


state 38

    (57) nativas -> SQRT . PARIZQ expression PARDER

    PARIZQ          shift and go to state 103


state 39

    (58) nativas -> UPPERCASE . PARIZQ expression PARDER

    PARIZQ          shift and go to state 104


state 40

    (59) nativas -> LOWERCASE . PARIZQ expression PARDER

    PARIZQ          shift and go to state 105


state 41

    (60) nativas -> TOSTRING . PARIZQ expression PARDER

    PARIZQ          shift and go to state 106


state 42

    (61) nativas -> TOFLOAT . PARIZQ expression PARDER

    PARIZQ          shift and go to state 107


state 43

    (62) nativas -> TRUNC . PARIZQ INT COMA expression PARDER
    (63) nativas -> TRUNC . PARIZQ expression PARDER

    PARIZQ          shift and go to state 108


state 44

    (64) nativas -> TYPEOF . PARIZQ expression PARDER

    PARIZQ          shift and go to state 109


state 45

    (65) nativas -> PARSE . PARIZQ tipo COMA expression PARDER

    PARIZQ          shift and go to state 110


state 46

    (66) nativas -> LENGTH . PARIZQ expression PARDER

    PARIZQ          shift and go to state 111


state 47

    (67) nativas -> PUSH . PARIZQ expression COMA expression PARDER

    PARIZQ          shift and go to state 112


state 48

    (68) nativas -> POP . PARIZQ expression PARDER

    PARIZQ          shift and go to state 113


state 49

    (112) create_struct -> STRUCT . ID DOSP newline attList END

    ID              shift and go to state 114


state 50

    (2) instrucciones -> instrucciones instruccion .

    PRINT           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PRINTLN         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LOCAL           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FUNCTION        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RETURN          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    BREAK           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONTINUE        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LOG             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LOG10           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    COS             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    SIN             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    TAN             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    SQRT            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    UPPERCASE       reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LOWERCASE       reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    TOSTRING        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    TOFLOAT         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    TRUNC           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    TYPEOF          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PARSE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LENGTH          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PUSH            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    POP             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    STRUCT          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    END             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ELSE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ELSEIF          reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 51

    (4) instruccion -> print_instr newline .

    PRINT           reduce using rule 4 (instruccion -> print_instr newline .)
    PRINTLN         reduce using rule 4 (instruccion -> print_instr newline .)
    LOCAL           reduce using rule 4 (instruccion -> print_instr newline .)
    ID              reduce using rule 4 (instruccion -> print_instr newline .)
    FUNCTION        reduce using rule 4 (instruccion -> print_instr newline .)
    RETURN          reduce using rule 4 (instruccion -> print_instr newline .)
    BREAK           reduce using rule 4 (instruccion -> print_instr newline .)
    CONTINUE        reduce using rule 4 (instruccion -> print_instr newline .)
    IF              reduce using rule 4 (instruccion -> print_instr newline .)
    WHILE           reduce using rule 4 (instruccion -> print_instr newline .)
    FOR             reduce using rule 4 (instruccion -> print_instr newline .)
    LOG             reduce using rule 4 (instruccion -> print_instr newline .)
    LOG10           reduce using rule 4 (instruccion -> print_instr newline .)
    COS             reduce using rule 4 (instruccion -> print_instr newline .)
    SIN             reduce using rule 4 (instruccion -> print_instr newline .)
    TAN             reduce using rule 4 (instruccion -> print_instr newline .)
    SQRT            reduce using rule 4 (instruccion -> print_instr newline .)
    UPPERCASE       reduce using rule 4 (instruccion -> print_instr newline .)
    LOWERCASE       reduce using rule 4 (instruccion -> print_instr newline .)
    TOSTRING        reduce using rule 4 (instruccion -> print_instr newline .)
    TOFLOAT         reduce using rule 4 (instruccion -> print_instr newline .)
    TRUNC           reduce using rule 4 (instruccion -> print_instr newline .)
    TYPEOF          reduce using rule 4 (instruccion -> print_instr newline .)
    PARSE           reduce using rule 4 (instruccion -> print_instr newline .)
    LENGTH          reduce using rule 4 (instruccion -> print_instr newline .)
    PUSH            reduce using rule 4 (instruccion -> print_instr newline .)
    POP             reduce using rule 4 (instruccion -> print_instr newline .)
    STRUCT          reduce using rule 4 (instruccion -> print_instr newline .)
    $end            reduce using rule 4 (instruccion -> print_instr newline .)
    END             reduce using rule 4 (instruccion -> print_instr newline .)
    ELSE            reduce using rule 4 (instruccion -> print_instr newline .)
    ELSEIF          reduce using rule 4 (instruccion -> print_instr newline .)


state 52

    (5) instruccion -> println_instr newline .

    PRINT           reduce using rule 5 (instruccion -> println_instr newline .)
    PRINTLN         reduce using rule 5 (instruccion -> println_instr newline .)
    LOCAL           reduce using rule 5 (instruccion -> println_instr newline .)
    ID              reduce using rule 5 (instruccion -> println_instr newline .)
    FUNCTION        reduce using rule 5 (instruccion -> println_instr newline .)
    RETURN          reduce using rule 5 (instruccion -> println_instr newline .)
    BREAK           reduce using rule 5 (instruccion -> println_instr newline .)
    CONTINUE        reduce using rule 5 (instruccion -> println_instr newline .)
    IF              reduce using rule 5 (instruccion -> println_instr newline .)
    WHILE           reduce using rule 5 (instruccion -> println_instr newline .)
    FOR             reduce using rule 5 (instruccion -> println_instr newline .)
    LOG             reduce using rule 5 (instruccion -> println_instr newline .)
    LOG10           reduce using rule 5 (instruccion -> println_instr newline .)
    COS             reduce using rule 5 (instruccion -> println_instr newline .)
    SIN             reduce using rule 5 (instruccion -> println_instr newline .)
    TAN             reduce using rule 5 (instruccion -> println_instr newline .)
    SQRT            reduce using rule 5 (instruccion -> println_instr newline .)
    UPPERCASE       reduce using rule 5 (instruccion -> println_instr newline .)
    LOWERCASE       reduce using rule 5 (instruccion -> println_instr newline .)
    TOSTRING        reduce using rule 5 (instruccion -> println_instr newline .)
    TOFLOAT         reduce using rule 5 (instruccion -> println_instr newline .)
    TRUNC           reduce using rule 5 (instruccion -> println_instr newline .)
    TYPEOF          reduce using rule 5 (instruccion -> println_instr newline .)
    PARSE           reduce using rule 5 (instruccion -> println_instr newline .)
    LENGTH          reduce using rule 5 (instruccion -> println_instr newline .)
    PUSH            reduce using rule 5 (instruccion -> println_instr newline .)
    POP             reduce using rule 5 (instruccion -> println_instr newline .)
    STRUCT          reduce using rule 5 (instruccion -> println_instr newline .)
    $end            reduce using rule 5 (instruccion -> println_instr newline .)
    END             reduce using rule 5 (instruccion -> println_instr newline .)
    ELSE            reduce using rule 5 (instruccion -> println_instr newline .)
    ELSEIF          reduce using rule 5 (instruccion -> println_instr newline .)


state 53

    (6) instruccion -> definicion_instr newline .

    PRINT           reduce using rule 6 (instruccion -> definicion_instr newline .)
    PRINTLN         reduce using rule 6 (instruccion -> definicion_instr newline .)
    LOCAL           reduce using rule 6 (instruccion -> definicion_instr newline .)
    ID              reduce using rule 6 (instruccion -> definicion_instr newline .)
    FUNCTION        reduce using rule 6 (instruccion -> definicion_instr newline .)
    RETURN          reduce using rule 6 (instruccion -> definicion_instr newline .)
    BREAK           reduce using rule 6 (instruccion -> definicion_instr newline .)
    CONTINUE        reduce using rule 6 (instruccion -> definicion_instr newline .)
    IF              reduce using rule 6 (instruccion -> definicion_instr newline .)
    WHILE           reduce using rule 6 (instruccion -> definicion_instr newline .)
    FOR             reduce using rule 6 (instruccion -> definicion_instr newline .)
    LOG             reduce using rule 6 (instruccion -> definicion_instr newline .)
    LOG10           reduce using rule 6 (instruccion -> definicion_instr newline .)
    COS             reduce using rule 6 (instruccion -> definicion_instr newline .)
    SIN             reduce using rule 6 (instruccion -> definicion_instr newline .)
    TAN             reduce using rule 6 (instruccion -> definicion_instr newline .)
    SQRT            reduce using rule 6 (instruccion -> definicion_instr newline .)
    UPPERCASE       reduce using rule 6 (instruccion -> definicion_instr newline .)
    LOWERCASE       reduce using rule 6 (instruccion -> definicion_instr newline .)
    TOSTRING        reduce using rule 6 (instruccion -> definicion_instr newline .)
    TOFLOAT         reduce using rule 6 (instruccion -> definicion_instr newline .)
    TRUNC           reduce using rule 6 (instruccion -> definicion_instr newline .)
    TYPEOF          reduce using rule 6 (instruccion -> definicion_instr newline .)
    PARSE           reduce using rule 6 (instruccion -> definicion_instr newline .)
    LENGTH          reduce using rule 6 (instruccion -> definicion_instr newline .)
    PUSH            reduce using rule 6 (instruccion -> definicion_instr newline .)
    POP             reduce using rule 6 (instruccion -> definicion_instr newline .)
    STRUCT          reduce using rule 6 (instruccion -> definicion_instr newline .)
    $end            reduce using rule 6 (instruccion -> definicion_instr newline .)
    END             reduce using rule 6 (instruccion -> definicion_instr newline .)
    ELSE            reduce using rule 6 (instruccion -> definicion_instr newline .)
    ELSEIF          reduce using rule 6 (instruccion -> definicion_instr newline .)


state 54

    (7) instruccion -> asignacion_instr newline .

    PRINT           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    PRINTLN         reduce using rule 7 (instruccion -> asignacion_instr newline .)
    LOCAL           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    ID              reduce using rule 7 (instruccion -> asignacion_instr newline .)
    FUNCTION        reduce using rule 7 (instruccion -> asignacion_instr newline .)
    RETURN          reduce using rule 7 (instruccion -> asignacion_instr newline .)
    BREAK           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    CONTINUE        reduce using rule 7 (instruccion -> asignacion_instr newline .)
    IF              reduce using rule 7 (instruccion -> asignacion_instr newline .)
    WHILE           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    FOR             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    LOG             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    LOG10           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    COS             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    SIN             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    TAN             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    SQRT            reduce using rule 7 (instruccion -> asignacion_instr newline .)
    UPPERCASE       reduce using rule 7 (instruccion -> asignacion_instr newline .)
    LOWERCASE       reduce using rule 7 (instruccion -> asignacion_instr newline .)
    TOSTRING        reduce using rule 7 (instruccion -> asignacion_instr newline .)
    TOFLOAT         reduce using rule 7 (instruccion -> asignacion_instr newline .)
    TRUNC           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    TYPEOF          reduce using rule 7 (instruccion -> asignacion_instr newline .)
    PARSE           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    LENGTH          reduce using rule 7 (instruccion -> asignacion_instr newline .)
    PUSH            reduce using rule 7 (instruccion -> asignacion_instr newline .)
    POP             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    STRUCT          reduce using rule 7 (instruccion -> asignacion_instr newline .)
    $end            reduce using rule 7 (instruccion -> asignacion_instr newline .)
    END             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    ELSE            reduce using rule 7 (instruccion -> asignacion_instr newline .)
    ELSEIF          reduce using rule 7 (instruccion -> asignacion_instr newline .)


state 55

    (8) instruccion -> asignacion_arreglo_instr newline .

    PRINT           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    PRINTLN         reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    LOCAL           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    ID              reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    FUNCTION        reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    RETURN          reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    BREAK           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    CONTINUE        reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    IF              reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    WHILE           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    FOR             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    LOG             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    LOG10           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    COS             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    SIN             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    TAN             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    SQRT            reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    UPPERCASE       reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    LOWERCASE       reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    TOSTRING        reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    TOFLOAT         reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    TRUNC           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    TYPEOF          reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    PARSE           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    LENGTH          reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    PUSH            reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    POP             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    STRUCT          reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    $end            reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    END             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    ELSE            reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    ELSEIF          reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)


state 56

    (9) instruccion -> definicion_asignacion_instr newline .

    PRINT           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    PRINTLN         reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    LOCAL           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    ID              reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    FUNCTION        reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    RETURN          reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    BREAK           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    CONTINUE        reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    IF              reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    WHILE           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    FOR             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    LOG             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    LOG10           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    COS             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    SIN             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    TAN             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    SQRT            reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    UPPERCASE       reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    LOWERCASE       reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    TOSTRING        reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    TOFLOAT         reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    TRUNC           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    TYPEOF          reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    PARSE           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    LENGTH          reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    PUSH            reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    POP             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    STRUCT          reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    $end            reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    END             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    ELSE            reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    ELSEIF          reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)


state 57

    (10) instruccion -> call_function newline .

    PRINT           reduce using rule 10 (instruccion -> call_function newline .)
    PRINTLN         reduce using rule 10 (instruccion -> call_function newline .)
    LOCAL           reduce using rule 10 (instruccion -> call_function newline .)
    ID              reduce using rule 10 (instruccion -> call_function newline .)
    FUNCTION        reduce using rule 10 (instruccion -> call_function newline .)
    RETURN          reduce using rule 10 (instruccion -> call_function newline .)
    BREAK           reduce using rule 10 (instruccion -> call_function newline .)
    CONTINUE        reduce using rule 10 (instruccion -> call_function newline .)
    IF              reduce using rule 10 (instruccion -> call_function newline .)
    WHILE           reduce using rule 10 (instruccion -> call_function newline .)
    FOR             reduce using rule 10 (instruccion -> call_function newline .)
    LOG             reduce using rule 10 (instruccion -> call_function newline .)
    LOG10           reduce using rule 10 (instruccion -> call_function newline .)
    COS             reduce using rule 10 (instruccion -> call_function newline .)
    SIN             reduce using rule 10 (instruccion -> call_function newline .)
    TAN             reduce using rule 10 (instruccion -> call_function newline .)
    SQRT            reduce using rule 10 (instruccion -> call_function newline .)
    UPPERCASE       reduce using rule 10 (instruccion -> call_function newline .)
    LOWERCASE       reduce using rule 10 (instruccion -> call_function newline .)
    TOSTRING        reduce using rule 10 (instruccion -> call_function newline .)
    TOFLOAT         reduce using rule 10 (instruccion -> call_function newline .)
    TRUNC           reduce using rule 10 (instruccion -> call_function newline .)
    TYPEOF          reduce using rule 10 (instruccion -> call_function newline .)
    PARSE           reduce using rule 10 (instruccion -> call_function newline .)
    LENGTH          reduce using rule 10 (instruccion -> call_function newline .)
    PUSH            reduce using rule 10 (instruccion -> call_function newline .)
    POP             reduce using rule 10 (instruccion -> call_function newline .)
    STRUCT          reduce using rule 10 (instruccion -> call_function newline .)
    $end            reduce using rule 10 (instruccion -> call_function newline .)
    END             reduce using rule 10 (instruccion -> call_function newline .)
    ELSE            reduce using rule 10 (instruccion -> call_function newline .)
    ELSEIF          reduce using rule 10 (instruccion -> call_function newline .)


state 58

    (11) instruccion -> declare_function newline .

    PRINT           reduce using rule 11 (instruccion -> declare_function newline .)
    PRINTLN         reduce using rule 11 (instruccion -> declare_function newline .)
    LOCAL           reduce using rule 11 (instruccion -> declare_function newline .)
    ID              reduce using rule 11 (instruccion -> declare_function newline .)
    FUNCTION        reduce using rule 11 (instruccion -> declare_function newline .)
    RETURN          reduce using rule 11 (instruccion -> declare_function newline .)
    BREAK           reduce using rule 11 (instruccion -> declare_function newline .)
    CONTINUE        reduce using rule 11 (instruccion -> declare_function newline .)
    IF              reduce using rule 11 (instruccion -> declare_function newline .)
    WHILE           reduce using rule 11 (instruccion -> declare_function newline .)
    FOR             reduce using rule 11 (instruccion -> declare_function newline .)
    LOG             reduce using rule 11 (instruccion -> declare_function newline .)
    LOG10           reduce using rule 11 (instruccion -> declare_function newline .)
    COS             reduce using rule 11 (instruccion -> declare_function newline .)
    SIN             reduce using rule 11 (instruccion -> declare_function newline .)
    TAN             reduce using rule 11 (instruccion -> declare_function newline .)
    SQRT            reduce using rule 11 (instruccion -> declare_function newline .)
    UPPERCASE       reduce using rule 11 (instruccion -> declare_function newline .)
    LOWERCASE       reduce using rule 11 (instruccion -> declare_function newline .)
    TOSTRING        reduce using rule 11 (instruccion -> declare_function newline .)
    TOFLOAT         reduce using rule 11 (instruccion -> declare_function newline .)
    TRUNC           reduce using rule 11 (instruccion -> declare_function newline .)
    TYPEOF          reduce using rule 11 (instruccion -> declare_function newline .)
    PARSE           reduce using rule 11 (instruccion -> declare_function newline .)
    LENGTH          reduce using rule 11 (instruccion -> declare_function newline .)
    PUSH            reduce using rule 11 (instruccion -> declare_function newline .)
    POP             reduce using rule 11 (instruccion -> declare_function newline .)
    STRUCT          reduce using rule 11 (instruccion -> declare_function newline .)
    $end            reduce using rule 11 (instruccion -> declare_function newline .)
    END             reduce using rule 11 (instruccion -> declare_function newline .)
    ELSE            reduce using rule 11 (instruccion -> declare_function newline .)
    ELSEIF          reduce using rule 11 (instruccion -> declare_function newline .)


state 59

    (12) instruccion -> return_state newline .

    PRINT           reduce using rule 12 (instruccion -> return_state newline .)
    PRINTLN         reduce using rule 12 (instruccion -> return_state newline .)
    LOCAL           reduce using rule 12 (instruccion -> return_state newline .)
    ID              reduce using rule 12 (instruccion -> return_state newline .)
    FUNCTION        reduce using rule 12 (instruccion -> return_state newline .)
    RETURN          reduce using rule 12 (instruccion -> return_state newline .)
    BREAK           reduce using rule 12 (instruccion -> return_state newline .)
    CONTINUE        reduce using rule 12 (instruccion -> return_state newline .)
    IF              reduce using rule 12 (instruccion -> return_state newline .)
    WHILE           reduce using rule 12 (instruccion -> return_state newline .)
    FOR             reduce using rule 12 (instruccion -> return_state newline .)
    LOG             reduce using rule 12 (instruccion -> return_state newline .)
    LOG10           reduce using rule 12 (instruccion -> return_state newline .)
    COS             reduce using rule 12 (instruccion -> return_state newline .)
    SIN             reduce using rule 12 (instruccion -> return_state newline .)
    TAN             reduce using rule 12 (instruccion -> return_state newline .)
    SQRT            reduce using rule 12 (instruccion -> return_state newline .)
    UPPERCASE       reduce using rule 12 (instruccion -> return_state newline .)
    LOWERCASE       reduce using rule 12 (instruccion -> return_state newline .)
    TOSTRING        reduce using rule 12 (instruccion -> return_state newline .)
    TOFLOAT         reduce using rule 12 (instruccion -> return_state newline .)
    TRUNC           reduce using rule 12 (instruccion -> return_state newline .)
    TYPEOF          reduce using rule 12 (instruccion -> return_state newline .)
    PARSE           reduce using rule 12 (instruccion -> return_state newline .)
    LENGTH          reduce using rule 12 (instruccion -> return_state newline .)
    PUSH            reduce using rule 12 (instruccion -> return_state newline .)
    POP             reduce using rule 12 (instruccion -> return_state newline .)
    STRUCT          reduce using rule 12 (instruccion -> return_state newline .)
    $end            reduce using rule 12 (instruccion -> return_state newline .)
    END             reduce using rule 12 (instruccion -> return_state newline .)
    ELSE            reduce using rule 12 (instruccion -> return_state newline .)
    ELSEIF          reduce using rule 12 (instruccion -> return_state newline .)


state 60

    (13) instruccion -> break_state newline .

    PRINT           reduce using rule 13 (instruccion -> break_state newline .)
    PRINTLN         reduce using rule 13 (instruccion -> break_state newline .)
    LOCAL           reduce using rule 13 (instruccion -> break_state newline .)
    ID              reduce using rule 13 (instruccion -> break_state newline .)
    FUNCTION        reduce using rule 13 (instruccion -> break_state newline .)
    RETURN          reduce using rule 13 (instruccion -> break_state newline .)
    BREAK           reduce using rule 13 (instruccion -> break_state newline .)
    CONTINUE        reduce using rule 13 (instruccion -> break_state newline .)
    IF              reduce using rule 13 (instruccion -> break_state newline .)
    WHILE           reduce using rule 13 (instruccion -> break_state newline .)
    FOR             reduce using rule 13 (instruccion -> break_state newline .)
    LOG             reduce using rule 13 (instruccion -> break_state newline .)
    LOG10           reduce using rule 13 (instruccion -> break_state newline .)
    COS             reduce using rule 13 (instruccion -> break_state newline .)
    SIN             reduce using rule 13 (instruccion -> break_state newline .)
    TAN             reduce using rule 13 (instruccion -> break_state newline .)
    SQRT            reduce using rule 13 (instruccion -> break_state newline .)
    UPPERCASE       reduce using rule 13 (instruccion -> break_state newline .)
    LOWERCASE       reduce using rule 13 (instruccion -> break_state newline .)
    TOSTRING        reduce using rule 13 (instruccion -> break_state newline .)
    TOFLOAT         reduce using rule 13 (instruccion -> break_state newline .)
    TRUNC           reduce using rule 13 (instruccion -> break_state newline .)
    TYPEOF          reduce using rule 13 (instruccion -> break_state newline .)
    PARSE           reduce using rule 13 (instruccion -> break_state newline .)
    LENGTH          reduce using rule 13 (instruccion -> break_state newline .)
    PUSH            reduce using rule 13 (instruccion -> break_state newline .)
    POP             reduce using rule 13 (instruccion -> break_state newline .)
    STRUCT          reduce using rule 13 (instruccion -> break_state newline .)
    $end            reduce using rule 13 (instruccion -> break_state newline .)
    END             reduce using rule 13 (instruccion -> break_state newline .)
    ELSE            reduce using rule 13 (instruccion -> break_state newline .)
    ELSEIF          reduce using rule 13 (instruccion -> break_state newline .)


state 61

    (14) instruccion -> continue_state newline .

    PRINT           reduce using rule 14 (instruccion -> continue_state newline .)
    PRINTLN         reduce using rule 14 (instruccion -> continue_state newline .)
    LOCAL           reduce using rule 14 (instruccion -> continue_state newline .)
    ID              reduce using rule 14 (instruccion -> continue_state newline .)
    FUNCTION        reduce using rule 14 (instruccion -> continue_state newline .)
    RETURN          reduce using rule 14 (instruccion -> continue_state newline .)
    BREAK           reduce using rule 14 (instruccion -> continue_state newline .)
    CONTINUE        reduce using rule 14 (instruccion -> continue_state newline .)
    IF              reduce using rule 14 (instruccion -> continue_state newline .)
    WHILE           reduce using rule 14 (instruccion -> continue_state newline .)
    FOR             reduce using rule 14 (instruccion -> continue_state newline .)
    LOG             reduce using rule 14 (instruccion -> continue_state newline .)
    LOG10           reduce using rule 14 (instruccion -> continue_state newline .)
    COS             reduce using rule 14 (instruccion -> continue_state newline .)
    SIN             reduce using rule 14 (instruccion -> continue_state newline .)
    TAN             reduce using rule 14 (instruccion -> continue_state newline .)
    SQRT            reduce using rule 14 (instruccion -> continue_state newline .)
    UPPERCASE       reduce using rule 14 (instruccion -> continue_state newline .)
    LOWERCASE       reduce using rule 14 (instruccion -> continue_state newline .)
    TOSTRING        reduce using rule 14 (instruccion -> continue_state newline .)
    TOFLOAT         reduce using rule 14 (instruccion -> continue_state newline .)
    TRUNC           reduce using rule 14 (instruccion -> continue_state newline .)
    TYPEOF          reduce using rule 14 (instruccion -> continue_state newline .)
    PARSE           reduce using rule 14 (instruccion -> continue_state newline .)
    LENGTH          reduce using rule 14 (instruccion -> continue_state newline .)
    PUSH            reduce using rule 14 (instruccion -> continue_state newline .)
    POP             reduce using rule 14 (instruccion -> continue_state newline .)
    STRUCT          reduce using rule 14 (instruccion -> continue_state newline .)
    $end            reduce using rule 14 (instruccion -> continue_state newline .)
    END             reduce using rule 14 (instruccion -> continue_state newline .)
    ELSE            reduce using rule 14 (instruccion -> continue_state newline .)
    ELSEIF          reduce using rule 14 (instruccion -> continue_state newline .)


state 62

    (15) instruccion -> if_state newline .

    PRINT           reduce using rule 15 (instruccion -> if_state newline .)
    PRINTLN         reduce using rule 15 (instruccion -> if_state newline .)
    LOCAL           reduce using rule 15 (instruccion -> if_state newline .)
    ID              reduce using rule 15 (instruccion -> if_state newline .)
    FUNCTION        reduce using rule 15 (instruccion -> if_state newline .)
    RETURN          reduce using rule 15 (instruccion -> if_state newline .)
    BREAK           reduce using rule 15 (instruccion -> if_state newline .)
    CONTINUE        reduce using rule 15 (instruccion -> if_state newline .)
    IF              reduce using rule 15 (instruccion -> if_state newline .)
    WHILE           reduce using rule 15 (instruccion -> if_state newline .)
    FOR             reduce using rule 15 (instruccion -> if_state newline .)
    LOG             reduce using rule 15 (instruccion -> if_state newline .)
    LOG10           reduce using rule 15 (instruccion -> if_state newline .)
    COS             reduce using rule 15 (instruccion -> if_state newline .)
    SIN             reduce using rule 15 (instruccion -> if_state newline .)
    TAN             reduce using rule 15 (instruccion -> if_state newline .)
    SQRT            reduce using rule 15 (instruccion -> if_state newline .)
    UPPERCASE       reduce using rule 15 (instruccion -> if_state newline .)
    LOWERCASE       reduce using rule 15 (instruccion -> if_state newline .)
    TOSTRING        reduce using rule 15 (instruccion -> if_state newline .)
    TOFLOAT         reduce using rule 15 (instruccion -> if_state newline .)
    TRUNC           reduce using rule 15 (instruccion -> if_state newline .)
    TYPEOF          reduce using rule 15 (instruccion -> if_state newline .)
    PARSE           reduce using rule 15 (instruccion -> if_state newline .)
    LENGTH          reduce using rule 15 (instruccion -> if_state newline .)
    PUSH            reduce using rule 15 (instruccion -> if_state newline .)
    POP             reduce using rule 15 (instruccion -> if_state newline .)
    STRUCT          reduce using rule 15 (instruccion -> if_state newline .)
    $end            reduce using rule 15 (instruccion -> if_state newline .)
    END             reduce using rule 15 (instruccion -> if_state newline .)
    ELSE            reduce using rule 15 (instruccion -> if_state newline .)
    ELSEIF          reduce using rule 15 (instruccion -> if_state newline .)


state 63

    (16) instruccion -> while_state newline .

    PRINT           reduce using rule 16 (instruccion -> while_state newline .)
    PRINTLN         reduce using rule 16 (instruccion -> while_state newline .)
    LOCAL           reduce using rule 16 (instruccion -> while_state newline .)
    ID              reduce using rule 16 (instruccion -> while_state newline .)
    FUNCTION        reduce using rule 16 (instruccion -> while_state newline .)
    RETURN          reduce using rule 16 (instruccion -> while_state newline .)
    BREAK           reduce using rule 16 (instruccion -> while_state newline .)
    CONTINUE        reduce using rule 16 (instruccion -> while_state newline .)
    IF              reduce using rule 16 (instruccion -> while_state newline .)
    WHILE           reduce using rule 16 (instruccion -> while_state newline .)
    FOR             reduce using rule 16 (instruccion -> while_state newline .)
    LOG             reduce using rule 16 (instruccion -> while_state newline .)
    LOG10           reduce using rule 16 (instruccion -> while_state newline .)
    COS             reduce using rule 16 (instruccion -> while_state newline .)
    SIN             reduce using rule 16 (instruccion -> while_state newline .)
    TAN             reduce using rule 16 (instruccion -> while_state newline .)
    SQRT            reduce using rule 16 (instruccion -> while_state newline .)
    UPPERCASE       reduce using rule 16 (instruccion -> while_state newline .)
    LOWERCASE       reduce using rule 16 (instruccion -> while_state newline .)
    TOSTRING        reduce using rule 16 (instruccion -> while_state newline .)
    TOFLOAT         reduce using rule 16 (instruccion -> while_state newline .)
    TRUNC           reduce using rule 16 (instruccion -> while_state newline .)
    TYPEOF          reduce using rule 16 (instruccion -> while_state newline .)
    PARSE           reduce using rule 16 (instruccion -> while_state newline .)
    LENGTH          reduce using rule 16 (instruccion -> while_state newline .)
    PUSH            reduce using rule 16 (instruccion -> while_state newline .)
    POP             reduce using rule 16 (instruccion -> while_state newline .)
    STRUCT          reduce using rule 16 (instruccion -> while_state newline .)
    $end            reduce using rule 16 (instruccion -> while_state newline .)
    END             reduce using rule 16 (instruccion -> while_state newline .)
    ELSE            reduce using rule 16 (instruccion -> while_state newline .)
    ELSEIF          reduce using rule 16 (instruccion -> while_state newline .)


state 64

    (17) instruccion -> for_state newline .

    PRINT           reduce using rule 17 (instruccion -> for_state newline .)
    PRINTLN         reduce using rule 17 (instruccion -> for_state newline .)
    LOCAL           reduce using rule 17 (instruccion -> for_state newline .)
    ID              reduce using rule 17 (instruccion -> for_state newline .)
    FUNCTION        reduce using rule 17 (instruccion -> for_state newline .)
    RETURN          reduce using rule 17 (instruccion -> for_state newline .)
    BREAK           reduce using rule 17 (instruccion -> for_state newline .)
    CONTINUE        reduce using rule 17 (instruccion -> for_state newline .)
    IF              reduce using rule 17 (instruccion -> for_state newline .)
    WHILE           reduce using rule 17 (instruccion -> for_state newline .)
    FOR             reduce using rule 17 (instruccion -> for_state newline .)
    LOG             reduce using rule 17 (instruccion -> for_state newline .)
    LOG10           reduce using rule 17 (instruccion -> for_state newline .)
    COS             reduce using rule 17 (instruccion -> for_state newline .)
    SIN             reduce using rule 17 (instruccion -> for_state newline .)
    TAN             reduce using rule 17 (instruccion -> for_state newline .)
    SQRT            reduce using rule 17 (instruccion -> for_state newline .)
    UPPERCASE       reduce using rule 17 (instruccion -> for_state newline .)
    LOWERCASE       reduce using rule 17 (instruccion -> for_state newline .)
    TOSTRING        reduce using rule 17 (instruccion -> for_state newline .)
    TOFLOAT         reduce using rule 17 (instruccion -> for_state newline .)
    TRUNC           reduce using rule 17 (instruccion -> for_state newline .)
    TYPEOF          reduce using rule 17 (instruccion -> for_state newline .)
    PARSE           reduce using rule 17 (instruccion -> for_state newline .)
    LENGTH          reduce using rule 17 (instruccion -> for_state newline .)
    PUSH            reduce using rule 17 (instruccion -> for_state newline .)
    POP             reduce using rule 17 (instruccion -> for_state newline .)
    STRUCT          reduce using rule 17 (instruccion -> for_state newline .)
    $end            reduce using rule 17 (instruccion -> for_state newline .)
    END             reduce using rule 17 (instruccion -> for_state newline .)
    ELSE            reduce using rule 17 (instruccion -> for_state newline .)
    ELSEIF          reduce using rule 17 (instruccion -> for_state newline .)


state 65

    (18) instruccion -> nativas newline .

    PRINT           reduce using rule 18 (instruccion -> nativas newline .)
    PRINTLN         reduce using rule 18 (instruccion -> nativas newline .)
    LOCAL           reduce using rule 18 (instruccion -> nativas newline .)
    ID              reduce using rule 18 (instruccion -> nativas newline .)
    FUNCTION        reduce using rule 18 (instruccion -> nativas newline .)
    RETURN          reduce using rule 18 (instruccion -> nativas newline .)
    BREAK           reduce using rule 18 (instruccion -> nativas newline .)
    CONTINUE        reduce using rule 18 (instruccion -> nativas newline .)
    IF              reduce using rule 18 (instruccion -> nativas newline .)
    WHILE           reduce using rule 18 (instruccion -> nativas newline .)
    FOR             reduce using rule 18 (instruccion -> nativas newline .)
    LOG             reduce using rule 18 (instruccion -> nativas newline .)
    LOG10           reduce using rule 18 (instruccion -> nativas newline .)
    COS             reduce using rule 18 (instruccion -> nativas newline .)
    SIN             reduce using rule 18 (instruccion -> nativas newline .)
    TAN             reduce using rule 18 (instruccion -> nativas newline .)
    SQRT            reduce using rule 18 (instruccion -> nativas newline .)
    UPPERCASE       reduce using rule 18 (instruccion -> nativas newline .)
    LOWERCASE       reduce using rule 18 (instruccion -> nativas newline .)
    TOSTRING        reduce using rule 18 (instruccion -> nativas newline .)
    TOFLOAT         reduce using rule 18 (instruccion -> nativas newline .)
    TRUNC           reduce using rule 18 (instruccion -> nativas newline .)
    TYPEOF          reduce using rule 18 (instruccion -> nativas newline .)
    PARSE           reduce using rule 18 (instruccion -> nativas newline .)
    LENGTH          reduce using rule 18 (instruccion -> nativas newline .)
    PUSH            reduce using rule 18 (instruccion -> nativas newline .)
    POP             reduce using rule 18 (instruccion -> nativas newline .)
    STRUCT          reduce using rule 18 (instruccion -> nativas newline .)
    $end            reduce using rule 18 (instruccion -> nativas newline .)
    END             reduce using rule 18 (instruccion -> nativas newline .)
    ELSE            reduce using rule 18 (instruccion -> nativas newline .)
    ELSEIF          reduce using rule 18 (instruccion -> nativas newline .)


state 66

    (19) instruccion -> create_struct newline .

    PRINT           reduce using rule 19 (instruccion -> create_struct newline .)
    PRINTLN         reduce using rule 19 (instruccion -> create_struct newline .)
    LOCAL           reduce using rule 19 (instruccion -> create_struct newline .)
    ID              reduce using rule 19 (instruccion -> create_struct newline .)
    FUNCTION        reduce using rule 19 (instruccion -> create_struct newline .)
    RETURN          reduce using rule 19 (instruccion -> create_struct newline .)
    BREAK           reduce using rule 19 (instruccion -> create_struct newline .)
    CONTINUE        reduce using rule 19 (instruccion -> create_struct newline .)
    IF              reduce using rule 19 (instruccion -> create_struct newline .)
    WHILE           reduce using rule 19 (instruccion -> create_struct newline .)
    FOR             reduce using rule 19 (instruccion -> create_struct newline .)
    LOG             reduce using rule 19 (instruccion -> create_struct newline .)
    LOG10           reduce using rule 19 (instruccion -> create_struct newline .)
    COS             reduce using rule 19 (instruccion -> create_struct newline .)
    SIN             reduce using rule 19 (instruccion -> create_struct newline .)
    TAN             reduce using rule 19 (instruccion -> create_struct newline .)
    SQRT            reduce using rule 19 (instruccion -> create_struct newline .)
    UPPERCASE       reduce using rule 19 (instruccion -> create_struct newline .)
    LOWERCASE       reduce using rule 19 (instruccion -> create_struct newline .)
    TOSTRING        reduce using rule 19 (instruccion -> create_struct newline .)
    TOFLOAT         reduce using rule 19 (instruccion -> create_struct newline .)
    TRUNC           reduce using rule 19 (instruccion -> create_struct newline .)
    TYPEOF          reduce using rule 19 (instruccion -> create_struct newline .)
    PARSE           reduce using rule 19 (instruccion -> create_struct newline .)
    LENGTH          reduce using rule 19 (instruccion -> create_struct newline .)
    PUSH            reduce using rule 19 (instruccion -> create_struct newline .)
    POP             reduce using rule 19 (instruccion -> create_struct newline .)
    STRUCT          reduce using rule 19 (instruccion -> create_struct newline .)
    $end            reduce using rule 19 (instruccion -> create_struct newline .)
    END             reduce using rule 19 (instruccion -> create_struct newline .)
    ELSE            reduce using rule 19 (instruccion -> create_struct newline .)
    ELSEIF          reduce using rule 19 (instruccion -> create_struct newline .)


state 67

    (20) instruccion -> declare_struct newline .

    PRINT           reduce using rule 20 (instruccion -> declare_struct newline .)
    PRINTLN         reduce using rule 20 (instruccion -> declare_struct newline .)
    LOCAL           reduce using rule 20 (instruccion -> declare_struct newline .)
    ID              reduce using rule 20 (instruccion -> declare_struct newline .)
    FUNCTION        reduce using rule 20 (instruccion -> declare_struct newline .)
    RETURN          reduce using rule 20 (instruccion -> declare_struct newline .)
    BREAK           reduce using rule 20 (instruccion -> declare_struct newline .)
    CONTINUE        reduce using rule 20 (instruccion -> declare_struct newline .)
    IF              reduce using rule 20 (instruccion -> declare_struct newline .)
    WHILE           reduce using rule 20 (instruccion -> declare_struct newline .)
    FOR             reduce using rule 20 (instruccion -> declare_struct newline .)
    LOG             reduce using rule 20 (instruccion -> declare_struct newline .)
    LOG10           reduce using rule 20 (instruccion -> declare_struct newline .)
    COS             reduce using rule 20 (instruccion -> declare_struct newline .)
    SIN             reduce using rule 20 (instruccion -> declare_struct newline .)
    TAN             reduce using rule 20 (instruccion -> declare_struct newline .)
    SQRT            reduce using rule 20 (instruccion -> declare_struct newline .)
    UPPERCASE       reduce using rule 20 (instruccion -> declare_struct newline .)
    LOWERCASE       reduce using rule 20 (instruccion -> declare_struct newline .)
    TOSTRING        reduce using rule 20 (instruccion -> declare_struct newline .)
    TOFLOAT         reduce using rule 20 (instruccion -> declare_struct newline .)
    TRUNC           reduce using rule 20 (instruccion -> declare_struct newline .)
    TYPEOF          reduce using rule 20 (instruccion -> declare_struct newline .)
    PARSE           reduce using rule 20 (instruccion -> declare_struct newline .)
    LENGTH          reduce using rule 20 (instruccion -> declare_struct newline .)
    PUSH            reduce using rule 20 (instruccion -> declare_struct newline .)
    POP             reduce using rule 20 (instruccion -> declare_struct newline .)
    STRUCT          reduce using rule 20 (instruccion -> declare_struct newline .)
    $end            reduce using rule 20 (instruccion -> declare_struct newline .)
    END             reduce using rule 20 (instruccion -> declare_struct newline .)
    ELSE            reduce using rule 20 (instruccion -> declare_struct newline .)
    ELSEIF          reduce using rule 20 (instruccion -> declare_struct newline .)


state 68

    (21) instruccion -> assign_access newline .

    PRINT           reduce using rule 21 (instruccion -> assign_access newline .)
    PRINTLN         reduce using rule 21 (instruccion -> assign_access newline .)
    LOCAL           reduce using rule 21 (instruccion -> assign_access newline .)
    ID              reduce using rule 21 (instruccion -> assign_access newline .)
    FUNCTION        reduce using rule 21 (instruccion -> assign_access newline .)
    RETURN          reduce using rule 21 (instruccion -> assign_access newline .)
    BREAK           reduce using rule 21 (instruccion -> assign_access newline .)
    CONTINUE        reduce using rule 21 (instruccion -> assign_access newline .)
    IF              reduce using rule 21 (instruccion -> assign_access newline .)
    WHILE           reduce using rule 21 (instruccion -> assign_access newline .)
    FOR             reduce using rule 21 (instruccion -> assign_access newline .)
    LOG             reduce using rule 21 (instruccion -> assign_access newline .)
    LOG10           reduce using rule 21 (instruccion -> assign_access newline .)
    COS             reduce using rule 21 (instruccion -> assign_access newline .)
    SIN             reduce using rule 21 (instruccion -> assign_access newline .)
    TAN             reduce using rule 21 (instruccion -> assign_access newline .)
    SQRT            reduce using rule 21 (instruccion -> assign_access newline .)
    UPPERCASE       reduce using rule 21 (instruccion -> assign_access newline .)
    LOWERCASE       reduce using rule 21 (instruccion -> assign_access newline .)
    TOSTRING        reduce using rule 21 (instruccion -> assign_access newline .)
    TOFLOAT         reduce using rule 21 (instruccion -> assign_access newline .)
    TRUNC           reduce using rule 21 (instruccion -> assign_access newline .)
    TYPEOF          reduce using rule 21 (instruccion -> assign_access newline .)
    PARSE           reduce using rule 21 (instruccion -> assign_access newline .)
    LENGTH          reduce using rule 21 (instruccion -> assign_access newline .)
    PUSH            reduce using rule 21 (instruccion -> assign_access newline .)
    POP             reduce using rule 21 (instruccion -> assign_access newline .)
    STRUCT          reduce using rule 21 (instruccion -> assign_access newline .)
    $end            reduce using rule 21 (instruccion -> assign_access newline .)
    END             reduce using rule 21 (instruccion -> assign_access newline .)
    ELSE            reduce using rule 21 (instruccion -> assign_access newline .)
    ELSEIF          reduce using rule 21 (instruccion -> assign_access newline .)


state 69

    (69) print_instr -> PRINT PARIZQ . exp_list PARDER
    (86) exp_list -> . exp_list COMA expression
    (87) exp_list -> . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    exp_list                       shift and go to state 115
    expression                     shift and go to state 116
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 70

    (70) println_instr -> PRINTLN PARIZQ . exp_list PARDER
    (86) exp_list -> . exp_list COMA expression
    (87) exp_list -> . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    exp_list                       shift and go to state 117
    expression                     shift and go to state 116
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 71

    (78) definicion_instr -> LOCAL ID .
    (80) asignacion_instr -> LOCAL ID . IGUAL expression
    (82) definicion_asignacion_instr -> LOCAL ID . IGUAL expression DOSP tipo

    newline         reduce using rule 78 (definicion_instr -> LOCAL ID .)
    IGUAL           shift and go to state 118


state 72

    (79) asignacion_instr -> ID IGUAL . expression
    (81) definicion_asignacion_instr -> ID IGUAL . expression DOSP tipo
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 119
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 73

    (83) asignacion_arreglo_instr -> ID index_list . IGUAL expression
    (88) index_list -> index_list . CORCHETEIZQ expression CORCHETEDER

    IGUAL           shift and go to state 120
    CORCHETEIZQ     shift and go to state 121


state 74

    (115) declare_struct -> ID DOSP . DOSP ID

    DOSP            shift and go to state 122


state 75

    (84) call_function -> ID PARIZQ . PARDER
    (85) call_function -> ID PARIZQ . exp_list PARDER
    (86) exp_list -> . exp_list COMA expression
    (87) exp_list -> . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    PARDER          shift and go to state 123
    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    exp_list                       shift and go to state 124
    expression                     shift and go to state 116
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 76

    (116) assign_access -> ID PUNTO . ID IGUAL expression

    ID              shift and go to state 125


state 77

    (89) index_list -> CORCHETEIZQ . expression CORCHETEDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 126
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 78

    (91) declare_function -> FUNCTION ID . PARIZQ dec_params PARDER DOSP newline statement END
    (92) declare_function -> FUNCTION ID . PARIZQ PARDER DOSP newline statement END

    PARIZQ          shift and go to state 127


state 79

    (111) return_state -> RETURN expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    newline         reduce using rule 111 (return_state -> RETURN expression .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 80

    (22) expression -> MENOS . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 142
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 81

    (23) expression -> NOT . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 143
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 82

    (38) expression -> final_expression .

    MAS             reduce using rule 38 (expression -> final_expression .)
    MENOS           reduce using rule 38 (expression -> final_expression .)
    POR             reduce using rule 38 (expression -> final_expression .)
    DIVIDIDO        reduce using rule 38 (expression -> final_expression .)
    POTENCIA        reduce using rule 38 (expression -> final_expression .)
    MODULO          reduce using rule 38 (expression -> final_expression .)
    MAYQUE          reduce using rule 38 (expression -> final_expression .)
    MENQUE          reduce using rule 38 (expression -> final_expression .)
    MENIGUALQUE     reduce using rule 38 (expression -> final_expression .)
    MAYIGUALQUE     reduce using rule 38 (expression -> final_expression .)
    IGUALQUE        reduce using rule 38 (expression -> final_expression .)
    NIGUALQUE       reduce using rule 38 (expression -> final_expression .)
    OR              reduce using rule 38 (expression -> final_expression .)
    AND             reduce using rule 38 (expression -> final_expression .)
    newline         reduce using rule 38 (expression -> final_expression .)
    DOSP            reduce using rule 38 (expression -> final_expression .)
    PARDER          reduce using rule 38 (expression -> final_expression .)
    COMA            reduce using rule 38 (expression -> final_expression .)
    CORCHETEDER     reduce using rule 38 (expression -> final_expression .)


state 83

    (39) final_expression -> PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 144
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 84

    (40) final_expression -> CORCHETEIZQ . exp_list CORCHETEDER
    (86) exp_list -> . exp_list COMA expression
    (87) exp_list -> . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    exp_list                       shift and go to state 145
    expression                     shift and go to state 116
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 85

    (41) final_expression -> DECIMAL .

    MAS             reduce using rule 41 (final_expression -> DECIMAL .)
    MENOS           reduce using rule 41 (final_expression -> DECIMAL .)
    POR             reduce using rule 41 (final_expression -> DECIMAL .)
    DIVIDIDO        reduce using rule 41 (final_expression -> DECIMAL .)
    POTENCIA        reduce using rule 41 (final_expression -> DECIMAL .)
    MODULO          reduce using rule 41 (final_expression -> DECIMAL .)
    MAYQUE          reduce using rule 41 (final_expression -> DECIMAL .)
    MENQUE          reduce using rule 41 (final_expression -> DECIMAL .)
    MENIGUALQUE     reduce using rule 41 (final_expression -> DECIMAL .)
    MAYIGUALQUE     reduce using rule 41 (final_expression -> DECIMAL .)
    IGUALQUE        reduce using rule 41 (final_expression -> DECIMAL .)
    NIGUALQUE       reduce using rule 41 (final_expression -> DECIMAL .)
    OR              reduce using rule 41 (final_expression -> DECIMAL .)
    AND             reduce using rule 41 (final_expression -> DECIMAL .)
    newline         reduce using rule 41 (final_expression -> DECIMAL .)
    DOSP            reduce using rule 41 (final_expression -> DECIMAL .)
    PARDER          reduce using rule 41 (final_expression -> DECIMAL .)
    COMA            reduce using rule 41 (final_expression -> DECIMAL .)
    CORCHETEDER     reduce using rule 41 (final_expression -> DECIMAL .)


state 86

    (42) final_expression -> ENTERO .

    MAS             reduce using rule 42 (final_expression -> ENTERO .)
    MENOS           reduce using rule 42 (final_expression -> ENTERO .)
    POR             reduce using rule 42 (final_expression -> ENTERO .)
    DIVIDIDO        reduce using rule 42 (final_expression -> ENTERO .)
    POTENCIA        reduce using rule 42 (final_expression -> ENTERO .)
    MODULO          reduce using rule 42 (final_expression -> ENTERO .)
    MAYQUE          reduce using rule 42 (final_expression -> ENTERO .)
    MENQUE          reduce using rule 42 (final_expression -> ENTERO .)
    MENIGUALQUE     reduce using rule 42 (final_expression -> ENTERO .)
    MAYIGUALQUE     reduce using rule 42 (final_expression -> ENTERO .)
    IGUALQUE        reduce using rule 42 (final_expression -> ENTERO .)
    NIGUALQUE       reduce using rule 42 (final_expression -> ENTERO .)
    OR              reduce using rule 42 (final_expression -> ENTERO .)
    AND             reduce using rule 42 (final_expression -> ENTERO .)
    newline         reduce using rule 42 (final_expression -> ENTERO .)
    DOSP            reduce using rule 42 (final_expression -> ENTERO .)
    PARDER          reduce using rule 42 (final_expression -> ENTERO .)
    COMA            reduce using rule 42 (final_expression -> ENTERO .)
    CORCHETEDER     reduce using rule 42 (final_expression -> ENTERO .)


state 87

    (43) final_expression -> CADENA .

    MAS             reduce using rule 43 (final_expression -> CADENA .)
    MENOS           reduce using rule 43 (final_expression -> CADENA .)
    POR             reduce using rule 43 (final_expression -> CADENA .)
    DIVIDIDO        reduce using rule 43 (final_expression -> CADENA .)
    POTENCIA        reduce using rule 43 (final_expression -> CADENA .)
    MODULO          reduce using rule 43 (final_expression -> CADENA .)
    MAYQUE          reduce using rule 43 (final_expression -> CADENA .)
    MENQUE          reduce using rule 43 (final_expression -> CADENA .)
    MENIGUALQUE     reduce using rule 43 (final_expression -> CADENA .)
    MAYIGUALQUE     reduce using rule 43 (final_expression -> CADENA .)
    IGUALQUE        reduce using rule 43 (final_expression -> CADENA .)
    NIGUALQUE       reduce using rule 43 (final_expression -> CADENA .)
    OR              reduce using rule 43 (final_expression -> CADENA .)
    AND             reduce using rule 43 (final_expression -> CADENA .)
    newline         reduce using rule 43 (final_expression -> CADENA .)
    DOSP            reduce using rule 43 (final_expression -> CADENA .)
    PARDER          reduce using rule 43 (final_expression -> CADENA .)
    COMA            reduce using rule 43 (final_expression -> CADENA .)
    CORCHETEDER     reduce using rule 43 (final_expression -> CADENA .)


state 88

    (44) final_expression -> CARACTER .

    MAS             reduce using rule 44 (final_expression -> CARACTER .)
    MENOS           reduce using rule 44 (final_expression -> CARACTER .)
    POR             reduce using rule 44 (final_expression -> CARACTER .)
    DIVIDIDO        reduce using rule 44 (final_expression -> CARACTER .)
    POTENCIA        reduce using rule 44 (final_expression -> CARACTER .)
    MODULO          reduce using rule 44 (final_expression -> CARACTER .)
    MAYQUE          reduce using rule 44 (final_expression -> CARACTER .)
    MENQUE          reduce using rule 44 (final_expression -> CARACTER .)
    MENIGUALQUE     reduce using rule 44 (final_expression -> CARACTER .)
    MAYIGUALQUE     reduce using rule 44 (final_expression -> CARACTER .)
    IGUALQUE        reduce using rule 44 (final_expression -> CARACTER .)
    NIGUALQUE       reduce using rule 44 (final_expression -> CARACTER .)
    OR              reduce using rule 44 (final_expression -> CARACTER .)
    AND             reduce using rule 44 (final_expression -> CARACTER .)
    newline         reduce using rule 44 (final_expression -> CARACTER .)
    DOSP            reduce using rule 44 (final_expression -> CARACTER .)
    PARDER          reduce using rule 44 (final_expression -> CARACTER .)
    COMA            reduce using rule 44 (final_expression -> CARACTER .)
    CORCHETEDER     reduce using rule 44 (final_expression -> CARACTER .)


state 89

    (45) final_expression -> ID .
    (46) final_expression -> ID . index_list
    (84) call_function -> ID . PARIZQ PARDER
    (85) call_function -> ID . PARIZQ exp_list PARDER
    (117) access_struct -> ID . PUNTO ID
    (88) index_list -> . index_list CORCHETEIZQ expression CORCHETEDER
    (89) index_list -> . CORCHETEIZQ expression CORCHETEDER

    MAS             reduce using rule 45 (final_expression -> ID .)
    MENOS           reduce using rule 45 (final_expression -> ID .)
    POR             reduce using rule 45 (final_expression -> ID .)
    DIVIDIDO        reduce using rule 45 (final_expression -> ID .)
    POTENCIA        reduce using rule 45 (final_expression -> ID .)
    MODULO          reduce using rule 45 (final_expression -> ID .)
    MAYQUE          reduce using rule 45 (final_expression -> ID .)
    MENQUE          reduce using rule 45 (final_expression -> ID .)
    MENIGUALQUE     reduce using rule 45 (final_expression -> ID .)
    MAYIGUALQUE     reduce using rule 45 (final_expression -> ID .)
    IGUALQUE        reduce using rule 45 (final_expression -> ID .)
    NIGUALQUE       reduce using rule 45 (final_expression -> ID .)
    OR              reduce using rule 45 (final_expression -> ID .)
    AND             reduce using rule 45 (final_expression -> ID .)
    newline         reduce using rule 45 (final_expression -> ID .)
    DOSP            reduce using rule 45 (final_expression -> ID .)
    PARDER          reduce using rule 45 (final_expression -> ID .)
    COMA            reduce using rule 45 (final_expression -> ID .)
    CORCHETEDER     reduce using rule 45 (final_expression -> ID .)
    PARIZQ          shift and go to state 75
    PUNTO           shift and go to state 147
    CORCHETEIZQ     shift and go to state 77

    index_list                     shift and go to state 146

state 90

    (47) final_expression -> TRUE .

    MAS             reduce using rule 47 (final_expression -> TRUE .)
    MENOS           reduce using rule 47 (final_expression -> TRUE .)
    POR             reduce using rule 47 (final_expression -> TRUE .)
    DIVIDIDO        reduce using rule 47 (final_expression -> TRUE .)
    POTENCIA        reduce using rule 47 (final_expression -> TRUE .)
    MODULO          reduce using rule 47 (final_expression -> TRUE .)
    MAYQUE          reduce using rule 47 (final_expression -> TRUE .)
    MENQUE          reduce using rule 47 (final_expression -> TRUE .)
    MENIGUALQUE     reduce using rule 47 (final_expression -> TRUE .)
    MAYIGUALQUE     reduce using rule 47 (final_expression -> TRUE .)
    IGUALQUE        reduce using rule 47 (final_expression -> TRUE .)
    NIGUALQUE       reduce using rule 47 (final_expression -> TRUE .)
    OR              reduce using rule 47 (final_expression -> TRUE .)
    AND             reduce using rule 47 (final_expression -> TRUE .)
    newline         reduce using rule 47 (final_expression -> TRUE .)
    DOSP            reduce using rule 47 (final_expression -> TRUE .)
    PARDER          reduce using rule 47 (final_expression -> TRUE .)
    COMA            reduce using rule 47 (final_expression -> TRUE .)
    CORCHETEDER     reduce using rule 47 (final_expression -> TRUE .)


state 91

    (48) final_expression -> FALSE .

    MAS             reduce using rule 48 (final_expression -> FALSE .)
    MENOS           reduce using rule 48 (final_expression -> FALSE .)
    POR             reduce using rule 48 (final_expression -> FALSE .)
    DIVIDIDO        reduce using rule 48 (final_expression -> FALSE .)
    POTENCIA        reduce using rule 48 (final_expression -> FALSE .)
    MODULO          reduce using rule 48 (final_expression -> FALSE .)
    MAYQUE          reduce using rule 48 (final_expression -> FALSE .)
    MENQUE          reduce using rule 48 (final_expression -> FALSE .)
    MENIGUALQUE     reduce using rule 48 (final_expression -> FALSE .)
    MAYIGUALQUE     reduce using rule 48 (final_expression -> FALSE .)
    IGUALQUE        reduce using rule 48 (final_expression -> FALSE .)
    NIGUALQUE       reduce using rule 48 (final_expression -> FALSE .)
    OR              reduce using rule 48 (final_expression -> FALSE .)
    AND             reduce using rule 48 (final_expression -> FALSE .)
    newline         reduce using rule 48 (final_expression -> FALSE .)
    DOSP            reduce using rule 48 (final_expression -> FALSE .)
    PARDER          reduce using rule 48 (final_expression -> FALSE .)
    COMA            reduce using rule 48 (final_expression -> FALSE .)
    CORCHETEDER     reduce using rule 48 (final_expression -> FALSE .)


state 92

    (49) final_expression -> call_function .

    MAS             reduce using rule 49 (final_expression -> call_function .)
    MENOS           reduce using rule 49 (final_expression -> call_function .)
    POR             reduce using rule 49 (final_expression -> call_function .)
    DIVIDIDO        reduce using rule 49 (final_expression -> call_function .)
    POTENCIA        reduce using rule 49 (final_expression -> call_function .)
    MODULO          reduce using rule 49 (final_expression -> call_function .)
    MAYQUE          reduce using rule 49 (final_expression -> call_function .)
    MENQUE          reduce using rule 49 (final_expression -> call_function .)
    MENIGUALQUE     reduce using rule 49 (final_expression -> call_function .)
    MAYIGUALQUE     reduce using rule 49 (final_expression -> call_function .)
    IGUALQUE        reduce using rule 49 (final_expression -> call_function .)
    NIGUALQUE       reduce using rule 49 (final_expression -> call_function .)
    OR              reduce using rule 49 (final_expression -> call_function .)
    AND             reduce using rule 49 (final_expression -> call_function .)
    newline         reduce using rule 49 (final_expression -> call_function .)
    DOSP            reduce using rule 49 (final_expression -> call_function .)
    PARDER          reduce using rule 49 (final_expression -> call_function .)
    COMA            reduce using rule 49 (final_expression -> call_function .)
    CORCHETEDER     reduce using rule 49 (final_expression -> call_function .)


state 93

    (50) final_expression -> access_struct .

    MAS             reduce using rule 50 (final_expression -> access_struct .)
    MENOS           reduce using rule 50 (final_expression -> access_struct .)
    POR             reduce using rule 50 (final_expression -> access_struct .)
    DIVIDIDO        reduce using rule 50 (final_expression -> access_struct .)
    POTENCIA        reduce using rule 50 (final_expression -> access_struct .)
    MODULO          reduce using rule 50 (final_expression -> access_struct .)
    MAYQUE          reduce using rule 50 (final_expression -> access_struct .)
    MENQUE          reduce using rule 50 (final_expression -> access_struct .)
    MENIGUALQUE     reduce using rule 50 (final_expression -> access_struct .)
    MAYIGUALQUE     reduce using rule 50 (final_expression -> access_struct .)
    IGUALQUE        reduce using rule 50 (final_expression -> access_struct .)
    NIGUALQUE       reduce using rule 50 (final_expression -> access_struct .)
    OR              reduce using rule 50 (final_expression -> access_struct .)
    AND             reduce using rule 50 (final_expression -> access_struct .)
    newline         reduce using rule 50 (final_expression -> access_struct .)
    DOSP            reduce using rule 50 (final_expression -> access_struct .)
    PARDER          reduce using rule 50 (final_expression -> access_struct .)
    COMA            reduce using rule 50 (final_expression -> access_struct .)
    CORCHETEDER     reduce using rule 50 (final_expression -> access_struct .)


state 94

    (51) final_expression -> nativas .

    MAS             reduce using rule 51 (final_expression -> nativas .)
    MENOS           reduce using rule 51 (final_expression -> nativas .)
    POR             reduce using rule 51 (final_expression -> nativas .)
    DIVIDIDO        reduce using rule 51 (final_expression -> nativas .)
    POTENCIA        reduce using rule 51 (final_expression -> nativas .)
    MODULO          reduce using rule 51 (final_expression -> nativas .)
    MAYQUE          reduce using rule 51 (final_expression -> nativas .)
    MENQUE          reduce using rule 51 (final_expression -> nativas .)
    MENIGUALQUE     reduce using rule 51 (final_expression -> nativas .)
    MAYIGUALQUE     reduce using rule 51 (final_expression -> nativas .)
    IGUALQUE        reduce using rule 51 (final_expression -> nativas .)
    NIGUALQUE       reduce using rule 51 (final_expression -> nativas .)
    OR              reduce using rule 51 (final_expression -> nativas .)
    AND             reduce using rule 51 (final_expression -> nativas .)
    newline         reduce using rule 51 (final_expression -> nativas .)
    DOSP            reduce using rule 51 (final_expression -> nativas .)
    PARDER          reduce using rule 51 (final_expression -> nativas .)
    COMA            reduce using rule 51 (final_expression -> nativas .)
    CORCHETEDER     reduce using rule 51 (final_expression -> nativas .)


state 95

    (99) if_state -> IF expression . DOSP newline statement END
    (100) if_state -> IF expression . DOSP newline statement ELSE DOSP newline statement END
    (101) if_state -> IF expression . DOSP newline statement else_if_list END
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    DOSP            shift and go to state 148
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 96

    (105) while_state -> WHILE expression . DOSP newline statement END
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    DOSP            shift and go to state 149
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 97

    (106) for_state -> FOR ID . IN expression DOSP expression DOSP newline statement END
    (107) for_state -> FOR ID . IN expression DOSP newline statement END

    IN              shift and go to state 150


state 98

    (52) nativas -> LOG PARIZQ . ENTERO COMA expression PARDER

    ENTERO          shift and go to state 151


state 99

    (53) nativas -> LOG10 PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 152
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 100

    (54) nativas -> COS PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 153
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 101

    (55) nativas -> SIN PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 154
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 102

    (56) nativas -> TAN PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 155
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 103

    (57) nativas -> SQRT PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 156
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 104

    (58) nativas -> UPPERCASE PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 157
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 105

    (59) nativas -> LOWERCASE PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 158
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 106

    (60) nativas -> TOSTRING PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 159
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 107

    (61) nativas -> TOFLOAT PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 160
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 108

    (62) nativas -> TRUNC PARIZQ . INT COMA expression PARDER
    (63) nativas -> TRUNC PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    INT             shift and go to state 161
    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 162
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 109

    (64) nativas -> TYPEOF PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 163
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 110

    (65) nativas -> PARSE PARIZQ . tipo COMA expression PARDER
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . BOOL
    (74) tipo -> . CHAR
    (75) tipo -> . STRING
    (76) tipo -> . ARRAY
    (77) tipo -> . NOTHING

    INT             shift and go to state 165
    FLOAT           shift and go to state 166
    BOOL            shift and go to state 167
    CHAR            shift and go to state 168
    STRING          shift and go to state 169
    ARRAY           shift and go to state 170
    NOTHING         shift and go to state 171

    tipo                           shift and go to state 164

state 111

    (66) nativas -> LENGTH PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 172
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 112

    (67) nativas -> PUSH PARIZQ . expression COMA expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 173
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 113

    (68) nativas -> POP PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 174
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 114

    (112) create_struct -> STRUCT ID . DOSP newline attList END

    DOSP            shift and go to state 175


state 115

    (69) print_instr -> PRINT PARIZQ exp_list . PARDER
    (86) exp_list -> exp_list . COMA expression

    PARDER          shift and go to state 176
    COMA            shift and go to state 177


state 116

    (87) exp_list -> expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          reduce using rule 87 (exp_list -> expression .)
    COMA            reduce using rule 87 (exp_list -> expression .)
    CORCHETEDER     reduce using rule 87 (exp_list -> expression .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 117

    (70) println_instr -> PRINTLN PARIZQ exp_list . PARDER
    (86) exp_list -> exp_list . COMA expression

    PARDER          shift and go to state 178
    COMA            shift and go to state 177


state 118

    (80) asignacion_instr -> LOCAL ID IGUAL . expression
    (82) definicion_asignacion_instr -> LOCAL ID IGUAL . expression DOSP tipo
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 179
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 119

    (79) asignacion_instr -> ID IGUAL expression .
    (81) definicion_asignacion_instr -> ID IGUAL expression . DOSP tipo
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    newline         reduce using rule 79 (asignacion_instr -> ID IGUAL expression .)
    DOSP            shift and go to state 180
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 120

    (83) asignacion_arreglo_instr -> ID index_list IGUAL . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 181
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 121

    (88) index_list -> index_list CORCHETEIZQ . expression CORCHETEDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 182
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 122

    (115) declare_struct -> ID DOSP DOSP . ID

    ID              shift and go to state 183


state 123

    (84) call_function -> ID PARIZQ PARDER .

    newline         reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    MAS             reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    MENOS           reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    POR             reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    POTENCIA        reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    MODULO          reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    MAYQUE          reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    MENQUE          reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    MENIGUALQUE     reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    MAYIGUALQUE     reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    IGUALQUE        reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    NIGUALQUE       reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    OR              reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    AND             reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    DOSP            reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    PARDER          reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    COMA            reduce using rule 84 (call_function -> ID PARIZQ PARDER .)
    CORCHETEDER     reduce using rule 84 (call_function -> ID PARIZQ PARDER .)


state 124

    (85) call_function -> ID PARIZQ exp_list . PARDER
    (86) exp_list -> exp_list . COMA expression

    PARDER          shift and go to state 184
    COMA            shift and go to state 177


state 125

    (116) assign_access -> ID PUNTO ID . IGUAL expression

    IGUAL           shift and go to state 185


state 126

    (89) index_list -> CORCHETEIZQ expression . CORCHETEDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    CORCHETEDER     shift and go to state 186
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 127

    (91) declare_function -> FUNCTION ID PARIZQ . dec_params PARDER DOSP newline statement END
    (92) declare_function -> FUNCTION ID PARIZQ . PARDER DOSP newline statement END
    (93) dec_params -> . dec_params COMA ID DOSP DOSP tipo
    (94) dec_params -> . dec_params COMA ID DOSP DOSP ID
    (95) dec_params -> . dec_params COMA ID
    (96) dec_params -> . ID DOSP DOSP tipo
    (97) dec_params -> . ID DOSP DOSP ID
    (98) dec_params -> . ID

    PARDER          shift and go to state 189
    ID              shift and go to state 187

    dec_params                     shift and go to state 188

state 128

    (24) expression -> expression MAS . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 190
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 129

    (25) expression -> expression MENOS . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 191
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 130

    (26) expression -> expression POR . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 192
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 131

    (27) expression -> expression DIVIDIDO . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 193
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 132

    (28) expression -> expression POTENCIA . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 194
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 133

    (29) expression -> expression MODULO . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 195
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 134

    (30) expression -> expression MAYQUE . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 196
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 135

    (31) expression -> expression MENQUE . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 197
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 136

    (32) expression -> expression MENIGUALQUE . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 198
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 137

    (33) expression -> expression MAYIGUALQUE . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 199
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 138

    (34) expression -> expression IGUALQUE . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 200
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 139

    (35) expression -> expression NIGUALQUE . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 201
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 140

    (36) expression -> expression OR . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 202
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 141

    (37) expression -> expression AND . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 203
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 142

    (22) expression -> MENOS expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 22 (expression -> MENOS expression .)
    MENOS           reduce using rule 22 (expression -> MENOS expression .)
    POR             reduce using rule 22 (expression -> MENOS expression .)
    DIVIDIDO        reduce using rule 22 (expression -> MENOS expression .)
    POTENCIA        reduce using rule 22 (expression -> MENOS expression .)
    MODULO          reduce using rule 22 (expression -> MENOS expression .)
    MAYQUE          reduce using rule 22 (expression -> MENOS expression .)
    MENQUE          reduce using rule 22 (expression -> MENOS expression .)
    MENIGUALQUE     reduce using rule 22 (expression -> MENOS expression .)
    MAYIGUALQUE     reduce using rule 22 (expression -> MENOS expression .)
    IGUALQUE        reduce using rule 22 (expression -> MENOS expression .)
    NIGUALQUE       reduce using rule 22 (expression -> MENOS expression .)
    OR              reduce using rule 22 (expression -> MENOS expression .)
    AND             reduce using rule 22 (expression -> MENOS expression .)
    newline         reduce using rule 22 (expression -> MENOS expression .)
    DOSP            reduce using rule 22 (expression -> MENOS expression .)
    PARDER          reduce using rule 22 (expression -> MENOS expression .)
    COMA            reduce using rule 22 (expression -> MENOS expression .)
    CORCHETEDER     reduce using rule 22 (expression -> MENOS expression .)

  ! MAS             [ shift and go to state 128 ]
  ! MENOS           [ shift and go to state 129 ]
  ! POR             [ shift and go to state 130 ]
  ! DIVIDIDO        [ shift and go to state 131 ]
  ! POTENCIA        [ shift and go to state 132 ]
  ! MODULO          [ shift and go to state 133 ]
  ! MAYQUE          [ shift and go to state 134 ]
  ! MENQUE          [ shift and go to state 135 ]
  ! MENIGUALQUE     [ shift and go to state 136 ]
  ! MAYIGUALQUE     [ shift and go to state 137 ]
  ! IGUALQUE        [ shift and go to state 138 ]
  ! NIGUALQUE       [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]
  ! AND             [ shift and go to state 141 ]


state 143

    (23) expression -> NOT expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 23 (expression -> NOT expression .)
    MENOS           reduce using rule 23 (expression -> NOT expression .)
    POR             reduce using rule 23 (expression -> NOT expression .)
    DIVIDIDO        reduce using rule 23 (expression -> NOT expression .)
    POTENCIA        reduce using rule 23 (expression -> NOT expression .)
    MODULO          reduce using rule 23 (expression -> NOT expression .)
    MAYQUE          reduce using rule 23 (expression -> NOT expression .)
    MENQUE          reduce using rule 23 (expression -> NOT expression .)
    MENIGUALQUE     reduce using rule 23 (expression -> NOT expression .)
    MAYIGUALQUE     reduce using rule 23 (expression -> NOT expression .)
    IGUALQUE        reduce using rule 23 (expression -> NOT expression .)
    NIGUALQUE       reduce using rule 23 (expression -> NOT expression .)
    OR              reduce using rule 23 (expression -> NOT expression .)
    AND             reduce using rule 23 (expression -> NOT expression .)
    newline         reduce using rule 23 (expression -> NOT expression .)
    DOSP            reduce using rule 23 (expression -> NOT expression .)
    PARDER          reduce using rule 23 (expression -> NOT expression .)
    COMA            reduce using rule 23 (expression -> NOT expression .)
    CORCHETEDER     reduce using rule 23 (expression -> NOT expression .)

  ! MAS             [ shift and go to state 128 ]
  ! MENOS           [ shift and go to state 129 ]
  ! POR             [ shift and go to state 130 ]
  ! DIVIDIDO        [ shift and go to state 131 ]
  ! POTENCIA        [ shift and go to state 132 ]
  ! MODULO          [ shift and go to state 133 ]
  ! MAYQUE          [ shift and go to state 134 ]
  ! MENQUE          [ shift and go to state 135 ]
  ! MENIGUALQUE     [ shift and go to state 136 ]
  ! MAYIGUALQUE     [ shift and go to state 137 ]
  ! IGUALQUE        [ shift and go to state 138 ]
  ! NIGUALQUE       [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]
  ! AND             [ shift and go to state 141 ]


state 144

    (39) final_expression -> PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 204
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 145

    (40) final_expression -> CORCHETEIZQ exp_list . CORCHETEDER
    (86) exp_list -> exp_list . COMA expression

    CORCHETEDER     shift and go to state 205
    COMA            shift and go to state 177


state 146

    (46) final_expression -> ID index_list .
    (88) index_list -> index_list . CORCHETEIZQ expression CORCHETEDER

    MAS             reduce using rule 46 (final_expression -> ID index_list .)
    MENOS           reduce using rule 46 (final_expression -> ID index_list .)
    POR             reduce using rule 46 (final_expression -> ID index_list .)
    DIVIDIDO        reduce using rule 46 (final_expression -> ID index_list .)
    POTENCIA        reduce using rule 46 (final_expression -> ID index_list .)
    MODULO          reduce using rule 46 (final_expression -> ID index_list .)
    MAYQUE          reduce using rule 46 (final_expression -> ID index_list .)
    MENQUE          reduce using rule 46 (final_expression -> ID index_list .)
    MENIGUALQUE     reduce using rule 46 (final_expression -> ID index_list .)
    MAYIGUALQUE     reduce using rule 46 (final_expression -> ID index_list .)
    IGUALQUE        reduce using rule 46 (final_expression -> ID index_list .)
    NIGUALQUE       reduce using rule 46 (final_expression -> ID index_list .)
    OR              reduce using rule 46 (final_expression -> ID index_list .)
    AND             reduce using rule 46 (final_expression -> ID index_list .)
    newline         reduce using rule 46 (final_expression -> ID index_list .)
    DOSP            reduce using rule 46 (final_expression -> ID index_list .)
    PARDER          reduce using rule 46 (final_expression -> ID index_list .)
    COMA            reduce using rule 46 (final_expression -> ID index_list .)
    CORCHETEDER     reduce using rule 46 (final_expression -> ID index_list .)
    CORCHETEIZQ     shift and go to state 121


state 147

    (117) access_struct -> ID PUNTO . ID

    ID              shift and go to state 206


state 148

    (99) if_state -> IF expression DOSP . newline statement END
    (100) if_state -> IF expression DOSP . newline statement ELSE DOSP newline statement END
    (101) if_state -> IF expression DOSP . newline statement else_if_list END

    newline         shift and go to state 207


state 149

    (105) while_state -> WHILE expression DOSP . newline statement END

    newline         shift and go to state 208


state 150

    (106) for_state -> FOR ID IN . expression DOSP expression DOSP newline statement END
    (107) for_state -> FOR ID IN . expression DOSP newline statement END
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 209
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 151

    (52) nativas -> LOG PARIZQ ENTERO . COMA expression PARDER

    COMA            shift and go to state 210


state 152

    (53) nativas -> LOG10 PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 211
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 153

    (54) nativas -> COS PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 212
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 154

    (55) nativas -> SIN PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 213
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 155

    (56) nativas -> TAN PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 214
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 156

    (57) nativas -> SQRT PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 215
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 157

    (58) nativas -> UPPERCASE PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 216
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 158

    (59) nativas -> LOWERCASE PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 217
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 159

    (60) nativas -> TOSTRING PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 218
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 160

    (61) nativas -> TOFLOAT PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 219
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 161

    (62) nativas -> TRUNC PARIZQ INT . COMA expression PARDER

    COMA            shift and go to state 220


state 162

    (63) nativas -> TRUNC PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 221
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 163

    (64) nativas -> TYPEOF PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 222
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 164

    (65) nativas -> PARSE PARIZQ tipo . COMA expression PARDER

    COMA            shift and go to state 223


state 165

    (71) tipo -> INT .

    COMA            reduce using rule 71 (tipo -> INT .)
    newline         reduce using rule 71 (tipo -> INT .)
    PARDER          reduce using rule 71 (tipo -> INT .)
    PTCOMA          reduce using rule 71 (tipo -> INT .)


state 166

    (72) tipo -> FLOAT .

    COMA            reduce using rule 72 (tipo -> FLOAT .)
    newline         reduce using rule 72 (tipo -> FLOAT .)
    PARDER          reduce using rule 72 (tipo -> FLOAT .)
    PTCOMA          reduce using rule 72 (tipo -> FLOAT .)


state 167

    (73) tipo -> BOOL .

    COMA            reduce using rule 73 (tipo -> BOOL .)
    newline         reduce using rule 73 (tipo -> BOOL .)
    PARDER          reduce using rule 73 (tipo -> BOOL .)
    PTCOMA          reduce using rule 73 (tipo -> BOOL .)


state 168

    (74) tipo -> CHAR .

    COMA            reduce using rule 74 (tipo -> CHAR .)
    newline         reduce using rule 74 (tipo -> CHAR .)
    PARDER          reduce using rule 74 (tipo -> CHAR .)
    PTCOMA          reduce using rule 74 (tipo -> CHAR .)


state 169

    (75) tipo -> STRING .

    COMA            reduce using rule 75 (tipo -> STRING .)
    newline         reduce using rule 75 (tipo -> STRING .)
    PARDER          reduce using rule 75 (tipo -> STRING .)
    PTCOMA          reduce using rule 75 (tipo -> STRING .)


state 170

    (76) tipo -> ARRAY .

    COMA            reduce using rule 76 (tipo -> ARRAY .)
    newline         reduce using rule 76 (tipo -> ARRAY .)
    PARDER          reduce using rule 76 (tipo -> ARRAY .)
    PTCOMA          reduce using rule 76 (tipo -> ARRAY .)


state 171

    (77) tipo -> NOTHING .

    COMA            reduce using rule 77 (tipo -> NOTHING .)
    newline         reduce using rule 77 (tipo -> NOTHING .)
    PARDER          reduce using rule 77 (tipo -> NOTHING .)
    PTCOMA          reduce using rule 77 (tipo -> NOTHING .)


state 172

    (66) nativas -> LENGTH PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 224
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 173

    (67) nativas -> PUSH PARIZQ expression . COMA expression PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    COMA            shift and go to state 225
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 174

    (68) nativas -> POP PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 226
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 175

    (112) create_struct -> STRUCT ID DOSP . newline attList END

    newline         shift and go to state 227


state 176

    (69) print_instr -> PRINT PARIZQ exp_list PARDER .

    newline         reduce using rule 69 (print_instr -> PRINT PARIZQ exp_list PARDER .)


state 177

    (86) exp_list -> exp_list COMA . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 228
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 178

    (70) println_instr -> PRINTLN PARIZQ exp_list PARDER .

    newline         reduce using rule 70 (println_instr -> PRINTLN PARIZQ exp_list PARDER .)


state 179

    (80) asignacion_instr -> LOCAL ID IGUAL expression .
    (82) definicion_asignacion_instr -> LOCAL ID IGUAL expression . DOSP tipo
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    newline         reduce using rule 80 (asignacion_instr -> LOCAL ID IGUAL expression .)
    DOSP            shift and go to state 229
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 180

    (81) definicion_asignacion_instr -> ID IGUAL expression DOSP . tipo
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . BOOL
    (74) tipo -> . CHAR
    (75) tipo -> . STRING
    (76) tipo -> . ARRAY
    (77) tipo -> . NOTHING

    INT             shift and go to state 165
    FLOAT           shift and go to state 166
    BOOL            shift and go to state 167
    CHAR            shift and go to state 168
    STRING          shift and go to state 169
    ARRAY           shift and go to state 170
    NOTHING         shift and go to state 171

    tipo                           shift and go to state 230

state 181

    (83) asignacion_arreglo_instr -> ID index_list IGUAL expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    newline         reduce using rule 83 (asignacion_arreglo_instr -> ID index_list IGUAL expression .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 182

    (88) index_list -> index_list CORCHETEIZQ expression . CORCHETEDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    CORCHETEDER     shift and go to state 231
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 183

    (115) declare_struct -> ID DOSP DOSP ID .

    newline         reduce using rule 115 (declare_struct -> ID DOSP DOSP ID .)


state 184

    (85) call_function -> ID PARIZQ exp_list PARDER .

    newline         reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    MAS             reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    MENOS           reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    POR             reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    DIVIDIDO        reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    POTENCIA        reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    MODULO          reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    MAYQUE          reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    MENQUE          reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    MENIGUALQUE     reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    MAYIGUALQUE     reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    IGUALQUE        reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    NIGUALQUE       reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    OR              reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    AND             reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    DOSP            reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    PARDER          reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    COMA            reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)
    CORCHETEDER     reduce using rule 85 (call_function -> ID PARIZQ exp_list PARDER .)


state 185

    (116) assign_access -> ID PUNTO ID IGUAL . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 232
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 186

    (89) index_list -> CORCHETEIZQ expression CORCHETEDER .

    IGUAL           reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    CORCHETEIZQ     reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    MAS             reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    MENOS           reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    POR             reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    DIVIDIDO        reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    POTENCIA        reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    MODULO          reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    MAYQUE          reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    MENQUE          reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    MENIGUALQUE     reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    MAYIGUALQUE     reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    IGUALQUE        reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    NIGUALQUE       reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    OR              reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    AND             reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    newline         reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    DOSP            reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    PARDER          reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    COMA            reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    CORCHETEDER     reduce using rule 89 (index_list -> CORCHETEIZQ expression CORCHETEDER .)


state 187

    (96) dec_params -> ID . DOSP DOSP tipo
    (97) dec_params -> ID . DOSP DOSP ID
    (98) dec_params -> ID .

    DOSP            shift and go to state 233
    PARDER          reduce using rule 98 (dec_params -> ID .)
    COMA            reduce using rule 98 (dec_params -> ID .)


state 188

    (91) declare_function -> FUNCTION ID PARIZQ dec_params . PARDER DOSP newline statement END
    (93) dec_params -> dec_params . COMA ID DOSP DOSP tipo
    (94) dec_params -> dec_params . COMA ID DOSP DOSP ID
    (95) dec_params -> dec_params . COMA ID

    PARDER          shift and go to state 234
    COMA            shift and go to state 235


state 189

    (92) declare_function -> FUNCTION ID PARIZQ PARDER . DOSP newline statement END

    DOSP            shift and go to state 236


state 190

    (24) expression -> expression MAS expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 24 (expression -> expression MAS expression .)
    MENOS           reduce using rule 24 (expression -> expression MAS expression .)
    MAYQUE          reduce using rule 24 (expression -> expression MAS expression .)
    MENQUE          reduce using rule 24 (expression -> expression MAS expression .)
    MENIGUALQUE     reduce using rule 24 (expression -> expression MAS expression .)
    MAYIGUALQUE     reduce using rule 24 (expression -> expression MAS expression .)
    IGUALQUE        reduce using rule 24 (expression -> expression MAS expression .)
    NIGUALQUE       reduce using rule 24 (expression -> expression MAS expression .)
    OR              reduce using rule 24 (expression -> expression MAS expression .)
    AND             reduce using rule 24 (expression -> expression MAS expression .)
    newline         reduce using rule 24 (expression -> expression MAS expression .)
    DOSP            reduce using rule 24 (expression -> expression MAS expression .)
    PARDER          reduce using rule 24 (expression -> expression MAS expression .)
    COMA            reduce using rule 24 (expression -> expression MAS expression .)
    CORCHETEDER     reduce using rule 24 (expression -> expression MAS expression .)
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133

  ! POR             [ reduce using rule 24 (expression -> expression MAS expression .) ]
  ! DIVIDIDO        [ reduce using rule 24 (expression -> expression MAS expression .) ]
  ! POTENCIA        [ reduce using rule 24 (expression -> expression MAS expression .) ]
  ! MODULO          [ reduce using rule 24 (expression -> expression MAS expression .) ]
  ! MAS             [ shift and go to state 128 ]
  ! MENOS           [ shift and go to state 129 ]
  ! MAYQUE          [ shift and go to state 134 ]
  ! MENQUE          [ shift and go to state 135 ]
  ! MENIGUALQUE     [ shift and go to state 136 ]
  ! MAYIGUALQUE     [ shift and go to state 137 ]
  ! IGUALQUE        [ shift and go to state 138 ]
  ! NIGUALQUE       [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]
  ! AND             [ shift and go to state 141 ]


state 191

    (25) expression -> expression MENOS expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 25 (expression -> expression MENOS expression .)
    MENOS           reduce using rule 25 (expression -> expression MENOS expression .)
    MAYQUE          reduce using rule 25 (expression -> expression MENOS expression .)
    MENQUE          reduce using rule 25 (expression -> expression MENOS expression .)
    MENIGUALQUE     reduce using rule 25 (expression -> expression MENOS expression .)
    MAYIGUALQUE     reduce using rule 25 (expression -> expression MENOS expression .)
    IGUALQUE        reduce using rule 25 (expression -> expression MENOS expression .)
    NIGUALQUE       reduce using rule 25 (expression -> expression MENOS expression .)
    OR              reduce using rule 25 (expression -> expression MENOS expression .)
    AND             reduce using rule 25 (expression -> expression MENOS expression .)
    newline         reduce using rule 25 (expression -> expression MENOS expression .)
    DOSP            reduce using rule 25 (expression -> expression MENOS expression .)
    PARDER          reduce using rule 25 (expression -> expression MENOS expression .)
    COMA            reduce using rule 25 (expression -> expression MENOS expression .)
    CORCHETEDER     reduce using rule 25 (expression -> expression MENOS expression .)
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133

  ! POR             [ reduce using rule 25 (expression -> expression MENOS expression .) ]
  ! DIVIDIDO        [ reduce using rule 25 (expression -> expression MENOS expression .) ]
  ! POTENCIA        [ reduce using rule 25 (expression -> expression MENOS expression .) ]
  ! MODULO          [ reduce using rule 25 (expression -> expression MENOS expression .) ]
  ! MAS             [ shift and go to state 128 ]
  ! MENOS           [ shift and go to state 129 ]
  ! MAYQUE          [ shift and go to state 134 ]
  ! MENQUE          [ shift and go to state 135 ]
  ! MENIGUALQUE     [ shift and go to state 136 ]
  ! MAYIGUALQUE     [ shift and go to state 137 ]
  ! IGUALQUE        [ shift and go to state 138 ]
  ! NIGUALQUE       [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]
  ! AND             [ shift and go to state 141 ]


state 192

    (26) expression -> expression POR expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 26 (expression -> expression POR expression .)
    MENOS           reduce using rule 26 (expression -> expression POR expression .)
    POR             reduce using rule 26 (expression -> expression POR expression .)
    DIVIDIDO        reduce using rule 26 (expression -> expression POR expression .)
    MODULO          reduce using rule 26 (expression -> expression POR expression .)
    MAYQUE          reduce using rule 26 (expression -> expression POR expression .)
    MENQUE          reduce using rule 26 (expression -> expression POR expression .)
    MENIGUALQUE     reduce using rule 26 (expression -> expression POR expression .)
    MAYIGUALQUE     reduce using rule 26 (expression -> expression POR expression .)
    IGUALQUE        reduce using rule 26 (expression -> expression POR expression .)
    NIGUALQUE       reduce using rule 26 (expression -> expression POR expression .)
    OR              reduce using rule 26 (expression -> expression POR expression .)
    AND             reduce using rule 26 (expression -> expression POR expression .)
    newline         reduce using rule 26 (expression -> expression POR expression .)
    DOSP            reduce using rule 26 (expression -> expression POR expression .)
    PARDER          reduce using rule 26 (expression -> expression POR expression .)
    COMA            reduce using rule 26 (expression -> expression POR expression .)
    CORCHETEDER     reduce using rule 26 (expression -> expression POR expression .)
    POTENCIA        shift and go to state 132

  ! POTENCIA        [ reduce using rule 26 (expression -> expression POR expression .) ]
  ! MAS             [ shift and go to state 128 ]
  ! MENOS           [ shift and go to state 129 ]
  ! POR             [ shift and go to state 130 ]
  ! DIVIDIDO        [ shift and go to state 131 ]
  ! MODULO          [ shift and go to state 133 ]
  ! MAYQUE          [ shift and go to state 134 ]
  ! MENQUE          [ shift and go to state 135 ]
  ! MENIGUALQUE     [ shift and go to state 136 ]
  ! MAYIGUALQUE     [ shift and go to state 137 ]
  ! IGUALQUE        [ shift and go to state 138 ]
  ! NIGUALQUE       [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]
  ! AND             [ shift and go to state 141 ]


state 193

    (27) expression -> expression DIVIDIDO expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    MENOS           reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    POR             reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    DIVIDIDO        reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    MODULO          reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    MAYQUE          reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    MENQUE          reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    MENIGUALQUE     reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    MAYIGUALQUE     reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    IGUALQUE        reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    NIGUALQUE       reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    OR              reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    AND             reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    newline         reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    DOSP            reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    PARDER          reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    COMA            reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    CORCHETEDER     reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    POTENCIA        shift and go to state 132

  ! POTENCIA        [ reduce using rule 27 (expression -> expression DIVIDIDO expression .) ]
  ! MAS             [ shift and go to state 128 ]
  ! MENOS           [ shift and go to state 129 ]
  ! POR             [ shift and go to state 130 ]
  ! DIVIDIDO        [ shift and go to state 131 ]
  ! MODULO          [ shift and go to state 133 ]
  ! MAYQUE          [ shift and go to state 134 ]
  ! MENQUE          [ shift and go to state 135 ]
  ! MENIGUALQUE     [ shift and go to state 136 ]
  ! MAYIGUALQUE     [ shift and go to state 137 ]
  ! IGUALQUE        [ shift and go to state 138 ]
  ! NIGUALQUE       [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]
  ! AND             [ shift and go to state 141 ]


state 194

    (28) expression -> expression POTENCIA expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 28 (expression -> expression POTENCIA expression .)
    MENOS           reduce using rule 28 (expression -> expression POTENCIA expression .)
    POR             reduce using rule 28 (expression -> expression POTENCIA expression .)
    DIVIDIDO        reduce using rule 28 (expression -> expression POTENCIA expression .)
    POTENCIA        reduce using rule 28 (expression -> expression POTENCIA expression .)
    MODULO          reduce using rule 28 (expression -> expression POTENCIA expression .)
    MAYQUE          reduce using rule 28 (expression -> expression POTENCIA expression .)
    MENQUE          reduce using rule 28 (expression -> expression POTENCIA expression .)
    MENIGUALQUE     reduce using rule 28 (expression -> expression POTENCIA expression .)
    MAYIGUALQUE     reduce using rule 28 (expression -> expression POTENCIA expression .)
    IGUALQUE        reduce using rule 28 (expression -> expression POTENCIA expression .)
    NIGUALQUE       reduce using rule 28 (expression -> expression POTENCIA expression .)
    OR              reduce using rule 28 (expression -> expression POTENCIA expression .)
    AND             reduce using rule 28 (expression -> expression POTENCIA expression .)
    newline         reduce using rule 28 (expression -> expression POTENCIA expression .)
    DOSP            reduce using rule 28 (expression -> expression POTENCIA expression .)
    PARDER          reduce using rule 28 (expression -> expression POTENCIA expression .)
    COMA            reduce using rule 28 (expression -> expression POTENCIA expression .)
    CORCHETEDER     reduce using rule 28 (expression -> expression POTENCIA expression .)

  ! MAS             [ shift and go to state 128 ]
  ! MENOS           [ shift and go to state 129 ]
  ! POR             [ shift and go to state 130 ]
  ! DIVIDIDO        [ shift and go to state 131 ]
  ! POTENCIA        [ shift and go to state 132 ]
  ! MODULO          [ shift and go to state 133 ]
  ! MAYQUE          [ shift and go to state 134 ]
  ! MENQUE          [ shift and go to state 135 ]
  ! MENIGUALQUE     [ shift and go to state 136 ]
  ! MAYIGUALQUE     [ shift and go to state 137 ]
  ! IGUALQUE        [ shift and go to state 138 ]
  ! NIGUALQUE       [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]
  ! AND             [ shift and go to state 141 ]


state 195

    (29) expression -> expression MODULO expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 29 (expression -> expression MODULO expression .)
    MENOS           reduce using rule 29 (expression -> expression MODULO expression .)
    POR             reduce using rule 29 (expression -> expression MODULO expression .)
    DIVIDIDO        reduce using rule 29 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 29 (expression -> expression MODULO expression .)
    MAYQUE          reduce using rule 29 (expression -> expression MODULO expression .)
    MENQUE          reduce using rule 29 (expression -> expression MODULO expression .)
    MENIGUALQUE     reduce using rule 29 (expression -> expression MODULO expression .)
    MAYIGUALQUE     reduce using rule 29 (expression -> expression MODULO expression .)
    IGUALQUE        reduce using rule 29 (expression -> expression MODULO expression .)
    NIGUALQUE       reduce using rule 29 (expression -> expression MODULO expression .)
    OR              reduce using rule 29 (expression -> expression MODULO expression .)
    AND             reduce using rule 29 (expression -> expression MODULO expression .)
    newline         reduce using rule 29 (expression -> expression MODULO expression .)
    DOSP            reduce using rule 29 (expression -> expression MODULO expression .)
    PARDER          reduce using rule 29 (expression -> expression MODULO expression .)
    COMA            reduce using rule 29 (expression -> expression MODULO expression .)
    CORCHETEDER     reduce using rule 29 (expression -> expression MODULO expression .)
    POTENCIA        shift and go to state 132

  ! POTENCIA        [ reduce using rule 29 (expression -> expression MODULO expression .) ]
  ! MAS             [ shift and go to state 128 ]
  ! MENOS           [ shift and go to state 129 ]
  ! POR             [ shift and go to state 130 ]
  ! DIVIDIDO        [ shift and go to state 131 ]
  ! MODULO          [ shift and go to state 133 ]
  ! MAYQUE          [ shift and go to state 134 ]
  ! MENQUE          [ shift and go to state 135 ]
  ! MENIGUALQUE     [ shift and go to state 136 ]
  ! MAYIGUALQUE     [ shift and go to state 137 ]
  ! IGUALQUE        [ shift and go to state 138 ]
  ! NIGUALQUE       [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]
  ! AND             [ shift and go to state 141 ]


state 196

    (30) expression -> expression MAYQUE expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAYQUE          reduce using rule 30 (expression -> expression MAYQUE expression .)
    MENQUE          reduce using rule 30 (expression -> expression MAYQUE expression .)
    MENIGUALQUE     reduce using rule 30 (expression -> expression MAYQUE expression .)
    MAYIGUALQUE     reduce using rule 30 (expression -> expression MAYQUE expression .)
    IGUALQUE        reduce using rule 30 (expression -> expression MAYQUE expression .)
    NIGUALQUE       reduce using rule 30 (expression -> expression MAYQUE expression .)
    OR              reduce using rule 30 (expression -> expression MAYQUE expression .)
    AND             reduce using rule 30 (expression -> expression MAYQUE expression .)
    newline         reduce using rule 30 (expression -> expression MAYQUE expression .)
    DOSP            reduce using rule 30 (expression -> expression MAYQUE expression .)
    PARDER          reduce using rule 30 (expression -> expression MAYQUE expression .)
    COMA            reduce using rule 30 (expression -> expression MAYQUE expression .)
    CORCHETEDER     reduce using rule 30 (expression -> expression MAYQUE expression .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133

  ! MAS             [ reduce using rule 30 (expression -> expression MAYQUE expression .) ]
  ! MENOS           [ reduce using rule 30 (expression -> expression MAYQUE expression .) ]
  ! POR             [ reduce using rule 30 (expression -> expression MAYQUE expression .) ]
  ! DIVIDIDO        [ reduce using rule 30 (expression -> expression MAYQUE expression .) ]
  ! POTENCIA        [ reduce using rule 30 (expression -> expression MAYQUE expression .) ]
  ! MODULO          [ reduce using rule 30 (expression -> expression MAYQUE expression .) ]
  ! MAYQUE          [ shift and go to state 134 ]
  ! MENQUE          [ shift and go to state 135 ]
  ! MENIGUALQUE     [ shift and go to state 136 ]
  ! MAYIGUALQUE     [ shift and go to state 137 ]
  ! IGUALQUE        [ shift and go to state 138 ]
  ! NIGUALQUE       [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]
  ! AND             [ shift and go to state 141 ]


state 197

    (31) expression -> expression MENQUE expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAYQUE          reduce using rule 31 (expression -> expression MENQUE expression .)
    MENQUE          reduce using rule 31 (expression -> expression MENQUE expression .)
    MENIGUALQUE     reduce using rule 31 (expression -> expression MENQUE expression .)
    MAYIGUALQUE     reduce using rule 31 (expression -> expression MENQUE expression .)
    IGUALQUE        reduce using rule 31 (expression -> expression MENQUE expression .)
    NIGUALQUE       reduce using rule 31 (expression -> expression MENQUE expression .)
    OR              reduce using rule 31 (expression -> expression MENQUE expression .)
    AND             reduce using rule 31 (expression -> expression MENQUE expression .)
    newline         reduce using rule 31 (expression -> expression MENQUE expression .)
    DOSP            reduce using rule 31 (expression -> expression MENQUE expression .)
    PARDER          reduce using rule 31 (expression -> expression MENQUE expression .)
    COMA            reduce using rule 31 (expression -> expression MENQUE expression .)
    CORCHETEDER     reduce using rule 31 (expression -> expression MENQUE expression .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133

  ! MAS             [ reduce using rule 31 (expression -> expression MENQUE expression .) ]
  ! MENOS           [ reduce using rule 31 (expression -> expression MENQUE expression .) ]
  ! POR             [ reduce using rule 31 (expression -> expression MENQUE expression .) ]
  ! DIVIDIDO        [ reduce using rule 31 (expression -> expression MENQUE expression .) ]
  ! POTENCIA        [ reduce using rule 31 (expression -> expression MENQUE expression .) ]
  ! MODULO          [ reduce using rule 31 (expression -> expression MENQUE expression .) ]
  ! MAYQUE          [ shift and go to state 134 ]
  ! MENQUE          [ shift and go to state 135 ]
  ! MENIGUALQUE     [ shift and go to state 136 ]
  ! MAYIGUALQUE     [ shift and go to state 137 ]
  ! IGUALQUE        [ shift and go to state 138 ]
  ! NIGUALQUE       [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]
  ! AND             [ shift and go to state 141 ]


state 198

    (32) expression -> expression MENIGUALQUE expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAYQUE          reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    MENQUE          reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    MENIGUALQUE     reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    MAYIGUALQUE     reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    IGUALQUE        reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    NIGUALQUE       reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    OR              reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    AND             reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    newline         reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    DOSP            reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    PARDER          reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    COMA            reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    CORCHETEDER     reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133

  ! MAS             [ reduce using rule 32 (expression -> expression MENIGUALQUE expression .) ]
  ! MENOS           [ reduce using rule 32 (expression -> expression MENIGUALQUE expression .) ]
  ! POR             [ reduce using rule 32 (expression -> expression MENIGUALQUE expression .) ]
  ! DIVIDIDO        [ reduce using rule 32 (expression -> expression MENIGUALQUE expression .) ]
  ! POTENCIA        [ reduce using rule 32 (expression -> expression MENIGUALQUE expression .) ]
  ! MODULO          [ reduce using rule 32 (expression -> expression MENIGUALQUE expression .) ]
  ! MAYQUE          [ shift and go to state 134 ]
  ! MENQUE          [ shift and go to state 135 ]
  ! MENIGUALQUE     [ shift and go to state 136 ]
  ! MAYIGUALQUE     [ shift and go to state 137 ]
  ! IGUALQUE        [ shift and go to state 138 ]
  ! NIGUALQUE       [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]
  ! AND             [ shift and go to state 141 ]


state 199

    (33) expression -> expression MAYIGUALQUE expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAYQUE          reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    MENQUE          reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    MENIGUALQUE     reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    MAYIGUALQUE     reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    IGUALQUE        reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    NIGUALQUE       reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    OR              reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    AND             reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    newline         reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    DOSP            reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    PARDER          reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    COMA            reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    CORCHETEDER     reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133

  ! MAS             [ reduce using rule 33 (expression -> expression MAYIGUALQUE expression .) ]
  ! MENOS           [ reduce using rule 33 (expression -> expression MAYIGUALQUE expression .) ]
  ! POR             [ reduce using rule 33 (expression -> expression MAYIGUALQUE expression .) ]
  ! DIVIDIDO        [ reduce using rule 33 (expression -> expression MAYIGUALQUE expression .) ]
  ! POTENCIA        [ reduce using rule 33 (expression -> expression MAYIGUALQUE expression .) ]
  ! MODULO          [ reduce using rule 33 (expression -> expression MAYIGUALQUE expression .) ]
  ! MAYQUE          [ shift and go to state 134 ]
  ! MENQUE          [ shift and go to state 135 ]
  ! MENIGUALQUE     [ shift and go to state 136 ]
  ! MAYIGUALQUE     [ shift and go to state 137 ]
  ! IGUALQUE        [ shift and go to state 138 ]
  ! NIGUALQUE       [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]
  ! AND             [ shift and go to state 141 ]


state 200

    (34) expression -> expression IGUALQUE expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    IGUALQUE        reduce using rule 34 (expression -> expression IGUALQUE expression .)
    NIGUALQUE       reduce using rule 34 (expression -> expression IGUALQUE expression .)
    OR              reduce using rule 34 (expression -> expression IGUALQUE expression .)
    AND             reduce using rule 34 (expression -> expression IGUALQUE expression .)
    newline         reduce using rule 34 (expression -> expression IGUALQUE expression .)
    DOSP            reduce using rule 34 (expression -> expression IGUALQUE expression .)
    PARDER          reduce using rule 34 (expression -> expression IGUALQUE expression .)
    COMA            reduce using rule 34 (expression -> expression IGUALQUE expression .)
    CORCHETEDER     reduce using rule 34 (expression -> expression IGUALQUE expression .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137

  ! MAS             [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! MENOS           [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! POR             [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! DIVIDIDO        [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! POTENCIA        [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! MODULO          [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! MAYQUE          [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! MENQUE          [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! MENIGUALQUE     [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! MAYIGUALQUE     [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! IGUALQUE        [ shift and go to state 138 ]
  ! NIGUALQUE       [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]
  ! AND             [ shift and go to state 141 ]


state 201

    (35) expression -> expression NIGUALQUE expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    IGUALQUE        reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    NIGUALQUE       reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    OR              reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    AND             reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    newline         reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    DOSP            reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    PARDER          reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    COMA            reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    CORCHETEDER     reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137

  ! MAS             [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! MENOS           [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! POR             [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! DIVIDIDO        [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! POTENCIA        [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! MODULO          [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! MAYQUE          [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! MENQUE          [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! MENIGUALQUE     [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! MAYIGUALQUE     [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! IGUALQUE        [ shift and go to state 138 ]
  ! NIGUALQUE       [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]
  ! AND             [ shift and go to state 141 ]


state 202

    (36) expression -> expression OR expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    OR              reduce using rule 36 (expression -> expression OR expression .)
    newline         reduce using rule 36 (expression -> expression OR expression .)
    DOSP            reduce using rule 36 (expression -> expression OR expression .)
    PARDER          reduce using rule 36 (expression -> expression OR expression .)
    COMA            reduce using rule 36 (expression -> expression OR expression .)
    CORCHETEDER     reduce using rule 36 (expression -> expression OR expression .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    AND             shift and go to state 141

  ! MAS             [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! MENOS           [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! POR             [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! DIVIDIDO        [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! POTENCIA        [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! MAYQUE          [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! MENQUE          [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! MENIGUALQUE     [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! MAYIGUALQUE     [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! IGUALQUE        [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! NIGUALQUE       [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 140 ]


state 203

    (37) expression -> expression AND expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    OR              reduce using rule 37 (expression -> expression AND expression .)
    AND             reduce using rule 37 (expression -> expression AND expression .)
    newline         reduce using rule 37 (expression -> expression AND expression .)
    DOSP            reduce using rule 37 (expression -> expression AND expression .)
    PARDER          reduce using rule 37 (expression -> expression AND expression .)
    COMA            reduce using rule 37 (expression -> expression AND expression .)
    CORCHETEDER     reduce using rule 37 (expression -> expression AND expression .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139

  ! MAS             [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MENOS           [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! POR             [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! DIVIDIDO        [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! POTENCIA        [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MAYQUE          [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MENQUE          [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MENIGUALQUE     [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MAYIGUALQUE     [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! IGUALQUE        [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! NIGUALQUE       [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! OR              [ shift and go to state 140 ]
  ! AND             [ shift and go to state 141 ]


state 204

    (39) final_expression -> PARIZQ expression PARDER .

    MAS             reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    MENOS           reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    POR             reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    MODULO          reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    MENQUE          reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    OR              reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    AND             reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    newline         reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    DOSP            reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    PARDER          reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    COMA            reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)


state 205

    (40) final_expression -> CORCHETEIZQ exp_list CORCHETEDER .

    MAS             reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    MENOS           reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    POR             reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    DIVIDIDO        reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    POTENCIA        reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    MODULO          reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    MAYQUE          reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    MENQUE          reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    MENIGUALQUE     reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    MAYIGUALQUE     reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    IGUALQUE        reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    NIGUALQUE       reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    OR              reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    AND             reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    newline         reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    DOSP            reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    PARDER          reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    COMA            reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    CORCHETEDER     reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)


state 206

    (117) access_struct -> ID PUNTO ID .

    MAS             reduce using rule 117 (access_struct -> ID PUNTO ID .)
    MENOS           reduce using rule 117 (access_struct -> ID PUNTO ID .)
    POR             reduce using rule 117 (access_struct -> ID PUNTO ID .)
    DIVIDIDO        reduce using rule 117 (access_struct -> ID PUNTO ID .)
    POTENCIA        reduce using rule 117 (access_struct -> ID PUNTO ID .)
    MODULO          reduce using rule 117 (access_struct -> ID PUNTO ID .)
    MAYQUE          reduce using rule 117 (access_struct -> ID PUNTO ID .)
    MENQUE          reduce using rule 117 (access_struct -> ID PUNTO ID .)
    MENIGUALQUE     reduce using rule 117 (access_struct -> ID PUNTO ID .)
    MAYIGUALQUE     reduce using rule 117 (access_struct -> ID PUNTO ID .)
    IGUALQUE        reduce using rule 117 (access_struct -> ID PUNTO ID .)
    NIGUALQUE       reduce using rule 117 (access_struct -> ID PUNTO ID .)
    OR              reduce using rule 117 (access_struct -> ID PUNTO ID .)
    AND             reduce using rule 117 (access_struct -> ID PUNTO ID .)
    newline         reduce using rule 117 (access_struct -> ID PUNTO ID .)
    DOSP            reduce using rule 117 (access_struct -> ID PUNTO ID .)
    PARDER          reduce using rule 117 (access_struct -> ID PUNTO ID .)
    COMA            reduce using rule 117 (access_struct -> ID PUNTO ID .)
    CORCHETEDER     reduce using rule 117 (access_struct -> ID PUNTO ID .)


state 207

    (99) if_state -> IF expression DOSP newline . statement END
    (100) if_state -> IF expression DOSP newline . statement ELSE DOSP newline statement END
    (101) if_state -> IF expression DOSP newline . statement else_if_list END
    (90) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (69) print_instr -> . PRINT PARIZQ exp_list PARDER
    (70) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (78) definicion_instr -> . LOCAL ID
    (79) asignacion_instr -> . ID IGUAL expression
    (80) asignacion_instr -> . LOCAL ID IGUAL expression
    (83) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (81) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (82) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (91) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (92) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (110) return_state -> . RETURN
    (111) return_state -> . RETURN expression
    (108) break_state -> . BREAK
    (109) continue_state -> . CONTINUE
    (99) if_state -> . IF expression DOSP newline statement END
    (100) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (101) if_state -> . IF expression DOSP newline statement else_if_list END
    (105) while_state -> . WHILE expression DOSP newline statement END
    (106) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (107) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER
    (112) create_struct -> . STRUCT ID DOSP newline attList END
    (115) declare_struct -> . ID DOSP DOSP ID
    (116) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48
    STRUCT          shift and go to state 49

    statement                      shift and go to state 237
    instrucciones                  shift and go to state 238
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 208

    (105) while_state -> WHILE expression DOSP newline . statement END
    (90) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (69) print_instr -> . PRINT PARIZQ exp_list PARDER
    (70) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (78) definicion_instr -> . LOCAL ID
    (79) asignacion_instr -> . ID IGUAL expression
    (80) asignacion_instr -> . LOCAL ID IGUAL expression
    (83) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (81) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (82) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (91) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (92) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (110) return_state -> . RETURN
    (111) return_state -> . RETURN expression
    (108) break_state -> . BREAK
    (109) continue_state -> . CONTINUE
    (99) if_state -> . IF expression DOSP newline statement END
    (100) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (101) if_state -> . IF expression DOSP newline statement else_if_list END
    (105) while_state -> . WHILE expression DOSP newline statement END
    (106) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (107) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER
    (112) create_struct -> . STRUCT ID DOSP newline attList END
    (115) declare_struct -> . ID DOSP DOSP ID
    (116) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48
    STRUCT          shift and go to state 49

    statement                      shift and go to state 239
    instrucciones                  shift and go to state 238
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 209

    (106) for_state -> FOR ID IN expression . DOSP expression DOSP newline statement END
    (107) for_state -> FOR ID IN expression . DOSP newline statement END
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    DOSP            shift and go to state 240
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 210

    (52) nativas -> LOG PARIZQ ENTERO COMA . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 241
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 211

    (53) nativas -> LOG10 PARIZQ expression PARDER .

    newline         reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    MAS             reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    MENOS           reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    POR             reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    MODULO          reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    MENQUE          reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    OR              reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    AND             reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    DOSP            reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    PARDER          reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    COMA            reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)


state 212

    (54) nativas -> COS PARIZQ expression PARDER .

    newline         reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    MAS             reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    MENOS           reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    POR             reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    MODULO          reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    MENQUE          reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    OR              reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    AND             reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    DOSP            reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    PARDER          reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    COMA            reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)


state 213

    (55) nativas -> SIN PARIZQ expression PARDER .

    newline         reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    MAS             reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    MENOS           reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    POR             reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    MODULO          reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    MENQUE          reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    OR              reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    AND             reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    DOSP            reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    PARDER          reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    COMA            reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)


state 214

    (56) nativas -> TAN PARIZQ expression PARDER .

    newline         reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    MAS             reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    MENOS           reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    POR             reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    MODULO          reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    MENQUE          reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    OR              reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    AND             reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    DOSP            reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    PARDER          reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    COMA            reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)


state 215

    (57) nativas -> SQRT PARIZQ expression PARDER .

    newline         reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    MAS             reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    MENOS           reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    POR             reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    MODULO          reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    MENQUE          reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    OR              reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    AND             reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    DOSP            reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    PARDER          reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    COMA            reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)


state 216

    (58) nativas -> UPPERCASE PARIZQ expression PARDER .

    newline         reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    MAS             reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    MENOS           reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    POR             reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    MODULO          reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    MENQUE          reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    OR              reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    AND             reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    DOSP            reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    PARDER          reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    COMA            reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)


state 217

    (59) nativas -> LOWERCASE PARIZQ expression PARDER .

    newline         reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    MAS             reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    MENOS           reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    POR             reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    MODULO          reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    MENQUE          reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    OR              reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    AND             reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    DOSP            reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    PARDER          reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    COMA            reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)


state 218

    (60) nativas -> TOSTRING PARIZQ expression PARDER .

    newline         reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    MAS             reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    MENOS           reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    POR             reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    MODULO          reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    MENQUE          reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    OR              reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    AND             reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    DOSP            reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    PARDER          reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    COMA            reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 60 (nativas -> TOSTRING PARIZQ expression PARDER .)


state 219

    (61) nativas -> TOFLOAT PARIZQ expression PARDER .

    newline         reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    MAS             reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    MENOS           reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    POR             reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    MODULO          reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    MENQUE          reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    OR              reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    AND             reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    DOSP            reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    PARDER          reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    COMA            reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 61 (nativas -> TOFLOAT PARIZQ expression PARDER .)


state 220

    (62) nativas -> TRUNC PARIZQ INT COMA . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 242
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 221

    (63) nativas -> TRUNC PARIZQ expression PARDER .

    newline         reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    MAS             reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    MENOS           reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    POR             reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    MODULO          reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    MENQUE          reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    OR              reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    AND             reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    DOSP            reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    PARDER          reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    COMA            reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 63 (nativas -> TRUNC PARIZQ expression PARDER .)


state 222

    (64) nativas -> TYPEOF PARIZQ expression PARDER .

    newline         reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    MAS             reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    MENOS           reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    POR             reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    MODULO          reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    MENQUE          reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    OR              reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    AND             reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    DOSP            reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    PARDER          reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    COMA            reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 64 (nativas -> TYPEOF PARIZQ expression PARDER .)


state 223

    (65) nativas -> PARSE PARIZQ tipo COMA . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 243
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 224

    (66) nativas -> LENGTH PARIZQ expression PARDER .

    newline         reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    MAS             reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    MENOS           reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    POR             reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    MODULO          reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    MENQUE          reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    OR              reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    AND             reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    DOSP            reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    PARDER          reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    COMA            reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 66 (nativas -> LENGTH PARIZQ expression PARDER .)


state 225

    (67) nativas -> PUSH PARIZQ expression COMA . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 244
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 226

    (68) nativas -> POP PARIZQ expression PARDER .

    newline         reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    MAS             reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    MENOS           reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    POR             reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    MODULO          reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    MENQUE          reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    OR              reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    AND             reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    DOSP            reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    PARDER          reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    COMA            reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 68 (nativas -> POP PARIZQ expression PARDER .)


state 227

    (112) create_struct -> STRUCT ID DOSP newline . attList END
    (113) attList -> . attList ID DOSP tipo PTCOMA newline
    (114) attList -> . ID DOSP tipo PTCOMA newline

    ID              shift and go to state 245

    attList                        shift and go to state 246

state 228

    (86) exp_list -> exp_list COMA expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          reduce using rule 86 (exp_list -> exp_list COMA expression .)
    COMA            reduce using rule 86 (exp_list -> exp_list COMA expression .)
    CORCHETEDER     reduce using rule 86 (exp_list -> exp_list COMA expression .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 229

    (82) definicion_asignacion_instr -> LOCAL ID IGUAL expression DOSP . tipo
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . BOOL
    (74) tipo -> . CHAR
    (75) tipo -> . STRING
    (76) tipo -> . ARRAY
    (77) tipo -> . NOTHING

    INT             shift and go to state 165
    FLOAT           shift and go to state 166
    BOOL            shift and go to state 167
    CHAR            shift and go to state 168
    STRING          shift and go to state 169
    ARRAY           shift and go to state 170
    NOTHING         shift and go to state 171

    tipo                           shift and go to state 247

state 230

    (81) definicion_asignacion_instr -> ID IGUAL expression DOSP tipo .

    newline         reduce using rule 81 (definicion_asignacion_instr -> ID IGUAL expression DOSP tipo .)


state 231

    (88) index_list -> index_list CORCHETEIZQ expression CORCHETEDER .

    IGUAL           reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    CORCHETEIZQ     reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    MAS             reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    MENOS           reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    POR             reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    DIVIDIDO        reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    POTENCIA        reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    MODULO          reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    MAYQUE          reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    MENQUE          reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    MENIGUALQUE     reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    MAYIGUALQUE     reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    IGUALQUE        reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    NIGUALQUE       reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    OR              reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    AND             reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    newline         reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    DOSP            reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    PARDER          reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    COMA            reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    CORCHETEDER     reduce using rule 88 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)


state 232

    (116) assign_access -> ID PUNTO ID IGUAL expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    newline         reduce using rule 116 (assign_access -> ID PUNTO ID IGUAL expression .)
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 233

    (96) dec_params -> ID DOSP . DOSP tipo
    (97) dec_params -> ID DOSP . DOSP ID

    DOSP            shift and go to state 248


state 234

    (91) declare_function -> FUNCTION ID PARIZQ dec_params PARDER . DOSP newline statement END

    DOSP            shift and go to state 249


state 235

    (93) dec_params -> dec_params COMA . ID DOSP DOSP tipo
    (94) dec_params -> dec_params COMA . ID DOSP DOSP ID
    (95) dec_params -> dec_params COMA . ID

    ID              shift and go to state 250


state 236

    (92) declare_function -> FUNCTION ID PARIZQ PARDER DOSP . newline statement END

    newline         shift and go to state 251


state 237

    (99) if_state -> IF expression DOSP newline statement . END
    (100) if_state -> IF expression DOSP newline statement . ELSE DOSP newline statement END
    (101) if_state -> IF expression DOSP newline statement . else_if_list END
    (102) else_if_list -> . ELSEIF expression DOSP newline statement
    (103) else_if_list -> . ELSEIF expression DOSP newline statement ELSE DOSP newline statement
    (104) else_if_list -> . ELSEIF expression DOSP newline statement else_if_list

    END             shift and go to state 252
    ELSE            shift and go to state 253
    ELSEIF          shift and go to state 255

    else_if_list                   shift and go to state 254

state 238

    (90) statement -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (69) print_instr -> . PRINT PARIZQ exp_list PARDER
    (70) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (78) definicion_instr -> . LOCAL ID
    (79) asignacion_instr -> . ID IGUAL expression
    (80) asignacion_instr -> . LOCAL ID IGUAL expression
    (83) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (81) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (82) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (91) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (92) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (110) return_state -> . RETURN
    (111) return_state -> . RETURN expression
    (108) break_state -> . BREAK
    (109) continue_state -> . CONTINUE
    (99) if_state -> . IF expression DOSP newline statement END
    (100) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (101) if_state -> . IF expression DOSP newline statement else_if_list END
    (105) while_state -> . WHILE expression DOSP newline statement END
    (106) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (107) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER
    (112) create_struct -> . STRUCT ID DOSP newline attList END
    (115) declare_struct -> . ID DOSP DOSP ID
    (116) assign_access -> . ID PUNTO ID IGUAL expression

    END             reduce using rule 90 (statement -> instrucciones .)
    ELSE            reduce using rule 90 (statement -> instrucciones .)
    ELSEIF          reduce using rule 90 (statement -> instrucciones .)
    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48
    STRUCT          shift and go to state 49

    instruccion                    shift and go to state 50
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 239

    (105) while_state -> WHILE expression DOSP newline statement . END

    END             shift and go to state 256


state 240

    (106) for_state -> FOR ID IN expression DOSP . expression DOSP newline statement END
    (107) for_state -> FOR ID IN expression DOSP . newline statement END
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    newline         shift and go to state 258
    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 257
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 241

    (52) nativas -> LOG PARIZQ ENTERO COMA expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 259
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 242

    (62) nativas -> TRUNC PARIZQ INT COMA expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 260
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 243

    (65) nativas -> PARSE PARIZQ tipo COMA expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 261
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 244

    (67) nativas -> PUSH PARIZQ expression COMA expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 262
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 245

    (114) attList -> ID . DOSP tipo PTCOMA newline

    DOSP            shift and go to state 263


state 246

    (112) create_struct -> STRUCT ID DOSP newline attList . END
    (113) attList -> attList . ID DOSP tipo PTCOMA newline

    END             shift and go to state 265
    ID              shift and go to state 264


state 247

    (82) definicion_asignacion_instr -> LOCAL ID IGUAL expression DOSP tipo .

    newline         reduce using rule 82 (definicion_asignacion_instr -> LOCAL ID IGUAL expression DOSP tipo .)


state 248

    (96) dec_params -> ID DOSP DOSP . tipo
    (97) dec_params -> ID DOSP DOSP . ID
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . BOOL
    (74) tipo -> . CHAR
    (75) tipo -> . STRING
    (76) tipo -> . ARRAY
    (77) tipo -> . NOTHING

    ID              shift and go to state 266
    INT             shift and go to state 165
    FLOAT           shift and go to state 166
    BOOL            shift and go to state 167
    CHAR            shift and go to state 168
    STRING          shift and go to state 169
    ARRAY           shift and go to state 170
    NOTHING         shift and go to state 171

    tipo                           shift and go to state 267

state 249

    (91) declare_function -> FUNCTION ID PARIZQ dec_params PARDER DOSP . newline statement END

    newline         shift and go to state 268


state 250

    (93) dec_params -> dec_params COMA ID . DOSP DOSP tipo
    (94) dec_params -> dec_params COMA ID . DOSP DOSP ID
    (95) dec_params -> dec_params COMA ID .

    DOSP            shift and go to state 269
    PARDER          reduce using rule 95 (dec_params -> dec_params COMA ID .)
    COMA            reduce using rule 95 (dec_params -> dec_params COMA ID .)


state 251

    (92) declare_function -> FUNCTION ID PARIZQ PARDER DOSP newline . statement END
    (90) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (69) print_instr -> . PRINT PARIZQ exp_list PARDER
    (70) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (78) definicion_instr -> . LOCAL ID
    (79) asignacion_instr -> . ID IGUAL expression
    (80) asignacion_instr -> . LOCAL ID IGUAL expression
    (83) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (81) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (82) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (91) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (92) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (110) return_state -> . RETURN
    (111) return_state -> . RETURN expression
    (108) break_state -> . BREAK
    (109) continue_state -> . CONTINUE
    (99) if_state -> . IF expression DOSP newline statement END
    (100) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (101) if_state -> . IF expression DOSP newline statement else_if_list END
    (105) while_state -> . WHILE expression DOSP newline statement END
    (106) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (107) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER
    (112) create_struct -> . STRUCT ID DOSP newline attList END
    (115) declare_struct -> . ID DOSP DOSP ID
    (116) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48
    STRUCT          shift and go to state 49

    statement                      shift and go to state 270
    instrucciones                  shift and go to state 238
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 252

    (99) if_state -> IF expression DOSP newline statement END .

    newline         reduce using rule 99 (if_state -> IF expression DOSP newline statement END .)


state 253

    (100) if_state -> IF expression DOSP newline statement ELSE . DOSP newline statement END

    DOSP            shift and go to state 271


state 254

    (101) if_state -> IF expression DOSP newline statement else_if_list . END

    END             shift and go to state 272


state 255

    (102) else_if_list -> ELSEIF . expression DOSP newline statement
    (103) else_if_list -> ELSEIF . expression DOSP newline statement ELSE DOSP newline statement
    (104) else_if_list -> ELSEIF . expression DOSP newline statement else_if_list
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (117) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 80
    NOT             shift and go to state 81
    PARIZQ          shift and go to state 83
    CORCHETEIZQ     shift and go to state 84
    DECIMAL         shift and go to state 85
    ENTERO          shift and go to state 86
    CADENA          shift and go to state 87
    CARACTER        shift and go to state 88
    ID              shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48

    expression                     shift and go to state 273
    final_expression               shift and go to state 82
    call_function                  shift and go to state 92
    access_struct                  shift and go to state 93
    nativas                        shift and go to state 94

state 256

    (105) while_state -> WHILE expression DOSP newline statement END .

    newline         reduce using rule 105 (while_state -> WHILE expression DOSP newline statement END .)


state 257

    (106) for_state -> FOR ID IN expression DOSP expression . DOSP newline statement END
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    DOSP            shift and go to state 274
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 258

    (107) for_state -> FOR ID IN expression DOSP newline . statement END
    (90) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (69) print_instr -> . PRINT PARIZQ exp_list PARDER
    (70) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (78) definicion_instr -> . LOCAL ID
    (79) asignacion_instr -> . ID IGUAL expression
    (80) asignacion_instr -> . LOCAL ID IGUAL expression
    (83) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (81) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (82) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (91) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (92) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (110) return_state -> . RETURN
    (111) return_state -> . RETURN expression
    (108) break_state -> . BREAK
    (109) continue_state -> . CONTINUE
    (99) if_state -> . IF expression DOSP newline statement END
    (100) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (101) if_state -> . IF expression DOSP newline statement else_if_list END
    (105) while_state -> . WHILE expression DOSP newline statement END
    (106) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (107) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER
    (112) create_struct -> . STRUCT ID DOSP newline attList END
    (115) declare_struct -> . ID DOSP DOSP ID
    (116) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48
    STRUCT          shift and go to state 49

    statement                      shift and go to state 275
    instrucciones                  shift and go to state 238
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 259

    (52) nativas -> LOG PARIZQ ENTERO COMA expression PARDER .

    newline         reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    MAS             reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    MENOS           reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    POR             reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    DIVIDIDO        reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    POTENCIA        reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    MODULO          reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    MAYQUE          reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    MENQUE          reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    MENIGUALQUE     reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    MAYIGUALQUE     reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    IGUALQUE        reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    NIGUALQUE       reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    OR              reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    AND             reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    DOSP            reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    PARDER          reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    COMA            reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    CORCHETEDER     reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)


state 260

    (62) nativas -> TRUNC PARIZQ INT COMA expression PARDER .

    newline         reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    MAS             reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    MENOS           reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    POR             reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    DIVIDIDO        reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    POTENCIA        reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    MODULO          reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    MAYQUE          reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    MENQUE          reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    MENIGUALQUE     reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    MAYIGUALQUE     reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    IGUALQUE        reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    NIGUALQUE       reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    OR              reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    AND             reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    DOSP            reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    PARDER          reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    COMA            reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    CORCHETEDER     reduce using rule 62 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)


state 261

    (65) nativas -> PARSE PARIZQ tipo COMA expression PARDER .

    newline         reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    MAS             reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    MENOS           reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    POR             reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    DIVIDIDO        reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    POTENCIA        reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    MODULO          reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    MAYQUE          reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    MENQUE          reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    MENIGUALQUE     reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    MAYIGUALQUE     reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    IGUALQUE        reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    NIGUALQUE       reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    OR              reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    AND             reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    DOSP            reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    PARDER          reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    COMA            reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    CORCHETEDER     reduce using rule 65 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)


state 262

    (67) nativas -> PUSH PARIZQ expression COMA expression PARDER .

    newline         reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    MAS             reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    MENOS           reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    POR             reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    DIVIDIDO        reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    POTENCIA        reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    MODULO          reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    MAYQUE          reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    MENQUE          reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    MENIGUALQUE     reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    MAYIGUALQUE     reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    IGUALQUE        reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    NIGUALQUE       reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    OR              reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    AND             reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    DOSP            reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    PARDER          reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    COMA            reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    CORCHETEDER     reduce using rule 67 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)


state 263

    (114) attList -> ID DOSP . tipo PTCOMA newline
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . BOOL
    (74) tipo -> . CHAR
    (75) tipo -> . STRING
    (76) tipo -> . ARRAY
    (77) tipo -> . NOTHING

    INT             shift and go to state 165
    FLOAT           shift and go to state 166
    BOOL            shift and go to state 167
    CHAR            shift and go to state 168
    STRING          shift and go to state 169
    ARRAY           shift and go to state 170
    NOTHING         shift and go to state 171

    tipo                           shift and go to state 276

state 264

    (113) attList -> attList ID . DOSP tipo PTCOMA newline

    DOSP            shift and go to state 277


state 265

    (112) create_struct -> STRUCT ID DOSP newline attList END .

    newline         reduce using rule 112 (create_struct -> STRUCT ID DOSP newline attList END .)


state 266

    (97) dec_params -> ID DOSP DOSP ID .

    PARDER          reduce using rule 97 (dec_params -> ID DOSP DOSP ID .)
    COMA            reduce using rule 97 (dec_params -> ID DOSP DOSP ID .)


state 267

    (96) dec_params -> ID DOSP DOSP tipo .

    PARDER          reduce using rule 96 (dec_params -> ID DOSP DOSP tipo .)
    COMA            reduce using rule 96 (dec_params -> ID DOSP DOSP tipo .)


state 268

    (91) declare_function -> FUNCTION ID PARIZQ dec_params PARDER DOSP newline . statement END
    (90) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (69) print_instr -> . PRINT PARIZQ exp_list PARDER
    (70) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (78) definicion_instr -> . LOCAL ID
    (79) asignacion_instr -> . ID IGUAL expression
    (80) asignacion_instr -> . LOCAL ID IGUAL expression
    (83) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (81) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (82) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (91) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (92) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (110) return_state -> . RETURN
    (111) return_state -> . RETURN expression
    (108) break_state -> . BREAK
    (109) continue_state -> . CONTINUE
    (99) if_state -> . IF expression DOSP newline statement END
    (100) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (101) if_state -> . IF expression DOSP newline statement else_if_list END
    (105) while_state -> . WHILE expression DOSP newline statement END
    (106) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (107) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER
    (112) create_struct -> . STRUCT ID DOSP newline attList END
    (115) declare_struct -> . ID DOSP DOSP ID
    (116) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48
    STRUCT          shift and go to state 49

    statement                      shift and go to state 278
    instrucciones                  shift and go to state 238
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 269

    (93) dec_params -> dec_params COMA ID DOSP . DOSP tipo
    (94) dec_params -> dec_params COMA ID DOSP . DOSP ID

    DOSP            shift and go to state 279


state 270

    (92) declare_function -> FUNCTION ID PARIZQ PARDER DOSP newline statement . END

    END             shift and go to state 280


state 271

    (100) if_state -> IF expression DOSP newline statement ELSE DOSP . newline statement END

    newline         shift and go to state 281


state 272

    (101) if_state -> IF expression DOSP newline statement else_if_list END .

    newline         reduce using rule 101 (if_state -> IF expression DOSP newline statement else_if_list END .)


state 273

    (102) else_if_list -> ELSEIF expression . DOSP newline statement
    (103) else_if_list -> ELSEIF expression . DOSP newline statement ELSE DOSP newline statement
    (104) else_if_list -> ELSEIF expression . DOSP newline statement else_if_list
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    DOSP            shift and go to state 282
    MAS             shift and go to state 128
    MENOS           shift and go to state 129
    POR             shift and go to state 130
    DIVIDIDO        shift and go to state 131
    POTENCIA        shift and go to state 132
    MODULO          shift and go to state 133
    MAYQUE          shift and go to state 134
    MENQUE          shift and go to state 135
    MENIGUALQUE     shift and go to state 136
    MAYIGUALQUE     shift and go to state 137
    IGUALQUE        shift and go to state 138
    NIGUALQUE       shift and go to state 139
    OR              shift and go to state 140
    AND             shift and go to state 141


state 274

    (106) for_state -> FOR ID IN expression DOSP expression DOSP . newline statement END

    newline         shift and go to state 283


state 275

    (107) for_state -> FOR ID IN expression DOSP newline statement . END

    END             shift and go to state 284


state 276

    (114) attList -> ID DOSP tipo . PTCOMA newline

    PTCOMA          shift and go to state 285


state 277

    (113) attList -> attList ID DOSP . tipo PTCOMA newline
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . BOOL
    (74) tipo -> . CHAR
    (75) tipo -> . STRING
    (76) tipo -> . ARRAY
    (77) tipo -> . NOTHING

    INT             shift and go to state 165
    FLOAT           shift and go to state 166
    BOOL            shift and go to state 167
    CHAR            shift and go to state 168
    STRING          shift and go to state 169
    ARRAY           shift and go to state 170
    NOTHING         shift and go to state 171

    tipo                           shift and go to state 286

state 278

    (91) declare_function -> FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement . END

    END             shift and go to state 287


state 279

    (93) dec_params -> dec_params COMA ID DOSP DOSP . tipo
    (94) dec_params -> dec_params COMA ID DOSP DOSP . ID
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . BOOL
    (74) tipo -> . CHAR
    (75) tipo -> . STRING
    (76) tipo -> . ARRAY
    (77) tipo -> . NOTHING

    ID              shift and go to state 288
    INT             shift and go to state 165
    FLOAT           shift and go to state 166
    BOOL            shift and go to state 167
    CHAR            shift and go to state 168
    STRING          shift and go to state 169
    ARRAY           shift and go to state 170
    NOTHING         shift and go to state 171

    tipo                           shift and go to state 289

state 280

    (92) declare_function -> FUNCTION ID PARIZQ PARDER DOSP newline statement END .

    newline         reduce using rule 92 (declare_function -> FUNCTION ID PARIZQ PARDER DOSP newline statement END .)


state 281

    (100) if_state -> IF expression DOSP newline statement ELSE DOSP newline . statement END
    (90) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (69) print_instr -> . PRINT PARIZQ exp_list PARDER
    (70) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (78) definicion_instr -> . LOCAL ID
    (79) asignacion_instr -> . ID IGUAL expression
    (80) asignacion_instr -> . LOCAL ID IGUAL expression
    (83) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (81) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (82) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (91) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (92) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (110) return_state -> . RETURN
    (111) return_state -> . RETURN expression
    (108) break_state -> . BREAK
    (109) continue_state -> . CONTINUE
    (99) if_state -> . IF expression DOSP newline statement END
    (100) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (101) if_state -> . IF expression DOSP newline statement else_if_list END
    (105) while_state -> . WHILE expression DOSP newline statement END
    (106) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (107) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER
    (112) create_struct -> . STRUCT ID DOSP newline attList END
    (115) declare_struct -> . ID DOSP DOSP ID
    (116) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48
    STRUCT          shift and go to state 49

    statement                      shift and go to state 290
    instrucciones                  shift and go to state 238
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 282

    (102) else_if_list -> ELSEIF expression DOSP . newline statement
    (103) else_if_list -> ELSEIF expression DOSP . newline statement ELSE DOSP newline statement
    (104) else_if_list -> ELSEIF expression DOSP . newline statement else_if_list

    newline         shift and go to state 291


state 283

    (106) for_state -> FOR ID IN expression DOSP expression DOSP newline . statement END
    (90) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (69) print_instr -> . PRINT PARIZQ exp_list PARDER
    (70) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (78) definicion_instr -> . LOCAL ID
    (79) asignacion_instr -> . ID IGUAL expression
    (80) asignacion_instr -> . LOCAL ID IGUAL expression
    (83) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (81) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (82) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (91) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (92) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (110) return_state -> . RETURN
    (111) return_state -> . RETURN expression
    (108) break_state -> . BREAK
    (109) continue_state -> . CONTINUE
    (99) if_state -> . IF expression DOSP newline statement END
    (100) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (101) if_state -> . IF expression DOSP newline statement else_if_list END
    (105) while_state -> . WHILE expression DOSP newline statement END
    (106) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (107) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER
    (112) create_struct -> . STRUCT ID DOSP newline attList END
    (115) declare_struct -> . ID DOSP DOSP ID
    (116) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48
    STRUCT          shift and go to state 49

    statement                      shift and go to state 292
    instrucciones                  shift and go to state 238
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 284

    (107) for_state -> FOR ID IN expression DOSP newline statement END .

    newline         reduce using rule 107 (for_state -> FOR ID IN expression DOSP newline statement END .)


state 285

    (114) attList -> ID DOSP tipo PTCOMA . newline

    newline         shift and go to state 293


state 286

    (113) attList -> attList ID DOSP tipo . PTCOMA newline

    PTCOMA          shift and go to state 294


state 287

    (91) declare_function -> FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END .

    newline         reduce using rule 91 (declare_function -> FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END .)


state 288

    (94) dec_params -> dec_params COMA ID DOSP DOSP ID .

    PARDER          reduce using rule 94 (dec_params -> dec_params COMA ID DOSP DOSP ID .)
    COMA            reduce using rule 94 (dec_params -> dec_params COMA ID DOSP DOSP ID .)


state 289

    (93) dec_params -> dec_params COMA ID DOSP DOSP tipo .

    PARDER          reduce using rule 93 (dec_params -> dec_params COMA ID DOSP DOSP tipo .)
    COMA            reduce using rule 93 (dec_params -> dec_params COMA ID DOSP DOSP tipo .)


state 290

    (100) if_state -> IF expression DOSP newline statement ELSE DOSP newline statement . END

    END             shift and go to state 295


state 291

    (102) else_if_list -> ELSEIF expression DOSP newline . statement
    (103) else_if_list -> ELSEIF expression DOSP newline . statement ELSE DOSP newline statement
    (104) else_if_list -> ELSEIF expression DOSP newline . statement else_if_list
    (90) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (69) print_instr -> . PRINT PARIZQ exp_list PARDER
    (70) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (78) definicion_instr -> . LOCAL ID
    (79) asignacion_instr -> . ID IGUAL expression
    (80) asignacion_instr -> . LOCAL ID IGUAL expression
    (83) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (81) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (82) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (91) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (92) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (110) return_state -> . RETURN
    (111) return_state -> . RETURN expression
    (108) break_state -> . BREAK
    (109) continue_state -> . CONTINUE
    (99) if_state -> . IF expression DOSP newline statement END
    (100) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (101) if_state -> . IF expression DOSP newline statement else_if_list END
    (105) while_state -> . WHILE expression DOSP newline statement END
    (106) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (107) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER
    (112) create_struct -> . STRUCT ID DOSP newline attList END
    (115) declare_struct -> . ID DOSP DOSP ID
    (116) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48
    STRUCT          shift and go to state 49

    statement                      shift and go to state 296
    instrucciones                  shift and go to state 238
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 292

    (106) for_state -> FOR ID IN expression DOSP expression DOSP newline statement . END

    END             shift and go to state 297


state 293

    (114) attList -> ID DOSP tipo PTCOMA newline .

    END             reduce using rule 114 (attList -> ID DOSP tipo PTCOMA newline .)
    ID              reduce using rule 114 (attList -> ID DOSP tipo PTCOMA newline .)


state 294

    (113) attList -> attList ID DOSP tipo PTCOMA . newline

    newline         shift and go to state 298


state 295

    (100) if_state -> IF expression DOSP newline statement ELSE DOSP newline statement END .

    newline         reduce using rule 100 (if_state -> IF expression DOSP newline statement ELSE DOSP newline statement END .)


state 296

    (102) else_if_list -> ELSEIF expression DOSP newline statement .
    (103) else_if_list -> ELSEIF expression DOSP newline statement . ELSE DOSP newline statement
    (104) else_if_list -> ELSEIF expression DOSP newline statement . else_if_list
    (102) else_if_list -> . ELSEIF expression DOSP newline statement
    (103) else_if_list -> . ELSEIF expression DOSP newline statement ELSE DOSP newline statement
    (104) else_if_list -> . ELSEIF expression DOSP newline statement else_if_list

    END             reduce using rule 102 (else_if_list -> ELSEIF expression DOSP newline statement .)
    ELSE            shift and go to state 299
    ELSEIF          shift and go to state 255

    else_if_list                   shift and go to state 300

state 297

    (106) for_state -> FOR ID IN expression DOSP expression DOSP newline statement END .

    newline         reduce using rule 106 (for_state -> FOR ID IN expression DOSP expression DOSP newline statement END .)


state 298

    (113) attList -> attList ID DOSP tipo PTCOMA newline .

    END             reduce using rule 113 (attList -> attList ID DOSP tipo PTCOMA newline .)
    ID              reduce using rule 113 (attList -> attList ID DOSP tipo PTCOMA newline .)


state 299

    (103) else_if_list -> ELSEIF expression DOSP newline statement ELSE . DOSP newline statement

    DOSP            shift and go to state 301


state 300

    (104) else_if_list -> ELSEIF expression DOSP newline statement else_if_list .

    END             reduce using rule 104 (else_if_list -> ELSEIF expression DOSP newline statement else_if_list .)


state 301

    (103) else_if_list -> ELSEIF expression DOSP newline statement ELSE DOSP . newline statement

    newline         shift and go to state 302


state 302

    (103) else_if_list -> ELSEIF expression DOSP newline statement ELSE DOSP newline . statement
    (90) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (69) print_instr -> . PRINT PARIZQ exp_list PARDER
    (70) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (78) definicion_instr -> . LOCAL ID
    (79) asignacion_instr -> . ID IGUAL expression
    (80) asignacion_instr -> . LOCAL ID IGUAL expression
    (83) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (81) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (82) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (84) call_function -> . ID PARIZQ PARDER
    (85) call_function -> . ID PARIZQ exp_list PARDER
    (91) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (92) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (110) return_state -> . RETURN
    (111) return_state -> . RETURN expression
    (108) break_state -> . BREAK
    (109) continue_state -> . CONTINUE
    (99) if_state -> . IF expression DOSP newline statement END
    (100) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (101) if_state -> . IF expression DOSP newline statement else_if_list END
    (105) while_state -> . WHILE expression DOSP newline statement END
    (106) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (107) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . TOSTRING PARIZQ expression PARDER
    (61) nativas -> . TOFLOAT PARIZQ expression PARDER
    (62) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (63) nativas -> . TRUNC PARIZQ expression PARDER
    (64) nativas -> . TYPEOF PARIZQ expression PARDER
    (65) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (66) nativas -> . LENGTH PARIZQ expression PARDER
    (67) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (68) nativas -> . POP PARIZQ expression PARDER
    (112) create_struct -> . STRUCT ID DOSP newline attList END
    (115) declare_struct -> . ID DOSP DOSP ID
    (116) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    TOSTRING        shift and go to state 41
    TOFLOAT         shift and go to state 42
    TRUNC           shift and go to state 43
    TYPEOF          shift and go to state 44
    PARSE           shift and go to state 45
    LENGTH          shift and go to state 46
    PUSH            shift and go to state 47
    POP             shift and go to state 48
    STRUCT          shift and go to state 49

    statement                      shift and go to state 303
    instrucciones                  shift and go to state 238
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 303

    (103) else_if_list -> ELSEIF expression DOSP newline statement ELSE DOSP newline statement .

    END             reduce using rule 103 (else_if_list -> ELSEIF expression DOSP newline statement ELSE DOSP newline statement .)

