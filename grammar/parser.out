Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> print_instr newline
Rule 5     instruccion -> println_instr newline
Rule 6     instruccion -> definicion_instr newline
Rule 7     instruccion -> asignacion_instr newline
Rule 8     instruccion -> asignacion_arreglo_instr newline
Rule 9     instruccion -> definicion_asignacion_instr newline
Rule 10    instruccion -> call_function newline
Rule 11    instruccion -> declare_function newline
Rule 12    instruccion -> return_state newline
Rule 13    instruccion -> break_state newline
Rule 14    instruccion -> continue_state newline
Rule 15    instruccion -> if_state newline
Rule 16    instruccion -> while_state newline
Rule 17    instruccion -> for_state newline
Rule 18    instruccion -> nativas newline
Rule 19    instruccion -> create_struct newline
Rule 20    instruccion -> declare_struct newline
Rule 21    instruccion -> assign_access newline
Rule 22    expression -> MENOS expression
Rule 23    expression -> NOT expression
Rule 24    expression -> expression MAS expression
Rule 25    expression -> expression MENOS expression
Rule 26    expression -> expression POR expression
Rule 27    expression -> expression DIVIDIDO expression
Rule 28    expression -> expression POTENCIA expression
Rule 29    expression -> expression MODULO expression
Rule 30    expression -> expression MAYQUE expression
Rule 31    expression -> expression MENQUE expression
Rule 32    expression -> expression MENIGUALQUE expression
Rule 33    expression -> expression MAYIGUALQUE expression
Rule 34    expression -> expression IGUALQUE expression
Rule 35    expression -> expression NIGUALQUE expression
Rule 36    expression -> expression OR expression
Rule 37    expression -> expression AND expression
Rule 38    expression -> final_expression
Rule 39    final_expression -> PARIZQ expression PARDER
Rule 40    final_expression -> CORCHETEIZQ exp_list CORCHETEDER
Rule 41    final_expression -> DECIMAL
Rule 42    final_expression -> ENTERO
Rule 43    final_expression -> CADENA
Rule 44    final_expression -> CARACTER
Rule 45    final_expression -> ID
Rule 46    final_expression -> ID index_list
Rule 47    final_expression -> TRUE
Rule 48    final_expression -> FALSE
Rule 49    final_expression -> call_function
Rule 50    final_expression -> access_struct
Rule 51    final_expression -> nativas
Rule 52    nativas -> LOG PARIZQ ENTERO COMA expression PARDER
Rule 53    nativas -> LOG10 PARIZQ expression PARDER
Rule 54    nativas -> COS PARIZQ expression PARDER
Rule 55    nativas -> SIN PARIZQ expression PARDER
Rule 56    nativas -> TAN PARIZQ expression PARDER
Rule 57    nativas -> SQRT PARIZQ expression PARDER
Rule 58    nativas -> UPPERCASE PARIZQ expression PARDER
Rule 59    nativas -> LOWERCASE PARIZQ expression PARDER
Rule 60    nativas -> STR PARIZQ expression PARDER
Rule 61    nativas -> RANGE PARIZQ expression PARDER
Rule 62    nativas -> FLOAT PARIZQ expression PARDER
Rule 63    nativas -> BOOL PARIZQ expression PARDER
Rule 64    nativas -> INT PARIZQ expression PARDER
Rule 65    nativas -> TRUNC PARIZQ INT COMA expression PARDER
Rule 66    nativas -> TRUNC PARIZQ expression PARDER
Rule 67    nativas -> TYPEOF PARIZQ expression PARDER
Rule 68    nativas -> PARSE PARIZQ tipo COMA expression PARDER
Rule 69    nativas -> LEN PARIZQ expression PARDER
Rule 70    nativas -> PUSH PARIZQ expression COMA expression PARDER
Rule 71    nativas -> POP PARIZQ expression PARDER
Rule 72    print_instr -> PRINT PARIZQ exp_list PARDER
Rule 73    println_instr -> PRINTLN PARIZQ exp_list PARDER
Rule 74    tipo -> INT
Rule 75    tipo -> FLOAT
Rule 76    tipo -> BOOL
Rule 77    tipo -> CHAR
Rule 78    tipo -> STRING
Rule 79    tipo -> ARRAY
Rule 80    tipo -> NOTHING
Rule 81    definicion_instr -> LOCAL ID
Rule 82    asignacion_instr -> ID IGUAL expression
Rule 83    asignacion_instr -> LOCAL ID IGUAL expression
Rule 84    definicion_asignacion_instr -> ID IGUAL expression DOSP tipo
Rule 85    definicion_asignacion_instr -> LOCAL ID IGUAL expression DOSP tipo
Rule 86    asignacion_arreglo_instr -> ID index_list IGUAL expression
Rule 87    call_function -> ID PARIZQ PARDER
Rule 88    call_function -> ID PARIZQ exp_list PARDER
Rule 89    exp_list -> exp_list COMA expression
Rule 90    exp_list -> expression
Rule 91    index_list -> index_list CORCHETEIZQ expression CORCHETEDER
Rule 92    index_list -> CORCHETEIZQ expression CORCHETEDER
Rule 93    statement -> instrucciones
Rule 94    declare_function -> FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
Rule 95    declare_function -> FUNCTION ID PARIZQ PARDER DOSP newline statement END
Rule 96    dec_params -> dec_params COMA ID DOSP DOSP tipo
Rule 97    dec_params -> dec_params COMA ID DOSP DOSP ID
Rule 98    dec_params -> dec_params COMA ID
Rule 99    dec_params -> ID DOSP DOSP tipo
Rule 100   dec_params -> ID DOSP DOSP ID
Rule 101   dec_params -> ID
Rule 102   if_state -> IF expression DOSP newline statement END
Rule 103   if_state -> IF expression DOSP newline statement ELSE DOSP newline statement END
Rule 104   if_state -> IF expression DOSP newline statement else_if_list END
Rule 105   else_if_list -> ELSEIF expression DOSP newline statement
Rule 106   else_if_list -> ELSEIF expression DOSP newline statement ELSE DOSP newline statement
Rule 107   else_if_list -> ELSEIF expression DOSP newline statement else_if_list
Rule 108   while_state -> WHILE expression DOSP newline statement END
Rule 109   for_state -> FOR ID IN expression DOSP expression DOSP newline statement END
Rule 110   for_state -> FOR ID IN expression DOSP newline statement END
Rule 111   break_state -> BREAK
Rule 112   continue_state -> CONTINUE
Rule 113   return_state -> RETURN
Rule 114   return_state -> RETURN expression
Rule 115   create_struct -> STRUCT ID DOSP newline attList END
Rule 116   attList -> attList ID DOSP tipo PTCOMA newline
Rule 117   attList -> ID DOSP tipo PTCOMA newline
Rule 118   declare_struct -> ID DOSP DOSP ID
Rule 119   assign_access -> ID PUNTO ID IGUAL expression
Rule 120   access_struct -> ID PUNTO ID

Terminals, with rules where they appear

AND                  : 37
ARRAY                : 79
BOOL                 : 63 76
BREAK                : 111
CADENA               : 43
CARACTER             : 44
CHAR                 : 77
COMA                 : 52 65 68 70 89 96 97 98
CONTINUE             : 112
CORCHETEDER          : 40 91 92
CORCHETEIZQ          : 40 91 92
COS                  : 54
DECIMAL              : 41
DIVIDIDO             : 27
DOSP                 : 84 85 94 95 96 96 97 97 99 99 100 100 102 103 103 104 105 106 106 107 108 109 109 110 115 116 117 118 118
ELSE                 : 103 106
ELSEIF               : 105 106 107
END                  : 94 95 102 103 104 108 109 110 115
ENTERO               : 42 52
FALSE                : 48
FLOAT                : 62 75
FOR                  : 109 110
FUNCTION             : 94 95
ID                   : 45 46 81 82 83 84 85 86 87 88 94 95 96 97 97 98 99 100 100 101 109 110 115 116 117 118 118 119 119 120 120
IF                   : 102 103 104
IGUAL                : 82 83 84 85 86 119
IGUALQUE             : 34
IN                   : 109 110
INT                  : 64 65 74
LEN                  : 69
LOCAL                : 81 83 85
LOG                  : 52
LOG10                : 53
LOWERCASE            : 59
MAS                  : 24
MAYIGUALQUE          : 33
MAYQUE               : 30
MENIGUALQUE          : 32
MENOS                : 22 25
MENQUE               : 31
MODULO               : 29
NIGUALQUE            : 35
NOT                  : 23
NOTHING              : 80
OR                   : 36
PARDER               : 39 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 87 88 94 95
PARIZQ               : 39 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 87 88 94 95
PARSE                : 68
POP                  : 71
POR                  : 26
POTENCIA             : 28
PRINT                : 72
PRINTLN              : 73
PTCOMA               : 116 117
PUNTO                : 119 120
PUSH                 : 70
RANGE                : 61
RETURN               : 113 114
SIN                  : 55
SQRT                 : 57
STR                  : 60
STRING               : 78
STRUCT               : 115
TAN                  : 56
TRUE                 : 47
TRUNC                : 65 66
TYPEOF               : 67
UPPERCASE            : 58
WHILE                : 108
error                : 
newline              : 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 94 95 102 103 103 104 105 106 106 107 108 109 110 115 116 117

Nonterminals, with rules where they appear

access_struct        : 50
asignacion_arreglo_instr : 8
asignacion_instr     : 7
assign_access        : 21
attList              : 115 116
break_state          : 13
call_function        : 10 49
continue_state       : 14
create_struct        : 19
dec_params           : 94 96 97 98
declare_function     : 11
declare_struct       : 20
definicion_asignacion_instr : 9
definicion_instr     : 6
else_if_list         : 104 107
exp_list             : 40 72 73 88 89
expression           : 22 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 39 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 70 71 82 83 84 85 86 89 90 91 92 102 103 104 105 106 107 108 109 109 110 114 119
final_expression     : 38
for_state            : 17
if_state             : 15
index_list           : 46 86 91
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 93
nativas              : 18 51
print_instr          : 4
println_instr        : 5
return_state         : 12
statement            : 94 95 102 103 103 104 105 106 106 107 108 109 110
tipo                 : 68 84 85 96 99 116 117
while_state          : 16

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (72) print_instr -> . PRINT PARIZQ exp_list PARDER
    (73) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (81) definicion_instr -> . LOCAL ID
    (82) asignacion_instr -> . ID IGUAL expression
    (83) asignacion_instr -> . LOCAL ID IGUAL expression
    (86) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (84) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (85) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (94) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (95) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (113) return_state -> . RETURN
    (114) return_state -> . RETURN expression
    (111) break_state -> . BREAK
    (112) continue_state -> . CONTINUE
    (102) if_state -> . IF expression DOSP newline statement END
    (103) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (104) if_state -> . IF expression DOSP newline statement else_if_list END
    (108) while_state -> . WHILE expression DOSP newline statement END
    (109) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (110) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER
    (115) create_struct -> . STRUCT ID DOSP newline attList END
    (118) declare_struct -> . ID DOSP DOSP ID
    (119) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51
    STRUCT          shift and go to state 52

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (72) print_instr -> . PRINT PARIZQ exp_list PARDER
    (73) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (81) definicion_instr -> . LOCAL ID
    (82) asignacion_instr -> . ID IGUAL expression
    (83) asignacion_instr -> . LOCAL ID IGUAL expression
    (86) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (84) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (85) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (94) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (95) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (113) return_state -> . RETURN
    (114) return_state -> . RETURN expression
    (111) break_state -> . BREAK
    (112) continue_state -> . CONTINUE
    (102) if_state -> . IF expression DOSP newline statement END
    (103) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (104) if_state -> . IF expression DOSP newline statement else_if_list END
    (108) while_state -> . WHILE expression DOSP newline statement END
    (109) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (110) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER
    (115) create_struct -> . STRUCT ID DOSP newline attList END
    (118) declare_struct -> . ID DOSP DOSP ID
    (119) assign_access -> . ID PUNTO ID IGUAL expression

    $end            reduce using rule 1 (init -> instrucciones .)
    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51
    STRUCT          shift and go to state 52

    instruccion                    shift and go to state 53
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 3

    (3) instrucciones -> instruccion .

    PRINT           reduce using rule 3 (instrucciones -> instruccion .)
    PRINTLN         reduce using rule 3 (instrucciones -> instruccion .)
    LOCAL           reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    FUNCTION        reduce using rule 3 (instrucciones -> instruccion .)
    RETURN          reduce using rule 3 (instrucciones -> instruccion .)
    BREAK           reduce using rule 3 (instrucciones -> instruccion .)
    CONTINUE        reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    LOG             reduce using rule 3 (instrucciones -> instruccion .)
    LOG10           reduce using rule 3 (instrucciones -> instruccion .)
    COS             reduce using rule 3 (instrucciones -> instruccion .)
    SIN             reduce using rule 3 (instrucciones -> instruccion .)
    TAN             reduce using rule 3 (instrucciones -> instruccion .)
    SQRT            reduce using rule 3 (instrucciones -> instruccion .)
    UPPERCASE       reduce using rule 3 (instrucciones -> instruccion .)
    LOWERCASE       reduce using rule 3 (instrucciones -> instruccion .)
    STR             reduce using rule 3 (instrucciones -> instruccion .)
    RANGE           reduce using rule 3 (instrucciones -> instruccion .)
    FLOAT           reduce using rule 3 (instrucciones -> instruccion .)
    BOOL            reduce using rule 3 (instrucciones -> instruccion .)
    INT             reduce using rule 3 (instrucciones -> instruccion .)
    TRUNC           reduce using rule 3 (instrucciones -> instruccion .)
    TYPEOF          reduce using rule 3 (instrucciones -> instruccion .)
    PARSE           reduce using rule 3 (instrucciones -> instruccion .)
    LEN             reduce using rule 3 (instrucciones -> instruccion .)
    PUSH            reduce using rule 3 (instrucciones -> instruccion .)
    POP             reduce using rule 3 (instrucciones -> instruccion .)
    STRUCT          reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    END             reduce using rule 3 (instrucciones -> instruccion .)
    ELSE            reduce using rule 3 (instrucciones -> instruccion .)
    ELSEIF          reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> print_instr . newline

    newline         shift and go to state 54


state 5

    (5) instruccion -> println_instr . newline

    newline         shift and go to state 55


state 6

    (6) instruccion -> definicion_instr . newline

    newline         shift and go to state 56


state 7

    (7) instruccion -> asignacion_instr . newline

    newline         shift and go to state 57


state 8

    (8) instruccion -> asignacion_arreglo_instr . newline

    newline         shift and go to state 58


state 9

    (9) instruccion -> definicion_asignacion_instr . newline

    newline         shift and go to state 59


state 10

    (10) instruccion -> call_function . newline

    newline         shift and go to state 60


state 11

    (11) instruccion -> declare_function . newline

    newline         shift and go to state 61


state 12

    (12) instruccion -> return_state . newline

    newline         shift and go to state 62


state 13

    (13) instruccion -> break_state . newline

    newline         shift and go to state 63


state 14

    (14) instruccion -> continue_state . newline

    newline         shift and go to state 64


state 15

    (15) instruccion -> if_state . newline

    newline         shift and go to state 65


state 16

    (16) instruccion -> while_state . newline

    newline         shift and go to state 66


state 17

    (17) instruccion -> for_state . newline

    newline         shift and go to state 67


state 18

    (18) instruccion -> nativas . newline

    newline         shift and go to state 68


state 19

    (19) instruccion -> create_struct . newline

    newline         shift and go to state 69


state 20

    (20) instruccion -> declare_struct . newline

    newline         shift and go to state 70


state 21

    (21) instruccion -> assign_access . newline

    newline         shift and go to state 71


state 22

    (72) print_instr -> PRINT . PARIZQ exp_list PARDER

    PARIZQ          shift and go to state 72


state 23

    (73) println_instr -> PRINTLN . PARIZQ exp_list PARDER

    PARIZQ          shift and go to state 73


state 24

    (81) definicion_instr -> LOCAL . ID
    (83) asignacion_instr -> LOCAL . ID IGUAL expression
    (85) definicion_asignacion_instr -> LOCAL . ID IGUAL expression DOSP tipo

    ID              shift and go to state 74


state 25

    (82) asignacion_instr -> ID . IGUAL expression
    (86) asignacion_arreglo_instr -> ID . index_list IGUAL expression
    (84) definicion_asignacion_instr -> ID . IGUAL expression DOSP tipo
    (87) call_function -> ID . PARIZQ PARDER
    (88) call_function -> ID . PARIZQ exp_list PARDER
    (118) declare_struct -> ID . DOSP DOSP ID
    (119) assign_access -> ID . PUNTO ID IGUAL expression
    (91) index_list -> . index_list CORCHETEIZQ expression CORCHETEDER
    (92) index_list -> . CORCHETEIZQ expression CORCHETEDER

    IGUAL           shift and go to state 75
    PARIZQ          shift and go to state 78
    DOSP            shift and go to state 77
    PUNTO           shift and go to state 79
    CORCHETEIZQ     shift and go to state 80

    index_list                     shift and go to state 76

state 26

    (94) declare_function -> FUNCTION . ID PARIZQ dec_params PARDER DOSP newline statement END
    (95) declare_function -> FUNCTION . ID PARIZQ PARDER DOSP newline statement END

    ID              shift and go to state 81


state 27

    (113) return_state -> RETURN .
    (114) return_state -> RETURN . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    newline         reduce using rule 113 (return_state -> RETURN .)
    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 82
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 28

    (111) break_state -> BREAK .

    newline         reduce using rule 111 (break_state -> BREAK .)


state 29

    (112) continue_state -> CONTINUE .

    newline         reduce using rule 112 (continue_state -> CONTINUE .)


state 30

    (102) if_state -> IF . expression DOSP newline statement END
    (103) if_state -> IF . expression DOSP newline statement ELSE DOSP newline statement END
    (104) if_state -> IF . expression DOSP newline statement else_if_list END
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 98
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 31

    (108) while_state -> WHILE . expression DOSP newline statement END
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 99
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 32

    (109) for_state -> FOR . ID IN expression DOSP expression DOSP newline statement END
    (110) for_state -> FOR . ID IN expression DOSP newline statement END

    ID              shift and go to state 100


state 33

    (52) nativas -> LOG . PARIZQ ENTERO COMA expression PARDER

    PARIZQ          shift and go to state 101


state 34

    (53) nativas -> LOG10 . PARIZQ expression PARDER

    PARIZQ          shift and go to state 102


state 35

    (54) nativas -> COS . PARIZQ expression PARDER

    PARIZQ          shift and go to state 103


state 36

    (55) nativas -> SIN . PARIZQ expression PARDER

    PARIZQ          shift and go to state 104


state 37

    (56) nativas -> TAN . PARIZQ expression PARDER

    PARIZQ          shift and go to state 105


state 38

    (57) nativas -> SQRT . PARIZQ expression PARDER

    PARIZQ          shift and go to state 106


state 39

    (58) nativas -> UPPERCASE . PARIZQ expression PARDER

    PARIZQ          shift and go to state 107


state 40

    (59) nativas -> LOWERCASE . PARIZQ expression PARDER

    PARIZQ          shift and go to state 108


state 41

    (60) nativas -> STR . PARIZQ expression PARDER

    PARIZQ          shift and go to state 109


state 42

    (61) nativas -> RANGE . PARIZQ expression PARDER

    PARIZQ          shift and go to state 110


state 43

    (62) nativas -> FLOAT . PARIZQ expression PARDER

    PARIZQ          shift and go to state 111


state 44

    (63) nativas -> BOOL . PARIZQ expression PARDER

    PARIZQ          shift and go to state 112


state 45

    (64) nativas -> INT . PARIZQ expression PARDER

    PARIZQ          shift and go to state 113


state 46

    (65) nativas -> TRUNC . PARIZQ INT COMA expression PARDER
    (66) nativas -> TRUNC . PARIZQ expression PARDER

    PARIZQ          shift and go to state 114


state 47

    (67) nativas -> TYPEOF . PARIZQ expression PARDER

    PARIZQ          shift and go to state 115


state 48

    (68) nativas -> PARSE . PARIZQ tipo COMA expression PARDER

    PARIZQ          shift and go to state 116


state 49

    (69) nativas -> LEN . PARIZQ expression PARDER

    PARIZQ          shift and go to state 117


state 50

    (70) nativas -> PUSH . PARIZQ expression COMA expression PARDER

    PARIZQ          shift and go to state 118


state 51

    (71) nativas -> POP . PARIZQ expression PARDER

    PARIZQ          shift and go to state 119


state 52

    (115) create_struct -> STRUCT . ID DOSP newline attList END

    ID              shift and go to state 120


state 53

    (2) instrucciones -> instrucciones instruccion .

    PRINT           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PRINTLN         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LOCAL           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FUNCTION        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RETURN          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    BREAK           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONTINUE        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LOG             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LOG10           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    COS             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    SIN             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    TAN             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    SQRT            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    UPPERCASE       reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LOWERCASE       reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    STR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RANGE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FLOAT           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    BOOL            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    INT             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    TRUNC           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    TYPEOF          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PARSE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LEN             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PUSH            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    POP             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    STRUCT          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    END             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ELSE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ELSEIF          reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 54

    (4) instruccion -> print_instr newline .

    PRINT           reduce using rule 4 (instruccion -> print_instr newline .)
    PRINTLN         reduce using rule 4 (instruccion -> print_instr newline .)
    LOCAL           reduce using rule 4 (instruccion -> print_instr newline .)
    ID              reduce using rule 4 (instruccion -> print_instr newline .)
    FUNCTION        reduce using rule 4 (instruccion -> print_instr newline .)
    RETURN          reduce using rule 4 (instruccion -> print_instr newline .)
    BREAK           reduce using rule 4 (instruccion -> print_instr newline .)
    CONTINUE        reduce using rule 4 (instruccion -> print_instr newline .)
    IF              reduce using rule 4 (instruccion -> print_instr newline .)
    WHILE           reduce using rule 4 (instruccion -> print_instr newline .)
    FOR             reduce using rule 4 (instruccion -> print_instr newline .)
    LOG             reduce using rule 4 (instruccion -> print_instr newline .)
    LOG10           reduce using rule 4 (instruccion -> print_instr newline .)
    COS             reduce using rule 4 (instruccion -> print_instr newline .)
    SIN             reduce using rule 4 (instruccion -> print_instr newline .)
    TAN             reduce using rule 4 (instruccion -> print_instr newline .)
    SQRT            reduce using rule 4 (instruccion -> print_instr newline .)
    UPPERCASE       reduce using rule 4 (instruccion -> print_instr newline .)
    LOWERCASE       reduce using rule 4 (instruccion -> print_instr newline .)
    STR             reduce using rule 4 (instruccion -> print_instr newline .)
    RANGE           reduce using rule 4 (instruccion -> print_instr newline .)
    FLOAT           reduce using rule 4 (instruccion -> print_instr newline .)
    BOOL            reduce using rule 4 (instruccion -> print_instr newline .)
    INT             reduce using rule 4 (instruccion -> print_instr newline .)
    TRUNC           reduce using rule 4 (instruccion -> print_instr newline .)
    TYPEOF          reduce using rule 4 (instruccion -> print_instr newline .)
    PARSE           reduce using rule 4 (instruccion -> print_instr newline .)
    LEN             reduce using rule 4 (instruccion -> print_instr newline .)
    PUSH            reduce using rule 4 (instruccion -> print_instr newline .)
    POP             reduce using rule 4 (instruccion -> print_instr newline .)
    STRUCT          reduce using rule 4 (instruccion -> print_instr newline .)
    $end            reduce using rule 4 (instruccion -> print_instr newline .)
    END             reduce using rule 4 (instruccion -> print_instr newline .)
    ELSE            reduce using rule 4 (instruccion -> print_instr newline .)
    ELSEIF          reduce using rule 4 (instruccion -> print_instr newline .)


state 55

    (5) instruccion -> println_instr newline .

    PRINT           reduce using rule 5 (instruccion -> println_instr newline .)
    PRINTLN         reduce using rule 5 (instruccion -> println_instr newline .)
    LOCAL           reduce using rule 5 (instruccion -> println_instr newline .)
    ID              reduce using rule 5 (instruccion -> println_instr newline .)
    FUNCTION        reduce using rule 5 (instruccion -> println_instr newline .)
    RETURN          reduce using rule 5 (instruccion -> println_instr newline .)
    BREAK           reduce using rule 5 (instruccion -> println_instr newline .)
    CONTINUE        reduce using rule 5 (instruccion -> println_instr newline .)
    IF              reduce using rule 5 (instruccion -> println_instr newline .)
    WHILE           reduce using rule 5 (instruccion -> println_instr newline .)
    FOR             reduce using rule 5 (instruccion -> println_instr newline .)
    LOG             reduce using rule 5 (instruccion -> println_instr newline .)
    LOG10           reduce using rule 5 (instruccion -> println_instr newline .)
    COS             reduce using rule 5 (instruccion -> println_instr newline .)
    SIN             reduce using rule 5 (instruccion -> println_instr newline .)
    TAN             reduce using rule 5 (instruccion -> println_instr newline .)
    SQRT            reduce using rule 5 (instruccion -> println_instr newline .)
    UPPERCASE       reduce using rule 5 (instruccion -> println_instr newline .)
    LOWERCASE       reduce using rule 5 (instruccion -> println_instr newline .)
    STR             reduce using rule 5 (instruccion -> println_instr newline .)
    RANGE           reduce using rule 5 (instruccion -> println_instr newline .)
    FLOAT           reduce using rule 5 (instruccion -> println_instr newline .)
    BOOL            reduce using rule 5 (instruccion -> println_instr newline .)
    INT             reduce using rule 5 (instruccion -> println_instr newline .)
    TRUNC           reduce using rule 5 (instruccion -> println_instr newline .)
    TYPEOF          reduce using rule 5 (instruccion -> println_instr newline .)
    PARSE           reduce using rule 5 (instruccion -> println_instr newline .)
    LEN             reduce using rule 5 (instruccion -> println_instr newline .)
    PUSH            reduce using rule 5 (instruccion -> println_instr newline .)
    POP             reduce using rule 5 (instruccion -> println_instr newline .)
    STRUCT          reduce using rule 5 (instruccion -> println_instr newline .)
    $end            reduce using rule 5 (instruccion -> println_instr newline .)
    END             reduce using rule 5 (instruccion -> println_instr newline .)
    ELSE            reduce using rule 5 (instruccion -> println_instr newline .)
    ELSEIF          reduce using rule 5 (instruccion -> println_instr newline .)


state 56

    (6) instruccion -> definicion_instr newline .

    PRINT           reduce using rule 6 (instruccion -> definicion_instr newline .)
    PRINTLN         reduce using rule 6 (instruccion -> definicion_instr newline .)
    LOCAL           reduce using rule 6 (instruccion -> definicion_instr newline .)
    ID              reduce using rule 6 (instruccion -> definicion_instr newline .)
    FUNCTION        reduce using rule 6 (instruccion -> definicion_instr newline .)
    RETURN          reduce using rule 6 (instruccion -> definicion_instr newline .)
    BREAK           reduce using rule 6 (instruccion -> definicion_instr newline .)
    CONTINUE        reduce using rule 6 (instruccion -> definicion_instr newline .)
    IF              reduce using rule 6 (instruccion -> definicion_instr newline .)
    WHILE           reduce using rule 6 (instruccion -> definicion_instr newline .)
    FOR             reduce using rule 6 (instruccion -> definicion_instr newline .)
    LOG             reduce using rule 6 (instruccion -> definicion_instr newline .)
    LOG10           reduce using rule 6 (instruccion -> definicion_instr newline .)
    COS             reduce using rule 6 (instruccion -> definicion_instr newline .)
    SIN             reduce using rule 6 (instruccion -> definicion_instr newline .)
    TAN             reduce using rule 6 (instruccion -> definicion_instr newline .)
    SQRT            reduce using rule 6 (instruccion -> definicion_instr newline .)
    UPPERCASE       reduce using rule 6 (instruccion -> definicion_instr newline .)
    LOWERCASE       reduce using rule 6 (instruccion -> definicion_instr newline .)
    STR             reduce using rule 6 (instruccion -> definicion_instr newline .)
    RANGE           reduce using rule 6 (instruccion -> definicion_instr newline .)
    FLOAT           reduce using rule 6 (instruccion -> definicion_instr newline .)
    BOOL            reduce using rule 6 (instruccion -> definicion_instr newline .)
    INT             reduce using rule 6 (instruccion -> definicion_instr newline .)
    TRUNC           reduce using rule 6 (instruccion -> definicion_instr newline .)
    TYPEOF          reduce using rule 6 (instruccion -> definicion_instr newline .)
    PARSE           reduce using rule 6 (instruccion -> definicion_instr newline .)
    LEN             reduce using rule 6 (instruccion -> definicion_instr newline .)
    PUSH            reduce using rule 6 (instruccion -> definicion_instr newline .)
    POP             reduce using rule 6 (instruccion -> definicion_instr newline .)
    STRUCT          reduce using rule 6 (instruccion -> definicion_instr newline .)
    $end            reduce using rule 6 (instruccion -> definicion_instr newline .)
    END             reduce using rule 6 (instruccion -> definicion_instr newline .)
    ELSE            reduce using rule 6 (instruccion -> definicion_instr newline .)
    ELSEIF          reduce using rule 6 (instruccion -> definicion_instr newline .)


state 57

    (7) instruccion -> asignacion_instr newline .

    PRINT           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    PRINTLN         reduce using rule 7 (instruccion -> asignacion_instr newline .)
    LOCAL           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    ID              reduce using rule 7 (instruccion -> asignacion_instr newline .)
    FUNCTION        reduce using rule 7 (instruccion -> asignacion_instr newline .)
    RETURN          reduce using rule 7 (instruccion -> asignacion_instr newline .)
    BREAK           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    CONTINUE        reduce using rule 7 (instruccion -> asignacion_instr newline .)
    IF              reduce using rule 7 (instruccion -> asignacion_instr newline .)
    WHILE           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    FOR             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    LOG             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    LOG10           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    COS             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    SIN             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    TAN             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    SQRT            reduce using rule 7 (instruccion -> asignacion_instr newline .)
    UPPERCASE       reduce using rule 7 (instruccion -> asignacion_instr newline .)
    LOWERCASE       reduce using rule 7 (instruccion -> asignacion_instr newline .)
    STR             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    RANGE           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    FLOAT           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    BOOL            reduce using rule 7 (instruccion -> asignacion_instr newline .)
    INT             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    TRUNC           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    TYPEOF          reduce using rule 7 (instruccion -> asignacion_instr newline .)
    PARSE           reduce using rule 7 (instruccion -> asignacion_instr newline .)
    LEN             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    PUSH            reduce using rule 7 (instruccion -> asignacion_instr newline .)
    POP             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    STRUCT          reduce using rule 7 (instruccion -> asignacion_instr newline .)
    $end            reduce using rule 7 (instruccion -> asignacion_instr newline .)
    END             reduce using rule 7 (instruccion -> asignacion_instr newline .)
    ELSE            reduce using rule 7 (instruccion -> asignacion_instr newline .)
    ELSEIF          reduce using rule 7 (instruccion -> asignacion_instr newline .)


state 58

    (8) instruccion -> asignacion_arreglo_instr newline .

    PRINT           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    PRINTLN         reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    LOCAL           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    ID              reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    FUNCTION        reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    RETURN          reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    BREAK           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    CONTINUE        reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    IF              reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    WHILE           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    FOR             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    LOG             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    LOG10           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    COS             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    SIN             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    TAN             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    SQRT            reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    UPPERCASE       reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    LOWERCASE       reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    STR             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    RANGE           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    FLOAT           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    BOOL            reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    INT             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    TRUNC           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    TYPEOF          reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    PARSE           reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    LEN             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    PUSH            reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    POP             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    STRUCT          reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    $end            reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    END             reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    ELSE            reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)
    ELSEIF          reduce using rule 8 (instruccion -> asignacion_arreglo_instr newline .)


state 59

    (9) instruccion -> definicion_asignacion_instr newline .

    PRINT           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    PRINTLN         reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    LOCAL           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    ID              reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    FUNCTION        reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    RETURN          reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    BREAK           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    CONTINUE        reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    IF              reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    WHILE           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    FOR             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    LOG             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    LOG10           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    COS             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    SIN             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    TAN             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    SQRT            reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    UPPERCASE       reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    LOWERCASE       reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    STR             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    RANGE           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    FLOAT           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    BOOL            reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    INT             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    TRUNC           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    TYPEOF          reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    PARSE           reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    LEN             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    PUSH            reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    POP             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    STRUCT          reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    $end            reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    END             reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    ELSE            reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)
    ELSEIF          reduce using rule 9 (instruccion -> definicion_asignacion_instr newline .)


state 60

    (10) instruccion -> call_function newline .

    PRINT           reduce using rule 10 (instruccion -> call_function newline .)
    PRINTLN         reduce using rule 10 (instruccion -> call_function newline .)
    LOCAL           reduce using rule 10 (instruccion -> call_function newline .)
    ID              reduce using rule 10 (instruccion -> call_function newline .)
    FUNCTION        reduce using rule 10 (instruccion -> call_function newline .)
    RETURN          reduce using rule 10 (instruccion -> call_function newline .)
    BREAK           reduce using rule 10 (instruccion -> call_function newline .)
    CONTINUE        reduce using rule 10 (instruccion -> call_function newline .)
    IF              reduce using rule 10 (instruccion -> call_function newline .)
    WHILE           reduce using rule 10 (instruccion -> call_function newline .)
    FOR             reduce using rule 10 (instruccion -> call_function newline .)
    LOG             reduce using rule 10 (instruccion -> call_function newline .)
    LOG10           reduce using rule 10 (instruccion -> call_function newline .)
    COS             reduce using rule 10 (instruccion -> call_function newline .)
    SIN             reduce using rule 10 (instruccion -> call_function newline .)
    TAN             reduce using rule 10 (instruccion -> call_function newline .)
    SQRT            reduce using rule 10 (instruccion -> call_function newline .)
    UPPERCASE       reduce using rule 10 (instruccion -> call_function newline .)
    LOWERCASE       reduce using rule 10 (instruccion -> call_function newline .)
    STR             reduce using rule 10 (instruccion -> call_function newline .)
    RANGE           reduce using rule 10 (instruccion -> call_function newline .)
    FLOAT           reduce using rule 10 (instruccion -> call_function newline .)
    BOOL            reduce using rule 10 (instruccion -> call_function newline .)
    INT             reduce using rule 10 (instruccion -> call_function newline .)
    TRUNC           reduce using rule 10 (instruccion -> call_function newline .)
    TYPEOF          reduce using rule 10 (instruccion -> call_function newline .)
    PARSE           reduce using rule 10 (instruccion -> call_function newline .)
    LEN             reduce using rule 10 (instruccion -> call_function newline .)
    PUSH            reduce using rule 10 (instruccion -> call_function newline .)
    POP             reduce using rule 10 (instruccion -> call_function newline .)
    STRUCT          reduce using rule 10 (instruccion -> call_function newline .)
    $end            reduce using rule 10 (instruccion -> call_function newline .)
    END             reduce using rule 10 (instruccion -> call_function newline .)
    ELSE            reduce using rule 10 (instruccion -> call_function newline .)
    ELSEIF          reduce using rule 10 (instruccion -> call_function newline .)


state 61

    (11) instruccion -> declare_function newline .

    PRINT           reduce using rule 11 (instruccion -> declare_function newline .)
    PRINTLN         reduce using rule 11 (instruccion -> declare_function newline .)
    LOCAL           reduce using rule 11 (instruccion -> declare_function newline .)
    ID              reduce using rule 11 (instruccion -> declare_function newline .)
    FUNCTION        reduce using rule 11 (instruccion -> declare_function newline .)
    RETURN          reduce using rule 11 (instruccion -> declare_function newline .)
    BREAK           reduce using rule 11 (instruccion -> declare_function newline .)
    CONTINUE        reduce using rule 11 (instruccion -> declare_function newline .)
    IF              reduce using rule 11 (instruccion -> declare_function newline .)
    WHILE           reduce using rule 11 (instruccion -> declare_function newline .)
    FOR             reduce using rule 11 (instruccion -> declare_function newline .)
    LOG             reduce using rule 11 (instruccion -> declare_function newline .)
    LOG10           reduce using rule 11 (instruccion -> declare_function newline .)
    COS             reduce using rule 11 (instruccion -> declare_function newline .)
    SIN             reduce using rule 11 (instruccion -> declare_function newline .)
    TAN             reduce using rule 11 (instruccion -> declare_function newline .)
    SQRT            reduce using rule 11 (instruccion -> declare_function newline .)
    UPPERCASE       reduce using rule 11 (instruccion -> declare_function newline .)
    LOWERCASE       reduce using rule 11 (instruccion -> declare_function newline .)
    STR             reduce using rule 11 (instruccion -> declare_function newline .)
    RANGE           reduce using rule 11 (instruccion -> declare_function newline .)
    FLOAT           reduce using rule 11 (instruccion -> declare_function newline .)
    BOOL            reduce using rule 11 (instruccion -> declare_function newline .)
    INT             reduce using rule 11 (instruccion -> declare_function newline .)
    TRUNC           reduce using rule 11 (instruccion -> declare_function newline .)
    TYPEOF          reduce using rule 11 (instruccion -> declare_function newline .)
    PARSE           reduce using rule 11 (instruccion -> declare_function newline .)
    LEN             reduce using rule 11 (instruccion -> declare_function newline .)
    PUSH            reduce using rule 11 (instruccion -> declare_function newline .)
    POP             reduce using rule 11 (instruccion -> declare_function newline .)
    STRUCT          reduce using rule 11 (instruccion -> declare_function newline .)
    $end            reduce using rule 11 (instruccion -> declare_function newline .)
    END             reduce using rule 11 (instruccion -> declare_function newline .)
    ELSE            reduce using rule 11 (instruccion -> declare_function newline .)
    ELSEIF          reduce using rule 11 (instruccion -> declare_function newline .)


state 62

    (12) instruccion -> return_state newline .

    PRINT           reduce using rule 12 (instruccion -> return_state newline .)
    PRINTLN         reduce using rule 12 (instruccion -> return_state newline .)
    LOCAL           reduce using rule 12 (instruccion -> return_state newline .)
    ID              reduce using rule 12 (instruccion -> return_state newline .)
    FUNCTION        reduce using rule 12 (instruccion -> return_state newline .)
    RETURN          reduce using rule 12 (instruccion -> return_state newline .)
    BREAK           reduce using rule 12 (instruccion -> return_state newline .)
    CONTINUE        reduce using rule 12 (instruccion -> return_state newline .)
    IF              reduce using rule 12 (instruccion -> return_state newline .)
    WHILE           reduce using rule 12 (instruccion -> return_state newline .)
    FOR             reduce using rule 12 (instruccion -> return_state newline .)
    LOG             reduce using rule 12 (instruccion -> return_state newline .)
    LOG10           reduce using rule 12 (instruccion -> return_state newline .)
    COS             reduce using rule 12 (instruccion -> return_state newline .)
    SIN             reduce using rule 12 (instruccion -> return_state newline .)
    TAN             reduce using rule 12 (instruccion -> return_state newline .)
    SQRT            reduce using rule 12 (instruccion -> return_state newline .)
    UPPERCASE       reduce using rule 12 (instruccion -> return_state newline .)
    LOWERCASE       reduce using rule 12 (instruccion -> return_state newline .)
    STR             reduce using rule 12 (instruccion -> return_state newline .)
    RANGE           reduce using rule 12 (instruccion -> return_state newline .)
    FLOAT           reduce using rule 12 (instruccion -> return_state newline .)
    BOOL            reduce using rule 12 (instruccion -> return_state newline .)
    INT             reduce using rule 12 (instruccion -> return_state newline .)
    TRUNC           reduce using rule 12 (instruccion -> return_state newline .)
    TYPEOF          reduce using rule 12 (instruccion -> return_state newline .)
    PARSE           reduce using rule 12 (instruccion -> return_state newline .)
    LEN             reduce using rule 12 (instruccion -> return_state newline .)
    PUSH            reduce using rule 12 (instruccion -> return_state newline .)
    POP             reduce using rule 12 (instruccion -> return_state newline .)
    STRUCT          reduce using rule 12 (instruccion -> return_state newline .)
    $end            reduce using rule 12 (instruccion -> return_state newline .)
    END             reduce using rule 12 (instruccion -> return_state newline .)
    ELSE            reduce using rule 12 (instruccion -> return_state newline .)
    ELSEIF          reduce using rule 12 (instruccion -> return_state newline .)


state 63

    (13) instruccion -> break_state newline .

    PRINT           reduce using rule 13 (instruccion -> break_state newline .)
    PRINTLN         reduce using rule 13 (instruccion -> break_state newline .)
    LOCAL           reduce using rule 13 (instruccion -> break_state newline .)
    ID              reduce using rule 13 (instruccion -> break_state newline .)
    FUNCTION        reduce using rule 13 (instruccion -> break_state newline .)
    RETURN          reduce using rule 13 (instruccion -> break_state newline .)
    BREAK           reduce using rule 13 (instruccion -> break_state newline .)
    CONTINUE        reduce using rule 13 (instruccion -> break_state newline .)
    IF              reduce using rule 13 (instruccion -> break_state newline .)
    WHILE           reduce using rule 13 (instruccion -> break_state newline .)
    FOR             reduce using rule 13 (instruccion -> break_state newline .)
    LOG             reduce using rule 13 (instruccion -> break_state newline .)
    LOG10           reduce using rule 13 (instruccion -> break_state newline .)
    COS             reduce using rule 13 (instruccion -> break_state newline .)
    SIN             reduce using rule 13 (instruccion -> break_state newline .)
    TAN             reduce using rule 13 (instruccion -> break_state newline .)
    SQRT            reduce using rule 13 (instruccion -> break_state newline .)
    UPPERCASE       reduce using rule 13 (instruccion -> break_state newline .)
    LOWERCASE       reduce using rule 13 (instruccion -> break_state newline .)
    STR             reduce using rule 13 (instruccion -> break_state newline .)
    RANGE           reduce using rule 13 (instruccion -> break_state newline .)
    FLOAT           reduce using rule 13 (instruccion -> break_state newline .)
    BOOL            reduce using rule 13 (instruccion -> break_state newline .)
    INT             reduce using rule 13 (instruccion -> break_state newline .)
    TRUNC           reduce using rule 13 (instruccion -> break_state newline .)
    TYPEOF          reduce using rule 13 (instruccion -> break_state newline .)
    PARSE           reduce using rule 13 (instruccion -> break_state newline .)
    LEN             reduce using rule 13 (instruccion -> break_state newline .)
    PUSH            reduce using rule 13 (instruccion -> break_state newline .)
    POP             reduce using rule 13 (instruccion -> break_state newline .)
    STRUCT          reduce using rule 13 (instruccion -> break_state newline .)
    $end            reduce using rule 13 (instruccion -> break_state newline .)
    END             reduce using rule 13 (instruccion -> break_state newline .)
    ELSE            reduce using rule 13 (instruccion -> break_state newline .)
    ELSEIF          reduce using rule 13 (instruccion -> break_state newline .)


state 64

    (14) instruccion -> continue_state newline .

    PRINT           reduce using rule 14 (instruccion -> continue_state newline .)
    PRINTLN         reduce using rule 14 (instruccion -> continue_state newline .)
    LOCAL           reduce using rule 14 (instruccion -> continue_state newline .)
    ID              reduce using rule 14 (instruccion -> continue_state newline .)
    FUNCTION        reduce using rule 14 (instruccion -> continue_state newline .)
    RETURN          reduce using rule 14 (instruccion -> continue_state newline .)
    BREAK           reduce using rule 14 (instruccion -> continue_state newline .)
    CONTINUE        reduce using rule 14 (instruccion -> continue_state newline .)
    IF              reduce using rule 14 (instruccion -> continue_state newline .)
    WHILE           reduce using rule 14 (instruccion -> continue_state newline .)
    FOR             reduce using rule 14 (instruccion -> continue_state newline .)
    LOG             reduce using rule 14 (instruccion -> continue_state newline .)
    LOG10           reduce using rule 14 (instruccion -> continue_state newline .)
    COS             reduce using rule 14 (instruccion -> continue_state newline .)
    SIN             reduce using rule 14 (instruccion -> continue_state newline .)
    TAN             reduce using rule 14 (instruccion -> continue_state newline .)
    SQRT            reduce using rule 14 (instruccion -> continue_state newline .)
    UPPERCASE       reduce using rule 14 (instruccion -> continue_state newline .)
    LOWERCASE       reduce using rule 14 (instruccion -> continue_state newline .)
    STR             reduce using rule 14 (instruccion -> continue_state newline .)
    RANGE           reduce using rule 14 (instruccion -> continue_state newline .)
    FLOAT           reduce using rule 14 (instruccion -> continue_state newline .)
    BOOL            reduce using rule 14 (instruccion -> continue_state newline .)
    INT             reduce using rule 14 (instruccion -> continue_state newline .)
    TRUNC           reduce using rule 14 (instruccion -> continue_state newline .)
    TYPEOF          reduce using rule 14 (instruccion -> continue_state newline .)
    PARSE           reduce using rule 14 (instruccion -> continue_state newline .)
    LEN             reduce using rule 14 (instruccion -> continue_state newline .)
    PUSH            reduce using rule 14 (instruccion -> continue_state newline .)
    POP             reduce using rule 14 (instruccion -> continue_state newline .)
    STRUCT          reduce using rule 14 (instruccion -> continue_state newline .)
    $end            reduce using rule 14 (instruccion -> continue_state newline .)
    END             reduce using rule 14 (instruccion -> continue_state newline .)
    ELSE            reduce using rule 14 (instruccion -> continue_state newline .)
    ELSEIF          reduce using rule 14 (instruccion -> continue_state newline .)


state 65

    (15) instruccion -> if_state newline .

    PRINT           reduce using rule 15 (instruccion -> if_state newline .)
    PRINTLN         reduce using rule 15 (instruccion -> if_state newline .)
    LOCAL           reduce using rule 15 (instruccion -> if_state newline .)
    ID              reduce using rule 15 (instruccion -> if_state newline .)
    FUNCTION        reduce using rule 15 (instruccion -> if_state newline .)
    RETURN          reduce using rule 15 (instruccion -> if_state newline .)
    BREAK           reduce using rule 15 (instruccion -> if_state newline .)
    CONTINUE        reduce using rule 15 (instruccion -> if_state newline .)
    IF              reduce using rule 15 (instruccion -> if_state newline .)
    WHILE           reduce using rule 15 (instruccion -> if_state newline .)
    FOR             reduce using rule 15 (instruccion -> if_state newline .)
    LOG             reduce using rule 15 (instruccion -> if_state newline .)
    LOG10           reduce using rule 15 (instruccion -> if_state newline .)
    COS             reduce using rule 15 (instruccion -> if_state newline .)
    SIN             reduce using rule 15 (instruccion -> if_state newline .)
    TAN             reduce using rule 15 (instruccion -> if_state newline .)
    SQRT            reduce using rule 15 (instruccion -> if_state newline .)
    UPPERCASE       reduce using rule 15 (instruccion -> if_state newline .)
    LOWERCASE       reduce using rule 15 (instruccion -> if_state newline .)
    STR             reduce using rule 15 (instruccion -> if_state newline .)
    RANGE           reduce using rule 15 (instruccion -> if_state newline .)
    FLOAT           reduce using rule 15 (instruccion -> if_state newline .)
    BOOL            reduce using rule 15 (instruccion -> if_state newline .)
    INT             reduce using rule 15 (instruccion -> if_state newline .)
    TRUNC           reduce using rule 15 (instruccion -> if_state newline .)
    TYPEOF          reduce using rule 15 (instruccion -> if_state newline .)
    PARSE           reduce using rule 15 (instruccion -> if_state newline .)
    LEN             reduce using rule 15 (instruccion -> if_state newline .)
    PUSH            reduce using rule 15 (instruccion -> if_state newline .)
    POP             reduce using rule 15 (instruccion -> if_state newline .)
    STRUCT          reduce using rule 15 (instruccion -> if_state newline .)
    $end            reduce using rule 15 (instruccion -> if_state newline .)
    END             reduce using rule 15 (instruccion -> if_state newline .)
    ELSE            reduce using rule 15 (instruccion -> if_state newline .)
    ELSEIF          reduce using rule 15 (instruccion -> if_state newline .)


state 66

    (16) instruccion -> while_state newline .

    PRINT           reduce using rule 16 (instruccion -> while_state newline .)
    PRINTLN         reduce using rule 16 (instruccion -> while_state newline .)
    LOCAL           reduce using rule 16 (instruccion -> while_state newline .)
    ID              reduce using rule 16 (instruccion -> while_state newline .)
    FUNCTION        reduce using rule 16 (instruccion -> while_state newline .)
    RETURN          reduce using rule 16 (instruccion -> while_state newline .)
    BREAK           reduce using rule 16 (instruccion -> while_state newline .)
    CONTINUE        reduce using rule 16 (instruccion -> while_state newline .)
    IF              reduce using rule 16 (instruccion -> while_state newline .)
    WHILE           reduce using rule 16 (instruccion -> while_state newline .)
    FOR             reduce using rule 16 (instruccion -> while_state newline .)
    LOG             reduce using rule 16 (instruccion -> while_state newline .)
    LOG10           reduce using rule 16 (instruccion -> while_state newline .)
    COS             reduce using rule 16 (instruccion -> while_state newline .)
    SIN             reduce using rule 16 (instruccion -> while_state newline .)
    TAN             reduce using rule 16 (instruccion -> while_state newline .)
    SQRT            reduce using rule 16 (instruccion -> while_state newline .)
    UPPERCASE       reduce using rule 16 (instruccion -> while_state newline .)
    LOWERCASE       reduce using rule 16 (instruccion -> while_state newline .)
    STR             reduce using rule 16 (instruccion -> while_state newline .)
    RANGE           reduce using rule 16 (instruccion -> while_state newline .)
    FLOAT           reduce using rule 16 (instruccion -> while_state newline .)
    BOOL            reduce using rule 16 (instruccion -> while_state newline .)
    INT             reduce using rule 16 (instruccion -> while_state newline .)
    TRUNC           reduce using rule 16 (instruccion -> while_state newline .)
    TYPEOF          reduce using rule 16 (instruccion -> while_state newline .)
    PARSE           reduce using rule 16 (instruccion -> while_state newline .)
    LEN             reduce using rule 16 (instruccion -> while_state newline .)
    PUSH            reduce using rule 16 (instruccion -> while_state newline .)
    POP             reduce using rule 16 (instruccion -> while_state newline .)
    STRUCT          reduce using rule 16 (instruccion -> while_state newline .)
    $end            reduce using rule 16 (instruccion -> while_state newline .)
    END             reduce using rule 16 (instruccion -> while_state newline .)
    ELSE            reduce using rule 16 (instruccion -> while_state newline .)
    ELSEIF          reduce using rule 16 (instruccion -> while_state newline .)


state 67

    (17) instruccion -> for_state newline .

    PRINT           reduce using rule 17 (instruccion -> for_state newline .)
    PRINTLN         reduce using rule 17 (instruccion -> for_state newline .)
    LOCAL           reduce using rule 17 (instruccion -> for_state newline .)
    ID              reduce using rule 17 (instruccion -> for_state newline .)
    FUNCTION        reduce using rule 17 (instruccion -> for_state newline .)
    RETURN          reduce using rule 17 (instruccion -> for_state newline .)
    BREAK           reduce using rule 17 (instruccion -> for_state newline .)
    CONTINUE        reduce using rule 17 (instruccion -> for_state newline .)
    IF              reduce using rule 17 (instruccion -> for_state newline .)
    WHILE           reduce using rule 17 (instruccion -> for_state newline .)
    FOR             reduce using rule 17 (instruccion -> for_state newline .)
    LOG             reduce using rule 17 (instruccion -> for_state newline .)
    LOG10           reduce using rule 17 (instruccion -> for_state newline .)
    COS             reduce using rule 17 (instruccion -> for_state newline .)
    SIN             reduce using rule 17 (instruccion -> for_state newline .)
    TAN             reduce using rule 17 (instruccion -> for_state newline .)
    SQRT            reduce using rule 17 (instruccion -> for_state newline .)
    UPPERCASE       reduce using rule 17 (instruccion -> for_state newline .)
    LOWERCASE       reduce using rule 17 (instruccion -> for_state newline .)
    STR             reduce using rule 17 (instruccion -> for_state newline .)
    RANGE           reduce using rule 17 (instruccion -> for_state newline .)
    FLOAT           reduce using rule 17 (instruccion -> for_state newline .)
    BOOL            reduce using rule 17 (instruccion -> for_state newline .)
    INT             reduce using rule 17 (instruccion -> for_state newline .)
    TRUNC           reduce using rule 17 (instruccion -> for_state newline .)
    TYPEOF          reduce using rule 17 (instruccion -> for_state newline .)
    PARSE           reduce using rule 17 (instruccion -> for_state newline .)
    LEN             reduce using rule 17 (instruccion -> for_state newline .)
    PUSH            reduce using rule 17 (instruccion -> for_state newline .)
    POP             reduce using rule 17 (instruccion -> for_state newline .)
    STRUCT          reduce using rule 17 (instruccion -> for_state newline .)
    $end            reduce using rule 17 (instruccion -> for_state newline .)
    END             reduce using rule 17 (instruccion -> for_state newline .)
    ELSE            reduce using rule 17 (instruccion -> for_state newline .)
    ELSEIF          reduce using rule 17 (instruccion -> for_state newline .)


state 68

    (18) instruccion -> nativas newline .

    PRINT           reduce using rule 18 (instruccion -> nativas newline .)
    PRINTLN         reduce using rule 18 (instruccion -> nativas newline .)
    LOCAL           reduce using rule 18 (instruccion -> nativas newline .)
    ID              reduce using rule 18 (instruccion -> nativas newline .)
    FUNCTION        reduce using rule 18 (instruccion -> nativas newline .)
    RETURN          reduce using rule 18 (instruccion -> nativas newline .)
    BREAK           reduce using rule 18 (instruccion -> nativas newline .)
    CONTINUE        reduce using rule 18 (instruccion -> nativas newline .)
    IF              reduce using rule 18 (instruccion -> nativas newline .)
    WHILE           reduce using rule 18 (instruccion -> nativas newline .)
    FOR             reduce using rule 18 (instruccion -> nativas newline .)
    LOG             reduce using rule 18 (instruccion -> nativas newline .)
    LOG10           reduce using rule 18 (instruccion -> nativas newline .)
    COS             reduce using rule 18 (instruccion -> nativas newline .)
    SIN             reduce using rule 18 (instruccion -> nativas newline .)
    TAN             reduce using rule 18 (instruccion -> nativas newline .)
    SQRT            reduce using rule 18 (instruccion -> nativas newline .)
    UPPERCASE       reduce using rule 18 (instruccion -> nativas newline .)
    LOWERCASE       reduce using rule 18 (instruccion -> nativas newline .)
    STR             reduce using rule 18 (instruccion -> nativas newline .)
    RANGE           reduce using rule 18 (instruccion -> nativas newline .)
    FLOAT           reduce using rule 18 (instruccion -> nativas newline .)
    BOOL            reduce using rule 18 (instruccion -> nativas newline .)
    INT             reduce using rule 18 (instruccion -> nativas newline .)
    TRUNC           reduce using rule 18 (instruccion -> nativas newline .)
    TYPEOF          reduce using rule 18 (instruccion -> nativas newline .)
    PARSE           reduce using rule 18 (instruccion -> nativas newline .)
    LEN             reduce using rule 18 (instruccion -> nativas newline .)
    PUSH            reduce using rule 18 (instruccion -> nativas newline .)
    POP             reduce using rule 18 (instruccion -> nativas newline .)
    STRUCT          reduce using rule 18 (instruccion -> nativas newline .)
    $end            reduce using rule 18 (instruccion -> nativas newline .)
    END             reduce using rule 18 (instruccion -> nativas newline .)
    ELSE            reduce using rule 18 (instruccion -> nativas newline .)
    ELSEIF          reduce using rule 18 (instruccion -> nativas newline .)


state 69

    (19) instruccion -> create_struct newline .

    PRINT           reduce using rule 19 (instruccion -> create_struct newline .)
    PRINTLN         reduce using rule 19 (instruccion -> create_struct newline .)
    LOCAL           reduce using rule 19 (instruccion -> create_struct newline .)
    ID              reduce using rule 19 (instruccion -> create_struct newline .)
    FUNCTION        reduce using rule 19 (instruccion -> create_struct newline .)
    RETURN          reduce using rule 19 (instruccion -> create_struct newline .)
    BREAK           reduce using rule 19 (instruccion -> create_struct newline .)
    CONTINUE        reduce using rule 19 (instruccion -> create_struct newline .)
    IF              reduce using rule 19 (instruccion -> create_struct newline .)
    WHILE           reduce using rule 19 (instruccion -> create_struct newline .)
    FOR             reduce using rule 19 (instruccion -> create_struct newline .)
    LOG             reduce using rule 19 (instruccion -> create_struct newline .)
    LOG10           reduce using rule 19 (instruccion -> create_struct newline .)
    COS             reduce using rule 19 (instruccion -> create_struct newline .)
    SIN             reduce using rule 19 (instruccion -> create_struct newline .)
    TAN             reduce using rule 19 (instruccion -> create_struct newline .)
    SQRT            reduce using rule 19 (instruccion -> create_struct newline .)
    UPPERCASE       reduce using rule 19 (instruccion -> create_struct newline .)
    LOWERCASE       reduce using rule 19 (instruccion -> create_struct newline .)
    STR             reduce using rule 19 (instruccion -> create_struct newline .)
    RANGE           reduce using rule 19 (instruccion -> create_struct newline .)
    FLOAT           reduce using rule 19 (instruccion -> create_struct newline .)
    BOOL            reduce using rule 19 (instruccion -> create_struct newline .)
    INT             reduce using rule 19 (instruccion -> create_struct newline .)
    TRUNC           reduce using rule 19 (instruccion -> create_struct newline .)
    TYPEOF          reduce using rule 19 (instruccion -> create_struct newline .)
    PARSE           reduce using rule 19 (instruccion -> create_struct newline .)
    LEN             reduce using rule 19 (instruccion -> create_struct newline .)
    PUSH            reduce using rule 19 (instruccion -> create_struct newline .)
    POP             reduce using rule 19 (instruccion -> create_struct newline .)
    STRUCT          reduce using rule 19 (instruccion -> create_struct newline .)
    $end            reduce using rule 19 (instruccion -> create_struct newline .)
    END             reduce using rule 19 (instruccion -> create_struct newline .)
    ELSE            reduce using rule 19 (instruccion -> create_struct newline .)
    ELSEIF          reduce using rule 19 (instruccion -> create_struct newline .)


state 70

    (20) instruccion -> declare_struct newline .

    PRINT           reduce using rule 20 (instruccion -> declare_struct newline .)
    PRINTLN         reduce using rule 20 (instruccion -> declare_struct newline .)
    LOCAL           reduce using rule 20 (instruccion -> declare_struct newline .)
    ID              reduce using rule 20 (instruccion -> declare_struct newline .)
    FUNCTION        reduce using rule 20 (instruccion -> declare_struct newline .)
    RETURN          reduce using rule 20 (instruccion -> declare_struct newline .)
    BREAK           reduce using rule 20 (instruccion -> declare_struct newline .)
    CONTINUE        reduce using rule 20 (instruccion -> declare_struct newline .)
    IF              reduce using rule 20 (instruccion -> declare_struct newline .)
    WHILE           reduce using rule 20 (instruccion -> declare_struct newline .)
    FOR             reduce using rule 20 (instruccion -> declare_struct newline .)
    LOG             reduce using rule 20 (instruccion -> declare_struct newline .)
    LOG10           reduce using rule 20 (instruccion -> declare_struct newline .)
    COS             reduce using rule 20 (instruccion -> declare_struct newline .)
    SIN             reduce using rule 20 (instruccion -> declare_struct newline .)
    TAN             reduce using rule 20 (instruccion -> declare_struct newline .)
    SQRT            reduce using rule 20 (instruccion -> declare_struct newline .)
    UPPERCASE       reduce using rule 20 (instruccion -> declare_struct newline .)
    LOWERCASE       reduce using rule 20 (instruccion -> declare_struct newline .)
    STR             reduce using rule 20 (instruccion -> declare_struct newline .)
    RANGE           reduce using rule 20 (instruccion -> declare_struct newline .)
    FLOAT           reduce using rule 20 (instruccion -> declare_struct newline .)
    BOOL            reduce using rule 20 (instruccion -> declare_struct newline .)
    INT             reduce using rule 20 (instruccion -> declare_struct newline .)
    TRUNC           reduce using rule 20 (instruccion -> declare_struct newline .)
    TYPEOF          reduce using rule 20 (instruccion -> declare_struct newline .)
    PARSE           reduce using rule 20 (instruccion -> declare_struct newline .)
    LEN             reduce using rule 20 (instruccion -> declare_struct newline .)
    PUSH            reduce using rule 20 (instruccion -> declare_struct newline .)
    POP             reduce using rule 20 (instruccion -> declare_struct newline .)
    STRUCT          reduce using rule 20 (instruccion -> declare_struct newline .)
    $end            reduce using rule 20 (instruccion -> declare_struct newline .)
    END             reduce using rule 20 (instruccion -> declare_struct newline .)
    ELSE            reduce using rule 20 (instruccion -> declare_struct newline .)
    ELSEIF          reduce using rule 20 (instruccion -> declare_struct newline .)


state 71

    (21) instruccion -> assign_access newline .

    PRINT           reduce using rule 21 (instruccion -> assign_access newline .)
    PRINTLN         reduce using rule 21 (instruccion -> assign_access newline .)
    LOCAL           reduce using rule 21 (instruccion -> assign_access newline .)
    ID              reduce using rule 21 (instruccion -> assign_access newline .)
    FUNCTION        reduce using rule 21 (instruccion -> assign_access newline .)
    RETURN          reduce using rule 21 (instruccion -> assign_access newline .)
    BREAK           reduce using rule 21 (instruccion -> assign_access newline .)
    CONTINUE        reduce using rule 21 (instruccion -> assign_access newline .)
    IF              reduce using rule 21 (instruccion -> assign_access newline .)
    WHILE           reduce using rule 21 (instruccion -> assign_access newline .)
    FOR             reduce using rule 21 (instruccion -> assign_access newline .)
    LOG             reduce using rule 21 (instruccion -> assign_access newline .)
    LOG10           reduce using rule 21 (instruccion -> assign_access newline .)
    COS             reduce using rule 21 (instruccion -> assign_access newline .)
    SIN             reduce using rule 21 (instruccion -> assign_access newline .)
    TAN             reduce using rule 21 (instruccion -> assign_access newline .)
    SQRT            reduce using rule 21 (instruccion -> assign_access newline .)
    UPPERCASE       reduce using rule 21 (instruccion -> assign_access newline .)
    LOWERCASE       reduce using rule 21 (instruccion -> assign_access newline .)
    STR             reduce using rule 21 (instruccion -> assign_access newline .)
    RANGE           reduce using rule 21 (instruccion -> assign_access newline .)
    FLOAT           reduce using rule 21 (instruccion -> assign_access newline .)
    BOOL            reduce using rule 21 (instruccion -> assign_access newline .)
    INT             reduce using rule 21 (instruccion -> assign_access newline .)
    TRUNC           reduce using rule 21 (instruccion -> assign_access newline .)
    TYPEOF          reduce using rule 21 (instruccion -> assign_access newline .)
    PARSE           reduce using rule 21 (instruccion -> assign_access newline .)
    LEN             reduce using rule 21 (instruccion -> assign_access newline .)
    PUSH            reduce using rule 21 (instruccion -> assign_access newline .)
    POP             reduce using rule 21 (instruccion -> assign_access newline .)
    STRUCT          reduce using rule 21 (instruccion -> assign_access newline .)
    $end            reduce using rule 21 (instruccion -> assign_access newline .)
    END             reduce using rule 21 (instruccion -> assign_access newline .)
    ELSE            reduce using rule 21 (instruccion -> assign_access newline .)
    ELSEIF          reduce using rule 21 (instruccion -> assign_access newline .)


state 72

    (72) print_instr -> PRINT PARIZQ . exp_list PARDER
    (89) exp_list -> . exp_list COMA expression
    (90) exp_list -> . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    exp_list                       shift and go to state 121
    expression                     shift and go to state 122
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 73

    (73) println_instr -> PRINTLN PARIZQ . exp_list PARDER
    (89) exp_list -> . exp_list COMA expression
    (90) exp_list -> . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    exp_list                       shift and go to state 123
    expression                     shift and go to state 122
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 74

    (81) definicion_instr -> LOCAL ID .
    (83) asignacion_instr -> LOCAL ID . IGUAL expression
    (85) definicion_asignacion_instr -> LOCAL ID . IGUAL expression DOSP tipo

    newline         reduce using rule 81 (definicion_instr -> LOCAL ID .)
    IGUAL           shift and go to state 124


state 75

    (82) asignacion_instr -> ID IGUAL . expression
    (84) definicion_asignacion_instr -> ID IGUAL . expression DOSP tipo
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 125
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 76

    (86) asignacion_arreglo_instr -> ID index_list . IGUAL expression
    (91) index_list -> index_list . CORCHETEIZQ expression CORCHETEDER

    IGUAL           shift and go to state 126
    CORCHETEIZQ     shift and go to state 127


state 77

    (118) declare_struct -> ID DOSP . DOSP ID

    DOSP            shift and go to state 128


state 78

    (87) call_function -> ID PARIZQ . PARDER
    (88) call_function -> ID PARIZQ . exp_list PARDER
    (89) exp_list -> . exp_list COMA expression
    (90) exp_list -> . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    PARDER          shift and go to state 129
    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    exp_list                       shift and go to state 130
    expression                     shift and go to state 122
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 79

    (119) assign_access -> ID PUNTO . ID IGUAL expression

    ID              shift and go to state 131


state 80

    (92) index_list -> CORCHETEIZQ . expression CORCHETEDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 132
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 81

    (94) declare_function -> FUNCTION ID . PARIZQ dec_params PARDER DOSP newline statement END
    (95) declare_function -> FUNCTION ID . PARIZQ PARDER DOSP newline statement END

    PARIZQ          shift and go to state 133


state 82

    (114) return_state -> RETURN expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    newline         reduce using rule 114 (return_state -> RETURN expression .)
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 83

    (22) expression -> MENOS . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 148
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 84

    (23) expression -> NOT . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 149
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 85

    (38) expression -> final_expression .

    MAS             reduce using rule 38 (expression -> final_expression .)
    MENOS           reduce using rule 38 (expression -> final_expression .)
    POR             reduce using rule 38 (expression -> final_expression .)
    DIVIDIDO        reduce using rule 38 (expression -> final_expression .)
    POTENCIA        reduce using rule 38 (expression -> final_expression .)
    MODULO          reduce using rule 38 (expression -> final_expression .)
    MAYQUE          reduce using rule 38 (expression -> final_expression .)
    MENQUE          reduce using rule 38 (expression -> final_expression .)
    MENIGUALQUE     reduce using rule 38 (expression -> final_expression .)
    MAYIGUALQUE     reduce using rule 38 (expression -> final_expression .)
    IGUALQUE        reduce using rule 38 (expression -> final_expression .)
    NIGUALQUE       reduce using rule 38 (expression -> final_expression .)
    OR              reduce using rule 38 (expression -> final_expression .)
    AND             reduce using rule 38 (expression -> final_expression .)
    newline         reduce using rule 38 (expression -> final_expression .)
    DOSP            reduce using rule 38 (expression -> final_expression .)
    PARDER          reduce using rule 38 (expression -> final_expression .)
    COMA            reduce using rule 38 (expression -> final_expression .)
    CORCHETEDER     reduce using rule 38 (expression -> final_expression .)


state 86

    (39) final_expression -> PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 150
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 87

    (40) final_expression -> CORCHETEIZQ . exp_list CORCHETEDER
    (89) exp_list -> . exp_list COMA expression
    (90) exp_list -> . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    exp_list                       shift and go to state 151
    expression                     shift and go to state 122
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 88

    (41) final_expression -> DECIMAL .

    MAS             reduce using rule 41 (final_expression -> DECIMAL .)
    MENOS           reduce using rule 41 (final_expression -> DECIMAL .)
    POR             reduce using rule 41 (final_expression -> DECIMAL .)
    DIVIDIDO        reduce using rule 41 (final_expression -> DECIMAL .)
    POTENCIA        reduce using rule 41 (final_expression -> DECIMAL .)
    MODULO          reduce using rule 41 (final_expression -> DECIMAL .)
    MAYQUE          reduce using rule 41 (final_expression -> DECIMAL .)
    MENQUE          reduce using rule 41 (final_expression -> DECIMAL .)
    MENIGUALQUE     reduce using rule 41 (final_expression -> DECIMAL .)
    MAYIGUALQUE     reduce using rule 41 (final_expression -> DECIMAL .)
    IGUALQUE        reduce using rule 41 (final_expression -> DECIMAL .)
    NIGUALQUE       reduce using rule 41 (final_expression -> DECIMAL .)
    OR              reduce using rule 41 (final_expression -> DECIMAL .)
    AND             reduce using rule 41 (final_expression -> DECIMAL .)
    newline         reduce using rule 41 (final_expression -> DECIMAL .)
    DOSP            reduce using rule 41 (final_expression -> DECIMAL .)
    PARDER          reduce using rule 41 (final_expression -> DECIMAL .)
    COMA            reduce using rule 41 (final_expression -> DECIMAL .)
    CORCHETEDER     reduce using rule 41 (final_expression -> DECIMAL .)


state 89

    (42) final_expression -> ENTERO .

    MAS             reduce using rule 42 (final_expression -> ENTERO .)
    MENOS           reduce using rule 42 (final_expression -> ENTERO .)
    POR             reduce using rule 42 (final_expression -> ENTERO .)
    DIVIDIDO        reduce using rule 42 (final_expression -> ENTERO .)
    POTENCIA        reduce using rule 42 (final_expression -> ENTERO .)
    MODULO          reduce using rule 42 (final_expression -> ENTERO .)
    MAYQUE          reduce using rule 42 (final_expression -> ENTERO .)
    MENQUE          reduce using rule 42 (final_expression -> ENTERO .)
    MENIGUALQUE     reduce using rule 42 (final_expression -> ENTERO .)
    MAYIGUALQUE     reduce using rule 42 (final_expression -> ENTERO .)
    IGUALQUE        reduce using rule 42 (final_expression -> ENTERO .)
    NIGUALQUE       reduce using rule 42 (final_expression -> ENTERO .)
    OR              reduce using rule 42 (final_expression -> ENTERO .)
    AND             reduce using rule 42 (final_expression -> ENTERO .)
    newline         reduce using rule 42 (final_expression -> ENTERO .)
    DOSP            reduce using rule 42 (final_expression -> ENTERO .)
    PARDER          reduce using rule 42 (final_expression -> ENTERO .)
    COMA            reduce using rule 42 (final_expression -> ENTERO .)
    CORCHETEDER     reduce using rule 42 (final_expression -> ENTERO .)


state 90

    (43) final_expression -> CADENA .

    MAS             reduce using rule 43 (final_expression -> CADENA .)
    MENOS           reduce using rule 43 (final_expression -> CADENA .)
    POR             reduce using rule 43 (final_expression -> CADENA .)
    DIVIDIDO        reduce using rule 43 (final_expression -> CADENA .)
    POTENCIA        reduce using rule 43 (final_expression -> CADENA .)
    MODULO          reduce using rule 43 (final_expression -> CADENA .)
    MAYQUE          reduce using rule 43 (final_expression -> CADENA .)
    MENQUE          reduce using rule 43 (final_expression -> CADENA .)
    MENIGUALQUE     reduce using rule 43 (final_expression -> CADENA .)
    MAYIGUALQUE     reduce using rule 43 (final_expression -> CADENA .)
    IGUALQUE        reduce using rule 43 (final_expression -> CADENA .)
    NIGUALQUE       reduce using rule 43 (final_expression -> CADENA .)
    OR              reduce using rule 43 (final_expression -> CADENA .)
    AND             reduce using rule 43 (final_expression -> CADENA .)
    newline         reduce using rule 43 (final_expression -> CADENA .)
    DOSP            reduce using rule 43 (final_expression -> CADENA .)
    PARDER          reduce using rule 43 (final_expression -> CADENA .)
    COMA            reduce using rule 43 (final_expression -> CADENA .)
    CORCHETEDER     reduce using rule 43 (final_expression -> CADENA .)


state 91

    (44) final_expression -> CARACTER .

    MAS             reduce using rule 44 (final_expression -> CARACTER .)
    MENOS           reduce using rule 44 (final_expression -> CARACTER .)
    POR             reduce using rule 44 (final_expression -> CARACTER .)
    DIVIDIDO        reduce using rule 44 (final_expression -> CARACTER .)
    POTENCIA        reduce using rule 44 (final_expression -> CARACTER .)
    MODULO          reduce using rule 44 (final_expression -> CARACTER .)
    MAYQUE          reduce using rule 44 (final_expression -> CARACTER .)
    MENQUE          reduce using rule 44 (final_expression -> CARACTER .)
    MENIGUALQUE     reduce using rule 44 (final_expression -> CARACTER .)
    MAYIGUALQUE     reduce using rule 44 (final_expression -> CARACTER .)
    IGUALQUE        reduce using rule 44 (final_expression -> CARACTER .)
    NIGUALQUE       reduce using rule 44 (final_expression -> CARACTER .)
    OR              reduce using rule 44 (final_expression -> CARACTER .)
    AND             reduce using rule 44 (final_expression -> CARACTER .)
    newline         reduce using rule 44 (final_expression -> CARACTER .)
    DOSP            reduce using rule 44 (final_expression -> CARACTER .)
    PARDER          reduce using rule 44 (final_expression -> CARACTER .)
    COMA            reduce using rule 44 (final_expression -> CARACTER .)
    CORCHETEDER     reduce using rule 44 (final_expression -> CARACTER .)


state 92

    (45) final_expression -> ID .
    (46) final_expression -> ID . index_list
    (87) call_function -> ID . PARIZQ PARDER
    (88) call_function -> ID . PARIZQ exp_list PARDER
    (120) access_struct -> ID . PUNTO ID
    (91) index_list -> . index_list CORCHETEIZQ expression CORCHETEDER
    (92) index_list -> . CORCHETEIZQ expression CORCHETEDER

    MAS             reduce using rule 45 (final_expression -> ID .)
    MENOS           reduce using rule 45 (final_expression -> ID .)
    POR             reduce using rule 45 (final_expression -> ID .)
    DIVIDIDO        reduce using rule 45 (final_expression -> ID .)
    POTENCIA        reduce using rule 45 (final_expression -> ID .)
    MODULO          reduce using rule 45 (final_expression -> ID .)
    MAYQUE          reduce using rule 45 (final_expression -> ID .)
    MENQUE          reduce using rule 45 (final_expression -> ID .)
    MENIGUALQUE     reduce using rule 45 (final_expression -> ID .)
    MAYIGUALQUE     reduce using rule 45 (final_expression -> ID .)
    IGUALQUE        reduce using rule 45 (final_expression -> ID .)
    NIGUALQUE       reduce using rule 45 (final_expression -> ID .)
    OR              reduce using rule 45 (final_expression -> ID .)
    AND             reduce using rule 45 (final_expression -> ID .)
    newline         reduce using rule 45 (final_expression -> ID .)
    DOSP            reduce using rule 45 (final_expression -> ID .)
    PARDER          reduce using rule 45 (final_expression -> ID .)
    COMA            reduce using rule 45 (final_expression -> ID .)
    CORCHETEDER     reduce using rule 45 (final_expression -> ID .)
    PARIZQ          shift and go to state 78
    PUNTO           shift and go to state 153
    CORCHETEIZQ     shift and go to state 80

    index_list                     shift and go to state 152

state 93

    (47) final_expression -> TRUE .

    MAS             reduce using rule 47 (final_expression -> TRUE .)
    MENOS           reduce using rule 47 (final_expression -> TRUE .)
    POR             reduce using rule 47 (final_expression -> TRUE .)
    DIVIDIDO        reduce using rule 47 (final_expression -> TRUE .)
    POTENCIA        reduce using rule 47 (final_expression -> TRUE .)
    MODULO          reduce using rule 47 (final_expression -> TRUE .)
    MAYQUE          reduce using rule 47 (final_expression -> TRUE .)
    MENQUE          reduce using rule 47 (final_expression -> TRUE .)
    MENIGUALQUE     reduce using rule 47 (final_expression -> TRUE .)
    MAYIGUALQUE     reduce using rule 47 (final_expression -> TRUE .)
    IGUALQUE        reduce using rule 47 (final_expression -> TRUE .)
    NIGUALQUE       reduce using rule 47 (final_expression -> TRUE .)
    OR              reduce using rule 47 (final_expression -> TRUE .)
    AND             reduce using rule 47 (final_expression -> TRUE .)
    newline         reduce using rule 47 (final_expression -> TRUE .)
    DOSP            reduce using rule 47 (final_expression -> TRUE .)
    PARDER          reduce using rule 47 (final_expression -> TRUE .)
    COMA            reduce using rule 47 (final_expression -> TRUE .)
    CORCHETEDER     reduce using rule 47 (final_expression -> TRUE .)


state 94

    (48) final_expression -> FALSE .

    MAS             reduce using rule 48 (final_expression -> FALSE .)
    MENOS           reduce using rule 48 (final_expression -> FALSE .)
    POR             reduce using rule 48 (final_expression -> FALSE .)
    DIVIDIDO        reduce using rule 48 (final_expression -> FALSE .)
    POTENCIA        reduce using rule 48 (final_expression -> FALSE .)
    MODULO          reduce using rule 48 (final_expression -> FALSE .)
    MAYQUE          reduce using rule 48 (final_expression -> FALSE .)
    MENQUE          reduce using rule 48 (final_expression -> FALSE .)
    MENIGUALQUE     reduce using rule 48 (final_expression -> FALSE .)
    MAYIGUALQUE     reduce using rule 48 (final_expression -> FALSE .)
    IGUALQUE        reduce using rule 48 (final_expression -> FALSE .)
    NIGUALQUE       reduce using rule 48 (final_expression -> FALSE .)
    OR              reduce using rule 48 (final_expression -> FALSE .)
    AND             reduce using rule 48 (final_expression -> FALSE .)
    newline         reduce using rule 48 (final_expression -> FALSE .)
    DOSP            reduce using rule 48 (final_expression -> FALSE .)
    PARDER          reduce using rule 48 (final_expression -> FALSE .)
    COMA            reduce using rule 48 (final_expression -> FALSE .)
    CORCHETEDER     reduce using rule 48 (final_expression -> FALSE .)


state 95

    (49) final_expression -> call_function .

    MAS             reduce using rule 49 (final_expression -> call_function .)
    MENOS           reduce using rule 49 (final_expression -> call_function .)
    POR             reduce using rule 49 (final_expression -> call_function .)
    DIVIDIDO        reduce using rule 49 (final_expression -> call_function .)
    POTENCIA        reduce using rule 49 (final_expression -> call_function .)
    MODULO          reduce using rule 49 (final_expression -> call_function .)
    MAYQUE          reduce using rule 49 (final_expression -> call_function .)
    MENQUE          reduce using rule 49 (final_expression -> call_function .)
    MENIGUALQUE     reduce using rule 49 (final_expression -> call_function .)
    MAYIGUALQUE     reduce using rule 49 (final_expression -> call_function .)
    IGUALQUE        reduce using rule 49 (final_expression -> call_function .)
    NIGUALQUE       reduce using rule 49 (final_expression -> call_function .)
    OR              reduce using rule 49 (final_expression -> call_function .)
    AND             reduce using rule 49 (final_expression -> call_function .)
    newline         reduce using rule 49 (final_expression -> call_function .)
    DOSP            reduce using rule 49 (final_expression -> call_function .)
    PARDER          reduce using rule 49 (final_expression -> call_function .)
    COMA            reduce using rule 49 (final_expression -> call_function .)
    CORCHETEDER     reduce using rule 49 (final_expression -> call_function .)


state 96

    (50) final_expression -> access_struct .

    MAS             reduce using rule 50 (final_expression -> access_struct .)
    MENOS           reduce using rule 50 (final_expression -> access_struct .)
    POR             reduce using rule 50 (final_expression -> access_struct .)
    DIVIDIDO        reduce using rule 50 (final_expression -> access_struct .)
    POTENCIA        reduce using rule 50 (final_expression -> access_struct .)
    MODULO          reduce using rule 50 (final_expression -> access_struct .)
    MAYQUE          reduce using rule 50 (final_expression -> access_struct .)
    MENQUE          reduce using rule 50 (final_expression -> access_struct .)
    MENIGUALQUE     reduce using rule 50 (final_expression -> access_struct .)
    MAYIGUALQUE     reduce using rule 50 (final_expression -> access_struct .)
    IGUALQUE        reduce using rule 50 (final_expression -> access_struct .)
    NIGUALQUE       reduce using rule 50 (final_expression -> access_struct .)
    OR              reduce using rule 50 (final_expression -> access_struct .)
    AND             reduce using rule 50 (final_expression -> access_struct .)
    newline         reduce using rule 50 (final_expression -> access_struct .)
    DOSP            reduce using rule 50 (final_expression -> access_struct .)
    PARDER          reduce using rule 50 (final_expression -> access_struct .)
    COMA            reduce using rule 50 (final_expression -> access_struct .)
    CORCHETEDER     reduce using rule 50 (final_expression -> access_struct .)


state 97

    (51) final_expression -> nativas .

    MAS             reduce using rule 51 (final_expression -> nativas .)
    MENOS           reduce using rule 51 (final_expression -> nativas .)
    POR             reduce using rule 51 (final_expression -> nativas .)
    DIVIDIDO        reduce using rule 51 (final_expression -> nativas .)
    POTENCIA        reduce using rule 51 (final_expression -> nativas .)
    MODULO          reduce using rule 51 (final_expression -> nativas .)
    MAYQUE          reduce using rule 51 (final_expression -> nativas .)
    MENQUE          reduce using rule 51 (final_expression -> nativas .)
    MENIGUALQUE     reduce using rule 51 (final_expression -> nativas .)
    MAYIGUALQUE     reduce using rule 51 (final_expression -> nativas .)
    IGUALQUE        reduce using rule 51 (final_expression -> nativas .)
    NIGUALQUE       reduce using rule 51 (final_expression -> nativas .)
    OR              reduce using rule 51 (final_expression -> nativas .)
    AND             reduce using rule 51 (final_expression -> nativas .)
    newline         reduce using rule 51 (final_expression -> nativas .)
    DOSP            reduce using rule 51 (final_expression -> nativas .)
    PARDER          reduce using rule 51 (final_expression -> nativas .)
    COMA            reduce using rule 51 (final_expression -> nativas .)
    CORCHETEDER     reduce using rule 51 (final_expression -> nativas .)


state 98

    (102) if_state -> IF expression . DOSP newline statement END
    (103) if_state -> IF expression . DOSP newline statement ELSE DOSP newline statement END
    (104) if_state -> IF expression . DOSP newline statement else_if_list END
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    DOSP            shift and go to state 154
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 99

    (108) while_state -> WHILE expression . DOSP newline statement END
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    DOSP            shift and go to state 155
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 100

    (109) for_state -> FOR ID . IN expression DOSP expression DOSP newline statement END
    (110) for_state -> FOR ID . IN expression DOSP newline statement END

    IN              shift and go to state 156


state 101

    (52) nativas -> LOG PARIZQ . ENTERO COMA expression PARDER

    ENTERO          shift and go to state 157


state 102

    (53) nativas -> LOG10 PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 158
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 103

    (54) nativas -> COS PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 159
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 104

    (55) nativas -> SIN PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 160
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 105

    (56) nativas -> TAN PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 161
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 106

    (57) nativas -> SQRT PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 162
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 107

    (58) nativas -> UPPERCASE PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 163
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 108

    (59) nativas -> LOWERCASE PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 164
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 109

    (60) nativas -> STR PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 165
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 110

    (61) nativas -> RANGE PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 166
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 111

    (62) nativas -> FLOAT PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 167
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 112

    (63) nativas -> BOOL PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 168
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 113

    (64) nativas -> INT PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 169
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 114

    (65) nativas -> TRUNC PARIZQ . INT COMA expression PARDER
    (66) nativas -> TRUNC PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    INT             shift and go to state 170
    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 171
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 115

    (67) nativas -> TYPEOF PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 172
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 116

    (68) nativas -> PARSE PARIZQ . tipo COMA expression PARDER
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . CHAR
    (78) tipo -> . STRING
    (79) tipo -> . ARRAY
    (80) tipo -> . NOTHING

    INT             shift and go to state 174
    FLOAT           shift and go to state 175
    BOOL            shift and go to state 176
    CHAR            shift and go to state 177
    STRING          shift and go to state 178
    ARRAY           shift and go to state 179
    NOTHING         shift and go to state 180

    tipo                           shift and go to state 173

state 117

    (69) nativas -> LEN PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 181
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 118

    (70) nativas -> PUSH PARIZQ . expression COMA expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 182
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 119

    (71) nativas -> POP PARIZQ . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 183
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 120

    (115) create_struct -> STRUCT ID . DOSP newline attList END

    DOSP            shift and go to state 184


state 121

    (72) print_instr -> PRINT PARIZQ exp_list . PARDER
    (89) exp_list -> exp_list . COMA expression

    PARDER          shift and go to state 185
    COMA            shift and go to state 186


state 122

    (90) exp_list -> expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          reduce using rule 90 (exp_list -> expression .)
    COMA            reduce using rule 90 (exp_list -> expression .)
    CORCHETEDER     reduce using rule 90 (exp_list -> expression .)
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 123

    (73) println_instr -> PRINTLN PARIZQ exp_list . PARDER
    (89) exp_list -> exp_list . COMA expression

    PARDER          shift and go to state 187
    COMA            shift and go to state 186


state 124

    (83) asignacion_instr -> LOCAL ID IGUAL . expression
    (85) definicion_asignacion_instr -> LOCAL ID IGUAL . expression DOSP tipo
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 188
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 125

    (82) asignacion_instr -> ID IGUAL expression .
    (84) definicion_asignacion_instr -> ID IGUAL expression . DOSP tipo
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    newline         reduce using rule 82 (asignacion_instr -> ID IGUAL expression .)
    DOSP            shift and go to state 189
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 126

    (86) asignacion_arreglo_instr -> ID index_list IGUAL . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 190
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 127

    (91) index_list -> index_list CORCHETEIZQ . expression CORCHETEDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 191
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 128

    (118) declare_struct -> ID DOSP DOSP . ID

    ID              shift and go to state 192


state 129

    (87) call_function -> ID PARIZQ PARDER .

    newline         reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    MAS             reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    MENOS           reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    POR             reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    POTENCIA        reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    MODULO          reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    MAYQUE          reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    MENQUE          reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    MENIGUALQUE     reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    MAYIGUALQUE     reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    IGUALQUE        reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    NIGUALQUE       reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    OR              reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    AND             reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    DOSP            reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    PARDER          reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    COMA            reduce using rule 87 (call_function -> ID PARIZQ PARDER .)
    CORCHETEDER     reduce using rule 87 (call_function -> ID PARIZQ PARDER .)


state 130

    (88) call_function -> ID PARIZQ exp_list . PARDER
    (89) exp_list -> exp_list . COMA expression

    PARDER          shift and go to state 193
    COMA            shift and go to state 186


state 131

    (119) assign_access -> ID PUNTO ID . IGUAL expression

    IGUAL           shift and go to state 194


state 132

    (92) index_list -> CORCHETEIZQ expression . CORCHETEDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    CORCHETEDER     shift and go to state 195
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 133

    (94) declare_function -> FUNCTION ID PARIZQ . dec_params PARDER DOSP newline statement END
    (95) declare_function -> FUNCTION ID PARIZQ . PARDER DOSP newline statement END
    (96) dec_params -> . dec_params COMA ID DOSP DOSP tipo
    (97) dec_params -> . dec_params COMA ID DOSP DOSP ID
    (98) dec_params -> . dec_params COMA ID
    (99) dec_params -> . ID DOSP DOSP tipo
    (100) dec_params -> . ID DOSP DOSP ID
    (101) dec_params -> . ID

    PARDER          shift and go to state 198
    ID              shift and go to state 196

    dec_params                     shift and go to state 197

state 134

    (24) expression -> expression MAS . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 199
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 135

    (25) expression -> expression MENOS . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 200
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 136

    (26) expression -> expression POR . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 201
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 137

    (27) expression -> expression DIVIDIDO . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 202
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 138

    (28) expression -> expression POTENCIA . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 203
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 139

    (29) expression -> expression MODULO . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 204
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 140

    (30) expression -> expression MAYQUE . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 205
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 141

    (31) expression -> expression MENQUE . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 206
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 142

    (32) expression -> expression MENIGUALQUE . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 207
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 143

    (33) expression -> expression MAYIGUALQUE . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 208
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 144

    (34) expression -> expression IGUALQUE . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 209
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 145

    (35) expression -> expression NIGUALQUE . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 210
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 146

    (36) expression -> expression OR . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 211
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 147

    (37) expression -> expression AND . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 212
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 148

    (22) expression -> MENOS expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 22 (expression -> MENOS expression .)
    MENOS           reduce using rule 22 (expression -> MENOS expression .)
    POR             reduce using rule 22 (expression -> MENOS expression .)
    DIVIDIDO        reduce using rule 22 (expression -> MENOS expression .)
    POTENCIA        reduce using rule 22 (expression -> MENOS expression .)
    MODULO          reduce using rule 22 (expression -> MENOS expression .)
    MAYQUE          reduce using rule 22 (expression -> MENOS expression .)
    MENQUE          reduce using rule 22 (expression -> MENOS expression .)
    MENIGUALQUE     reduce using rule 22 (expression -> MENOS expression .)
    MAYIGUALQUE     reduce using rule 22 (expression -> MENOS expression .)
    IGUALQUE        reduce using rule 22 (expression -> MENOS expression .)
    NIGUALQUE       reduce using rule 22 (expression -> MENOS expression .)
    OR              reduce using rule 22 (expression -> MENOS expression .)
    AND             reduce using rule 22 (expression -> MENOS expression .)
    newline         reduce using rule 22 (expression -> MENOS expression .)
    DOSP            reduce using rule 22 (expression -> MENOS expression .)
    PARDER          reduce using rule 22 (expression -> MENOS expression .)
    COMA            reduce using rule 22 (expression -> MENOS expression .)
    CORCHETEDER     reduce using rule 22 (expression -> MENOS expression .)

  ! MAS             [ shift and go to state 134 ]
  ! MENOS           [ shift and go to state 135 ]
  ! POR             [ shift and go to state 136 ]
  ! DIVIDIDO        [ shift and go to state 137 ]
  ! POTENCIA        [ shift and go to state 138 ]
  ! MODULO          [ shift and go to state 139 ]
  ! MAYQUE          [ shift and go to state 140 ]
  ! MENQUE          [ shift and go to state 141 ]
  ! MENIGUALQUE     [ shift and go to state 142 ]
  ! MAYIGUALQUE     [ shift and go to state 143 ]
  ! IGUALQUE        [ shift and go to state 144 ]
  ! NIGUALQUE       [ shift and go to state 145 ]
  ! OR              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 147 ]


state 149

    (23) expression -> NOT expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 23 (expression -> NOT expression .)
    MENOS           reduce using rule 23 (expression -> NOT expression .)
    POR             reduce using rule 23 (expression -> NOT expression .)
    DIVIDIDO        reduce using rule 23 (expression -> NOT expression .)
    POTENCIA        reduce using rule 23 (expression -> NOT expression .)
    MODULO          reduce using rule 23 (expression -> NOT expression .)
    MAYQUE          reduce using rule 23 (expression -> NOT expression .)
    MENQUE          reduce using rule 23 (expression -> NOT expression .)
    MENIGUALQUE     reduce using rule 23 (expression -> NOT expression .)
    MAYIGUALQUE     reduce using rule 23 (expression -> NOT expression .)
    IGUALQUE        reduce using rule 23 (expression -> NOT expression .)
    NIGUALQUE       reduce using rule 23 (expression -> NOT expression .)
    OR              reduce using rule 23 (expression -> NOT expression .)
    AND             reduce using rule 23 (expression -> NOT expression .)
    newline         reduce using rule 23 (expression -> NOT expression .)
    DOSP            reduce using rule 23 (expression -> NOT expression .)
    PARDER          reduce using rule 23 (expression -> NOT expression .)
    COMA            reduce using rule 23 (expression -> NOT expression .)
    CORCHETEDER     reduce using rule 23 (expression -> NOT expression .)

  ! MAS             [ shift and go to state 134 ]
  ! MENOS           [ shift and go to state 135 ]
  ! POR             [ shift and go to state 136 ]
  ! DIVIDIDO        [ shift and go to state 137 ]
  ! POTENCIA        [ shift and go to state 138 ]
  ! MODULO          [ shift and go to state 139 ]
  ! MAYQUE          [ shift and go to state 140 ]
  ! MENQUE          [ shift and go to state 141 ]
  ! MENIGUALQUE     [ shift and go to state 142 ]
  ! MAYIGUALQUE     [ shift and go to state 143 ]
  ! IGUALQUE        [ shift and go to state 144 ]
  ! NIGUALQUE       [ shift and go to state 145 ]
  ! OR              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 147 ]


state 150

    (39) final_expression -> PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 213
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 151

    (40) final_expression -> CORCHETEIZQ exp_list . CORCHETEDER
    (89) exp_list -> exp_list . COMA expression

    CORCHETEDER     shift and go to state 214
    COMA            shift and go to state 186


state 152

    (46) final_expression -> ID index_list .
    (91) index_list -> index_list . CORCHETEIZQ expression CORCHETEDER

    MAS             reduce using rule 46 (final_expression -> ID index_list .)
    MENOS           reduce using rule 46 (final_expression -> ID index_list .)
    POR             reduce using rule 46 (final_expression -> ID index_list .)
    DIVIDIDO        reduce using rule 46 (final_expression -> ID index_list .)
    POTENCIA        reduce using rule 46 (final_expression -> ID index_list .)
    MODULO          reduce using rule 46 (final_expression -> ID index_list .)
    MAYQUE          reduce using rule 46 (final_expression -> ID index_list .)
    MENQUE          reduce using rule 46 (final_expression -> ID index_list .)
    MENIGUALQUE     reduce using rule 46 (final_expression -> ID index_list .)
    MAYIGUALQUE     reduce using rule 46 (final_expression -> ID index_list .)
    IGUALQUE        reduce using rule 46 (final_expression -> ID index_list .)
    NIGUALQUE       reduce using rule 46 (final_expression -> ID index_list .)
    OR              reduce using rule 46 (final_expression -> ID index_list .)
    AND             reduce using rule 46 (final_expression -> ID index_list .)
    newline         reduce using rule 46 (final_expression -> ID index_list .)
    DOSP            reduce using rule 46 (final_expression -> ID index_list .)
    PARDER          reduce using rule 46 (final_expression -> ID index_list .)
    COMA            reduce using rule 46 (final_expression -> ID index_list .)
    CORCHETEDER     reduce using rule 46 (final_expression -> ID index_list .)
    CORCHETEIZQ     shift and go to state 127


state 153

    (120) access_struct -> ID PUNTO . ID

    ID              shift and go to state 215


state 154

    (102) if_state -> IF expression DOSP . newline statement END
    (103) if_state -> IF expression DOSP . newline statement ELSE DOSP newline statement END
    (104) if_state -> IF expression DOSP . newline statement else_if_list END

    newline         shift and go to state 216


state 155

    (108) while_state -> WHILE expression DOSP . newline statement END

    newline         shift and go to state 217


state 156

    (109) for_state -> FOR ID IN . expression DOSP expression DOSP newline statement END
    (110) for_state -> FOR ID IN . expression DOSP newline statement END
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 218
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 157

    (52) nativas -> LOG PARIZQ ENTERO . COMA expression PARDER

    COMA            shift and go to state 219


state 158

    (53) nativas -> LOG10 PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 220
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 159

    (54) nativas -> COS PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 221
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 160

    (55) nativas -> SIN PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 222
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 161

    (56) nativas -> TAN PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 223
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 162

    (57) nativas -> SQRT PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 224
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 163

    (58) nativas -> UPPERCASE PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 225
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 164

    (59) nativas -> LOWERCASE PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 226
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 165

    (60) nativas -> STR PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 227
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 166

    (61) nativas -> RANGE PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 228
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 167

    (62) nativas -> FLOAT PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 229
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 168

    (63) nativas -> BOOL PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 230
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 169

    (64) nativas -> INT PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 231
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 170

    (65) nativas -> TRUNC PARIZQ INT . COMA expression PARDER
    (64) nativas -> INT . PARIZQ expression PARDER

    COMA            shift and go to state 232
    PARIZQ          shift and go to state 113


state 171

    (66) nativas -> TRUNC PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 233
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 172

    (67) nativas -> TYPEOF PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 234
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 173

    (68) nativas -> PARSE PARIZQ tipo . COMA expression PARDER

    COMA            shift and go to state 235


state 174

    (74) tipo -> INT .

    COMA            reduce using rule 74 (tipo -> INT .)
    newline         reduce using rule 74 (tipo -> INT .)
    PARDER          reduce using rule 74 (tipo -> INT .)
    PTCOMA          reduce using rule 74 (tipo -> INT .)


state 175

    (75) tipo -> FLOAT .

    COMA            reduce using rule 75 (tipo -> FLOAT .)
    newline         reduce using rule 75 (tipo -> FLOAT .)
    PARDER          reduce using rule 75 (tipo -> FLOAT .)
    PTCOMA          reduce using rule 75 (tipo -> FLOAT .)


state 176

    (76) tipo -> BOOL .

    COMA            reduce using rule 76 (tipo -> BOOL .)
    newline         reduce using rule 76 (tipo -> BOOL .)
    PARDER          reduce using rule 76 (tipo -> BOOL .)
    PTCOMA          reduce using rule 76 (tipo -> BOOL .)


state 177

    (77) tipo -> CHAR .

    COMA            reduce using rule 77 (tipo -> CHAR .)
    newline         reduce using rule 77 (tipo -> CHAR .)
    PARDER          reduce using rule 77 (tipo -> CHAR .)
    PTCOMA          reduce using rule 77 (tipo -> CHAR .)


state 178

    (78) tipo -> STRING .

    COMA            reduce using rule 78 (tipo -> STRING .)
    newline         reduce using rule 78 (tipo -> STRING .)
    PARDER          reduce using rule 78 (tipo -> STRING .)
    PTCOMA          reduce using rule 78 (tipo -> STRING .)


state 179

    (79) tipo -> ARRAY .

    COMA            reduce using rule 79 (tipo -> ARRAY .)
    newline         reduce using rule 79 (tipo -> ARRAY .)
    PARDER          reduce using rule 79 (tipo -> ARRAY .)
    PTCOMA          reduce using rule 79 (tipo -> ARRAY .)


state 180

    (80) tipo -> NOTHING .

    COMA            reduce using rule 80 (tipo -> NOTHING .)
    newline         reduce using rule 80 (tipo -> NOTHING .)
    PARDER          reduce using rule 80 (tipo -> NOTHING .)
    PTCOMA          reduce using rule 80 (tipo -> NOTHING .)


state 181

    (69) nativas -> LEN PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 236
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 182

    (70) nativas -> PUSH PARIZQ expression . COMA expression PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    COMA            shift and go to state 237
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 183

    (71) nativas -> POP PARIZQ expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 238
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 184

    (115) create_struct -> STRUCT ID DOSP . newline attList END

    newline         shift and go to state 239


state 185

    (72) print_instr -> PRINT PARIZQ exp_list PARDER .

    newline         reduce using rule 72 (print_instr -> PRINT PARIZQ exp_list PARDER .)


state 186

    (89) exp_list -> exp_list COMA . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 240
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 187

    (73) println_instr -> PRINTLN PARIZQ exp_list PARDER .

    newline         reduce using rule 73 (println_instr -> PRINTLN PARIZQ exp_list PARDER .)


state 188

    (83) asignacion_instr -> LOCAL ID IGUAL expression .
    (85) definicion_asignacion_instr -> LOCAL ID IGUAL expression . DOSP tipo
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    newline         reduce using rule 83 (asignacion_instr -> LOCAL ID IGUAL expression .)
    DOSP            shift and go to state 241
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 189

    (84) definicion_asignacion_instr -> ID IGUAL expression DOSP . tipo
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . CHAR
    (78) tipo -> . STRING
    (79) tipo -> . ARRAY
    (80) tipo -> . NOTHING

    INT             shift and go to state 174
    FLOAT           shift and go to state 175
    BOOL            shift and go to state 176
    CHAR            shift and go to state 177
    STRING          shift and go to state 178
    ARRAY           shift and go to state 179
    NOTHING         shift and go to state 180

    tipo                           shift and go to state 242

state 190

    (86) asignacion_arreglo_instr -> ID index_list IGUAL expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    newline         reduce using rule 86 (asignacion_arreglo_instr -> ID index_list IGUAL expression .)
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 191

    (91) index_list -> index_list CORCHETEIZQ expression . CORCHETEDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    CORCHETEDER     shift and go to state 243
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 192

    (118) declare_struct -> ID DOSP DOSP ID .

    newline         reduce using rule 118 (declare_struct -> ID DOSP DOSP ID .)


state 193

    (88) call_function -> ID PARIZQ exp_list PARDER .

    newline         reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    MAS             reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    MENOS           reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    POR             reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    DIVIDIDO        reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    POTENCIA        reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    MODULO          reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    MAYQUE          reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    MENQUE          reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    MENIGUALQUE     reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    MAYIGUALQUE     reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    IGUALQUE        reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    NIGUALQUE       reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    OR              reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    AND             reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    DOSP            reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    PARDER          reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    COMA            reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)
    CORCHETEDER     reduce using rule 88 (call_function -> ID PARIZQ exp_list PARDER .)


state 194

    (119) assign_access -> ID PUNTO ID IGUAL . expression
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 244
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 195

    (92) index_list -> CORCHETEIZQ expression CORCHETEDER .

    IGUAL           reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    CORCHETEIZQ     reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    MAS             reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    MENOS           reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    POR             reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    DIVIDIDO        reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    POTENCIA        reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    MODULO          reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    MAYQUE          reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    MENQUE          reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    MENIGUALQUE     reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    MAYIGUALQUE     reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    IGUALQUE        reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    NIGUALQUE       reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    OR              reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    AND             reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    newline         reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    DOSP            reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    PARDER          reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    COMA            reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)
    CORCHETEDER     reduce using rule 92 (index_list -> CORCHETEIZQ expression CORCHETEDER .)


state 196

    (99) dec_params -> ID . DOSP DOSP tipo
    (100) dec_params -> ID . DOSP DOSP ID
    (101) dec_params -> ID .

    DOSP            shift and go to state 245
    PARDER          reduce using rule 101 (dec_params -> ID .)
    COMA            reduce using rule 101 (dec_params -> ID .)


state 197

    (94) declare_function -> FUNCTION ID PARIZQ dec_params . PARDER DOSP newline statement END
    (96) dec_params -> dec_params . COMA ID DOSP DOSP tipo
    (97) dec_params -> dec_params . COMA ID DOSP DOSP ID
    (98) dec_params -> dec_params . COMA ID

    PARDER          shift and go to state 246
    COMA            shift and go to state 247


state 198

    (95) declare_function -> FUNCTION ID PARIZQ PARDER . DOSP newline statement END

    DOSP            shift and go to state 248


state 199

    (24) expression -> expression MAS expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 24 (expression -> expression MAS expression .)
    MENOS           reduce using rule 24 (expression -> expression MAS expression .)
    MAYQUE          reduce using rule 24 (expression -> expression MAS expression .)
    MENQUE          reduce using rule 24 (expression -> expression MAS expression .)
    MENIGUALQUE     reduce using rule 24 (expression -> expression MAS expression .)
    MAYIGUALQUE     reduce using rule 24 (expression -> expression MAS expression .)
    IGUALQUE        reduce using rule 24 (expression -> expression MAS expression .)
    NIGUALQUE       reduce using rule 24 (expression -> expression MAS expression .)
    OR              reduce using rule 24 (expression -> expression MAS expression .)
    AND             reduce using rule 24 (expression -> expression MAS expression .)
    newline         reduce using rule 24 (expression -> expression MAS expression .)
    DOSP            reduce using rule 24 (expression -> expression MAS expression .)
    PARDER          reduce using rule 24 (expression -> expression MAS expression .)
    COMA            reduce using rule 24 (expression -> expression MAS expression .)
    CORCHETEDER     reduce using rule 24 (expression -> expression MAS expression .)
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139

  ! POR             [ reduce using rule 24 (expression -> expression MAS expression .) ]
  ! DIVIDIDO        [ reduce using rule 24 (expression -> expression MAS expression .) ]
  ! POTENCIA        [ reduce using rule 24 (expression -> expression MAS expression .) ]
  ! MODULO          [ reduce using rule 24 (expression -> expression MAS expression .) ]
  ! MAS             [ shift and go to state 134 ]
  ! MENOS           [ shift and go to state 135 ]
  ! MAYQUE          [ shift and go to state 140 ]
  ! MENQUE          [ shift and go to state 141 ]
  ! MENIGUALQUE     [ shift and go to state 142 ]
  ! MAYIGUALQUE     [ shift and go to state 143 ]
  ! IGUALQUE        [ shift and go to state 144 ]
  ! NIGUALQUE       [ shift and go to state 145 ]
  ! OR              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 147 ]


state 200

    (25) expression -> expression MENOS expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 25 (expression -> expression MENOS expression .)
    MENOS           reduce using rule 25 (expression -> expression MENOS expression .)
    MAYQUE          reduce using rule 25 (expression -> expression MENOS expression .)
    MENQUE          reduce using rule 25 (expression -> expression MENOS expression .)
    MENIGUALQUE     reduce using rule 25 (expression -> expression MENOS expression .)
    MAYIGUALQUE     reduce using rule 25 (expression -> expression MENOS expression .)
    IGUALQUE        reduce using rule 25 (expression -> expression MENOS expression .)
    NIGUALQUE       reduce using rule 25 (expression -> expression MENOS expression .)
    OR              reduce using rule 25 (expression -> expression MENOS expression .)
    AND             reduce using rule 25 (expression -> expression MENOS expression .)
    newline         reduce using rule 25 (expression -> expression MENOS expression .)
    DOSP            reduce using rule 25 (expression -> expression MENOS expression .)
    PARDER          reduce using rule 25 (expression -> expression MENOS expression .)
    COMA            reduce using rule 25 (expression -> expression MENOS expression .)
    CORCHETEDER     reduce using rule 25 (expression -> expression MENOS expression .)
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139

  ! POR             [ reduce using rule 25 (expression -> expression MENOS expression .) ]
  ! DIVIDIDO        [ reduce using rule 25 (expression -> expression MENOS expression .) ]
  ! POTENCIA        [ reduce using rule 25 (expression -> expression MENOS expression .) ]
  ! MODULO          [ reduce using rule 25 (expression -> expression MENOS expression .) ]
  ! MAS             [ shift and go to state 134 ]
  ! MENOS           [ shift and go to state 135 ]
  ! MAYQUE          [ shift and go to state 140 ]
  ! MENQUE          [ shift and go to state 141 ]
  ! MENIGUALQUE     [ shift and go to state 142 ]
  ! MAYIGUALQUE     [ shift and go to state 143 ]
  ! IGUALQUE        [ shift and go to state 144 ]
  ! NIGUALQUE       [ shift and go to state 145 ]
  ! OR              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 147 ]


state 201

    (26) expression -> expression POR expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 26 (expression -> expression POR expression .)
    MENOS           reduce using rule 26 (expression -> expression POR expression .)
    POR             reduce using rule 26 (expression -> expression POR expression .)
    DIVIDIDO        reduce using rule 26 (expression -> expression POR expression .)
    MODULO          reduce using rule 26 (expression -> expression POR expression .)
    MAYQUE          reduce using rule 26 (expression -> expression POR expression .)
    MENQUE          reduce using rule 26 (expression -> expression POR expression .)
    MENIGUALQUE     reduce using rule 26 (expression -> expression POR expression .)
    MAYIGUALQUE     reduce using rule 26 (expression -> expression POR expression .)
    IGUALQUE        reduce using rule 26 (expression -> expression POR expression .)
    NIGUALQUE       reduce using rule 26 (expression -> expression POR expression .)
    OR              reduce using rule 26 (expression -> expression POR expression .)
    AND             reduce using rule 26 (expression -> expression POR expression .)
    newline         reduce using rule 26 (expression -> expression POR expression .)
    DOSP            reduce using rule 26 (expression -> expression POR expression .)
    PARDER          reduce using rule 26 (expression -> expression POR expression .)
    COMA            reduce using rule 26 (expression -> expression POR expression .)
    CORCHETEDER     reduce using rule 26 (expression -> expression POR expression .)
    POTENCIA        shift and go to state 138

  ! POTENCIA        [ reduce using rule 26 (expression -> expression POR expression .) ]
  ! MAS             [ shift and go to state 134 ]
  ! MENOS           [ shift and go to state 135 ]
  ! POR             [ shift and go to state 136 ]
  ! DIVIDIDO        [ shift and go to state 137 ]
  ! MODULO          [ shift and go to state 139 ]
  ! MAYQUE          [ shift and go to state 140 ]
  ! MENQUE          [ shift and go to state 141 ]
  ! MENIGUALQUE     [ shift and go to state 142 ]
  ! MAYIGUALQUE     [ shift and go to state 143 ]
  ! IGUALQUE        [ shift and go to state 144 ]
  ! NIGUALQUE       [ shift and go to state 145 ]
  ! OR              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 147 ]


state 202

    (27) expression -> expression DIVIDIDO expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    MENOS           reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    POR             reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    DIVIDIDO        reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    MODULO          reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    MAYQUE          reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    MENQUE          reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    MENIGUALQUE     reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    MAYIGUALQUE     reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    IGUALQUE        reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    NIGUALQUE       reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    OR              reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    AND             reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    newline         reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    DOSP            reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    PARDER          reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    COMA            reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    CORCHETEDER     reduce using rule 27 (expression -> expression DIVIDIDO expression .)
    POTENCIA        shift and go to state 138

  ! POTENCIA        [ reduce using rule 27 (expression -> expression DIVIDIDO expression .) ]
  ! MAS             [ shift and go to state 134 ]
  ! MENOS           [ shift and go to state 135 ]
  ! POR             [ shift and go to state 136 ]
  ! DIVIDIDO        [ shift and go to state 137 ]
  ! MODULO          [ shift and go to state 139 ]
  ! MAYQUE          [ shift and go to state 140 ]
  ! MENQUE          [ shift and go to state 141 ]
  ! MENIGUALQUE     [ shift and go to state 142 ]
  ! MAYIGUALQUE     [ shift and go to state 143 ]
  ! IGUALQUE        [ shift and go to state 144 ]
  ! NIGUALQUE       [ shift and go to state 145 ]
  ! OR              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 147 ]


state 203

    (28) expression -> expression POTENCIA expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 28 (expression -> expression POTENCIA expression .)
    MENOS           reduce using rule 28 (expression -> expression POTENCIA expression .)
    POR             reduce using rule 28 (expression -> expression POTENCIA expression .)
    DIVIDIDO        reduce using rule 28 (expression -> expression POTENCIA expression .)
    POTENCIA        reduce using rule 28 (expression -> expression POTENCIA expression .)
    MODULO          reduce using rule 28 (expression -> expression POTENCIA expression .)
    MAYQUE          reduce using rule 28 (expression -> expression POTENCIA expression .)
    MENQUE          reduce using rule 28 (expression -> expression POTENCIA expression .)
    MENIGUALQUE     reduce using rule 28 (expression -> expression POTENCIA expression .)
    MAYIGUALQUE     reduce using rule 28 (expression -> expression POTENCIA expression .)
    IGUALQUE        reduce using rule 28 (expression -> expression POTENCIA expression .)
    NIGUALQUE       reduce using rule 28 (expression -> expression POTENCIA expression .)
    OR              reduce using rule 28 (expression -> expression POTENCIA expression .)
    AND             reduce using rule 28 (expression -> expression POTENCIA expression .)
    newline         reduce using rule 28 (expression -> expression POTENCIA expression .)
    DOSP            reduce using rule 28 (expression -> expression POTENCIA expression .)
    PARDER          reduce using rule 28 (expression -> expression POTENCIA expression .)
    COMA            reduce using rule 28 (expression -> expression POTENCIA expression .)
    CORCHETEDER     reduce using rule 28 (expression -> expression POTENCIA expression .)

  ! MAS             [ shift and go to state 134 ]
  ! MENOS           [ shift and go to state 135 ]
  ! POR             [ shift and go to state 136 ]
  ! DIVIDIDO        [ shift and go to state 137 ]
  ! POTENCIA        [ shift and go to state 138 ]
  ! MODULO          [ shift and go to state 139 ]
  ! MAYQUE          [ shift and go to state 140 ]
  ! MENQUE          [ shift and go to state 141 ]
  ! MENIGUALQUE     [ shift and go to state 142 ]
  ! MAYIGUALQUE     [ shift and go to state 143 ]
  ! IGUALQUE        [ shift and go to state 144 ]
  ! NIGUALQUE       [ shift and go to state 145 ]
  ! OR              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 147 ]


state 204

    (29) expression -> expression MODULO expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAS             reduce using rule 29 (expression -> expression MODULO expression .)
    MENOS           reduce using rule 29 (expression -> expression MODULO expression .)
    POR             reduce using rule 29 (expression -> expression MODULO expression .)
    DIVIDIDO        reduce using rule 29 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 29 (expression -> expression MODULO expression .)
    MAYQUE          reduce using rule 29 (expression -> expression MODULO expression .)
    MENQUE          reduce using rule 29 (expression -> expression MODULO expression .)
    MENIGUALQUE     reduce using rule 29 (expression -> expression MODULO expression .)
    MAYIGUALQUE     reduce using rule 29 (expression -> expression MODULO expression .)
    IGUALQUE        reduce using rule 29 (expression -> expression MODULO expression .)
    NIGUALQUE       reduce using rule 29 (expression -> expression MODULO expression .)
    OR              reduce using rule 29 (expression -> expression MODULO expression .)
    AND             reduce using rule 29 (expression -> expression MODULO expression .)
    newline         reduce using rule 29 (expression -> expression MODULO expression .)
    DOSP            reduce using rule 29 (expression -> expression MODULO expression .)
    PARDER          reduce using rule 29 (expression -> expression MODULO expression .)
    COMA            reduce using rule 29 (expression -> expression MODULO expression .)
    CORCHETEDER     reduce using rule 29 (expression -> expression MODULO expression .)
    POTENCIA        shift and go to state 138

  ! POTENCIA        [ reduce using rule 29 (expression -> expression MODULO expression .) ]
  ! MAS             [ shift and go to state 134 ]
  ! MENOS           [ shift and go to state 135 ]
  ! POR             [ shift and go to state 136 ]
  ! DIVIDIDO        [ shift and go to state 137 ]
  ! MODULO          [ shift and go to state 139 ]
  ! MAYQUE          [ shift and go to state 140 ]
  ! MENQUE          [ shift and go to state 141 ]
  ! MENIGUALQUE     [ shift and go to state 142 ]
  ! MAYIGUALQUE     [ shift and go to state 143 ]
  ! IGUALQUE        [ shift and go to state 144 ]
  ! NIGUALQUE       [ shift and go to state 145 ]
  ! OR              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 147 ]


state 205

    (30) expression -> expression MAYQUE expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAYQUE          reduce using rule 30 (expression -> expression MAYQUE expression .)
    MENQUE          reduce using rule 30 (expression -> expression MAYQUE expression .)
    MENIGUALQUE     reduce using rule 30 (expression -> expression MAYQUE expression .)
    MAYIGUALQUE     reduce using rule 30 (expression -> expression MAYQUE expression .)
    IGUALQUE        reduce using rule 30 (expression -> expression MAYQUE expression .)
    NIGUALQUE       reduce using rule 30 (expression -> expression MAYQUE expression .)
    OR              reduce using rule 30 (expression -> expression MAYQUE expression .)
    AND             reduce using rule 30 (expression -> expression MAYQUE expression .)
    newline         reduce using rule 30 (expression -> expression MAYQUE expression .)
    DOSP            reduce using rule 30 (expression -> expression MAYQUE expression .)
    PARDER          reduce using rule 30 (expression -> expression MAYQUE expression .)
    COMA            reduce using rule 30 (expression -> expression MAYQUE expression .)
    CORCHETEDER     reduce using rule 30 (expression -> expression MAYQUE expression .)
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139

  ! MAS             [ reduce using rule 30 (expression -> expression MAYQUE expression .) ]
  ! MENOS           [ reduce using rule 30 (expression -> expression MAYQUE expression .) ]
  ! POR             [ reduce using rule 30 (expression -> expression MAYQUE expression .) ]
  ! DIVIDIDO        [ reduce using rule 30 (expression -> expression MAYQUE expression .) ]
  ! POTENCIA        [ reduce using rule 30 (expression -> expression MAYQUE expression .) ]
  ! MODULO          [ reduce using rule 30 (expression -> expression MAYQUE expression .) ]
  ! MAYQUE          [ shift and go to state 140 ]
  ! MENQUE          [ shift and go to state 141 ]
  ! MENIGUALQUE     [ shift and go to state 142 ]
  ! MAYIGUALQUE     [ shift and go to state 143 ]
  ! IGUALQUE        [ shift and go to state 144 ]
  ! NIGUALQUE       [ shift and go to state 145 ]
  ! OR              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 147 ]


state 206

    (31) expression -> expression MENQUE expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAYQUE          reduce using rule 31 (expression -> expression MENQUE expression .)
    MENQUE          reduce using rule 31 (expression -> expression MENQUE expression .)
    MENIGUALQUE     reduce using rule 31 (expression -> expression MENQUE expression .)
    MAYIGUALQUE     reduce using rule 31 (expression -> expression MENQUE expression .)
    IGUALQUE        reduce using rule 31 (expression -> expression MENQUE expression .)
    NIGUALQUE       reduce using rule 31 (expression -> expression MENQUE expression .)
    OR              reduce using rule 31 (expression -> expression MENQUE expression .)
    AND             reduce using rule 31 (expression -> expression MENQUE expression .)
    newline         reduce using rule 31 (expression -> expression MENQUE expression .)
    DOSP            reduce using rule 31 (expression -> expression MENQUE expression .)
    PARDER          reduce using rule 31 (expression -> expression MENQUE expression .)
    COMA            reduce using rule 31 (expression -> expression MENQUE expression .)
    CORCHETEDER     reduce using rule 31 (expression -> expression MENQUE expression .)
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139

  ! MAS             [ reduce using rule 31 (expression -> expression MENQUE expression .) ]
  ! MENOS           [ reduce using rule 31 (expression -> expression MENQUE expression .) ]
  ! POR             [ reduce using rule 31 (expression -> expression MENQUE expression .) ]
  ! DIVIDIDO        [ reduce using rule 31 (expression -> expression MENQUE expression .) ]
  ! POTENCIA        [ reduce using rule 31 (expression -> expression MENQUE expression .) ]
  ! MODULO          [ reduce using rule 31 (expression -> expression MENQUE expression .) ]
  ! MAYQUE          [ shift and go to state 140 ]
  ! MENQUE          [ shift and go to state 141 ]
  ! MENIGUALQUE     [ shift and go to state 142 ]
  ! MAYIGUALQUE     [ shift and go to state 143 ]
  ! IGUALQUE        [ shift and go to state 144 ]
  ! NIGUALQUE       [ shift and go to state 145 ]
  ! OR              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 147 ]


state 207

    (32) expression -> expression MENIGUALQUE expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAYQUE          reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    MENQUE          reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    MENIGUALQUE     reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    MAYIGUALQUE     reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    IGUALQUE        reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    NIGUALQUE       reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    OR              reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    AND             reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    newline         reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    DOSP            reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    PARDER          reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    COMA            reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    CORCHETEDER     reduce using rule 32 (expression -> expression MENIGUALQUE expression .)
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139

  ! MAS             [ reduce using rule 32 (expression -> expression MENIGUALQUE expression .) ]
  ! MENOS           [ reduce using rule 32 (expression -> expression MENIGUALQUE expression .) ]
  ! POR             [ reduce using rule 32 (expression -> expression MENIGUALQUE expression .) ]
  ! DIVIDIDO        [ reduce using rule 32 (expression -> expression MENIGUALQUE expression .) ]
  ! POTENCIA        [ reduce using rule 32 (expression -> expression MENIGUALQUE expression .) ]
  ! MODULO          [ reduce using rule 32 (expression -> expression MENIGUALQUE expression .) ]
  ! MAYQUE          [ shift and go to state 140 ]
  ! MENQUE          [ shift and go to state 141 ]
  ! MENIGUALQUE     [ shift and go to state 142 ]
  ! MAYIGUALQUE     [ shift and go to state 143 ]
  ! IGUALQUE        [ shift and go to state 144 ]
  ! NIGUALQUE       [ shift and go to state 145 ]
  ! OR              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 147 ]


state 208

    (33) expression -> expression MAYIGUALQUE expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    MAYQUE          reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    MENQUE          reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    MENIGUALQUE     reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    MAYIGUALQUE     reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    IGUALQUE        reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    NIGUALQUE       reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    OR              reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    AND             reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    newline         reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    DOSP            reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    PARDER          reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    COMA            reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    CORCHETEDER     reduce using rule 33 (expression -> expression MAYIGUALQUE expression .)
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139

  ! MAS             [ reduce using rule 33 (expression -> expression MAYIGUALQUE expression .) ]
  ! MENOS           [ reduce using rule 33 (expression -> expression MAYIGUALQUE expression .) ]
  ! POR             [ reduce using rule 33 (expression -> expression MAYIGUALQUE expression .) ]
  ! DIVIDIDO        [ reduce using rule 33 (expression -> expression MAYIGUALQUE expression .) ]
  ! POTENCIA        [ reduce using rule 33 (expression -> expression MAYIGUALQUE expression .) ]
  ! MODULO          [ reduce using rule 33 (expression -> expression MAYIGUALQUE expression .) ]
  ! MAYQUE          [ shift and go to state 140 ]
  ! MENQUE          [ shift and go to state 141 ]
  ! MENIGUALQUE     [ shift and go to state 142 ]
  ! MAYIGUALQUE     [ shift and go to state 143 ]
  ! IGUALQUE        [ shift and go to state 144 ]
  ! NIGUALQUE       [ shift and go to state 145 ]
  ! OR              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 147 ]


state 209

    (34) expression -> expression IGUALQUE expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    IGUALQUE        reduce using rule 34 (expression -> expression IGUALQUE expression .)
    NIGUALQUE       reduce using rule 34 (expression -> expression IGUALQUE expression .)
    OR              reduce using rule 34 (expression -> expression IGUALQUE expression .)
    AND             reduce using rule 34 (expression -> expression IGUALQUE expression .)
    newline         reduce using rule 34 (expression -> expression IGUALQUE expression .)
    DOSP            reduce using rule 34 (expression -> expression IGUALQUE expression .)
    PARDER          reduce using rule 34 (expression -> expression IGUALQUE expression .)
    COMA            reduce using rule 34 (expression -> expression IGUALQUE expression .)
    CORCHETEDER     reduce using rule 34 (expression -> expression IGUALQUE expression .)
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143

  ! MAS             [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! MENOS           [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! POR             [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! DIVIDIDO        [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! POTENCIA        [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! MODULO          [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! MAYQUE          [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! MENQUE          [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! MENIGUALQUE     [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! MAYIGUALQUE     [ reduce using rule 34 (expression -> expression IGUALQUE expression .) ]
  ! IGUALQUE        [ shift and go to state 144 ]
  ! NIGUALQUE       [ shift and go to state 145 ]
  ! OR              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 147 ]


state 210

    (35) expression -> expression NIGUALQUE expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    IGUALQUE        reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    NIGUALQUE       reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    OR              reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    AND             reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    newline         reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    DOSP            reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    PARDER          reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    COMA            reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    CORCHETEDER     reduce using rule 35 (expression -> expression NIGUALQUE expression .)
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143

  ! MAS             [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! MENOS           [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! POR             [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! DIVIDIDO        [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! POTENCIA        [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! MODULO          [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! MAYQUE          [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! MENQUE          [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! MENIGUALQUE     [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! MAYIGUALQUE     [ reduce using rule 35 (expression -> expression NIGUALQUE expression .) ]
  ! IGUALQUE        [ shift and go to state 144 ]
  ! NIGUALQUE       [ shift and go to state 145 ]
  ! OR              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 147 ]


state 211

    (36) expression -> expression OR expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    OR              reduce using rule 36 (expression -> expression OR expression .)
    newline         reduce using rule 36 (expression -> expression OR expression .)
    DOSP            reduce using rule 36 (expression -> expression OR expression .)
    PARDER          reduce using rule 36 (expression -> expression OR expression .)
    COMA            reduce using rule 36 (expression -> expression OR expression .)
    CORCHETEDER     reduce using rule 36 (expression -> expression OR expression .)
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    AND             shift and go to state 147

  ! MAS             [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! MENOS           [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! POR             [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! DIVIDIDO        [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! POTENCIA        [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! MAYQUE          [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! MENQUE          [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! MENIGUALQUE     [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! MAYIGUALQUE     [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! IGUALQUE        [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! NIGUALQUE       [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 146 ]


state 212

    (37) expression -> expression AND expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    OR              reduce using rule 37 (expression -> expression AND expression .)
    AND             reduce using rule 37 (expression -> expression AND expression .)
    newline         reduce using rule 37 (expression -> expression AND expression .)
    DOSP            reduce using rule 37 (expression -> expression AND expression .)
    PARDER          reduce using rule 37 (expression -> expression AND expression .)
    COMA            reduce using rule 37 (expression -> expression AND expression .)
    CORCHETEDER     reduce using rule 37 (expression -> expression AND expression .)
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145

  ! MAS             [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MENOS           [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! POR             [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! DIVIDIDO        [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! POTENCIA        [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MAYQUE          [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MENQUE          [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MENIGUALQUE     [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MAYIGUALQUE     [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! IGUALQUE        [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! NIGUALQUE       [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! OR              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 147 ]


state 213

    (39) final_expression -> PARIZQ expression PARDER .

    MAS             reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    MENOS           reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    POR             reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    MODULO          reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    MENQUE          reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    OR              reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    AND             reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    newline         reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    DOSP            reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    PARDER          reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    COMA            reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 39 (final_expression -> PARIZQ expression PARDER .)


state 214

    (40) final_expression -> CORCHETEIZQ exp_list CORCHETEDER .

    MAS             reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    MENOS           reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    POR             reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    DIVIDIDO        reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    POTENCIA        reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    MODULO          reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    MAYQUE          reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    MENQUE          reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    MENIGUALQUE     reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    MAYIGUALQUE     reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    IGUALQUE        reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    NIGUALQUE       reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    OR              reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    AND             reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    newline         reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    DOSP            reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    PARDER          reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    COMA            reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)
    CORCHETEDER     reduce using rule 40 (final_expression -> CORCHETEIZQ exp_list CORCHETEDER .)


state 215

    (120) access_struct -> ID PUNTO ID .

    MAS             reduce using rule 120 (access_struct -> ID PUNTO ID .)
    MENOS           reduce using rule 120 (access_struct -> ID PUNTO ID .)
    POR             reduce using rule 120 (access_struct -> ID PUNTO ID .)
    DIVIDIDO        reduce using rule 120 (access_struct -> ID PUNTO ID .)
    POTENCIA        reduce using rule 120 (access_struct -> ID PUNTO ID .)
    MODULO          reduce using rule 120 (access_struct -> ID PUNTO ID .)
    MAYQUE          reduce using rule 120 (access_struct -> ID PUNTO ID .)
    MENQUE          reduce using rule 120 (access_struct -> ID PUNTO ID .)
    MENIGUALQUE     reduce using rule 120 (access_struct -> ID PUNTO ID .)
    MAYIGUALQUE     reduce using rule 120 (access_struct -> ID PUNTO ID .)
    IGUALQUE        reduce using rule 120 (access_struct -> ID PUNTO ID .)
    NIGUALQUE       reduce using rule 120 (access_struct -> ID PUNTO ID .)
    OR              reduce using rule 120 (access_struct -> ID PUNTO ID .)
    AND             reduce using rule 120 (access_struct -> ID PUNTO ID .)
    newline         reduce using rule 120 (access_struct -> ID PUNTO ID .)
    DOSP            reduce using rule 120 (access_struct -> ID PUNTO ID .)
    PARDER          reduce using rule 120 (access_struct -> ID PUNTO ID .)
    COMA            reduce using rule 120 (access_struct -> ID PUNTO ID .)
    CORCHETEDER     reduce using rule 120 (access_struct -> ID PUNTO ID .)


state 216

    (102) if_state -> IF expression DOSP newline . statement END
    (103) if_state -> IF expression DOSP newline . statement ELSE DOSP newline statement END
    (104) if_state -> IF expression DOSP newline . statement else_if_list END
    (93) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (72) print_instr -> . PRINT PARIZQ exp_list PARDER
    (73) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (81) definicion_instr -> . LOCAL ID
    (82) asignacion_instr -> . ID IGUAL expression
    (83) asignacion_instr -> . LOCAL ID IGUAL expression
    (86) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (84) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (85) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (94) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (95) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (113) return_state -> . RETURN
    (114) return_state -> . RETURN expression
    (111) break_state -> . BREAK
    (112) continue_state -> . CONTINUE
    (102) if_state -> . IF expression DOSP newline statement END
    (103) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (104) if_state -> . IF expression DOSP newline statement else_if_list END
    (108) while_state -> . WHILE expression DOSP newline statement END
    (109) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (110) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER
    (115) create_struct -> . STRUCT ID DOSP newline attList END
    (118) declare_struct -> . ID DOSP DOSP ID
    (119) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51
    STRUCT          shift and go to state 52

    statement                      shift and go to state 249
    instrucciones                  shift and go to state 250
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 217

    (108) while_state -> WHILE expression DOSP newline . statement END
    (93) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (72) print_instr -> . PRINT PARIZQ exp_list PARDER
    (73) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (81) definicion_instr -> . LOCAL ID
    (82) asignacion_instr -> . ID IGUAL expression
    (83) asignacion_instr -> . LOCAL ID IGUAL expression
    (86) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (84) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (85) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (94) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (95) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (113) return_state -> . RETURN
    (114) return_state -> . RETURN expression
    (111) break_state -> . BREAK
    (112) continue_state -> . CONTINUE
    (102) if_state -> . IF expression DOSP newline statement END
    (103) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (104) if_state -> . IF expression DOSP newline statement else_if_list END
    (108) while_state -> . WHILE expression DOSP newline statement END
    (109) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (110) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER
    (115) create_struct -> . STRUCT ID DOSP newline attList END
    (118) declare_struct -> . ID DOSP DOSP ID
    (119) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51
    STRUCT          shift and go to state 52

    statement                      shift and go to state 251
    instrucciones                  shift and go to state 250
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 218

    (109) for_state -> FOR ID IN expression . DOSP expression DOSP newline statement END
    (110) for_state -> FOR ID IN expression . DOSP newline statement END
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    DOSP            shift and go to state 252
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 219

    (52) nativas -> LOG PARIZQ ENTERO COMA . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 253
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 220

    (53) nativas -> LOG10 PARIZQ expression PARDER .

    newline         reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    MAS             reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    MENOS           reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    POR             reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    MODULO          reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    MENQUE          reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    OR              reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    AND             reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    DOSP            reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    PARDER          reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    COMA            reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 53 (nativas -> LOG10 PARIZQ expression PARDER .)


state 221

    (54) nativas -> COS PARIZQ expression PARDER .

    newline         reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    MAS             reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    MENOS           reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    POR             reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    MODULO          reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    MENQUE          reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    OR              reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    AND             reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    DOSP            reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    PARDER          reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    COMA            reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 54 (nativas -> COS PARIZQ expression PARDER .)


state 222

    (55) nativas -> SIN PARIZQ expression PARDER .

    newline         reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    MAS             reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    MENOS           reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    POR             reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    MODULO          reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    MENQUE          reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    OR              reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    AND             reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    DOSP            reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    PARDER          reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    COMA            reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 55 (nativas -> SIN PARIZQ expression PARDER .)


state 223

    (56) nativas -> TAN PARIZQ expression PARDER .

    newline         reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    MAS             reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    MENOS           reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    POR             reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    MODULO          reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    MENQUE          reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    OR              reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    AND             reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    DOSP            reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    PARDER          reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    COMA            reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 56 (nativas -> TAN PARIZQ expression PARDER .)


state 224

    (57) nativas -> SQRT PARIZQ expression PARDER .

    newline         reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    MAS             reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    MENOS           reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    POR             reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    MODULO          reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    MENQUE          reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    OR              reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    AND             reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    DOSP            reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    PARDER          reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    COMA            reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 57 (nativas -> SQRT PARIZQ expression PARDER .)


state 225

    (58) nativas -> UPPERCASE PARIZQ expression PARDER .

    newline         reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    MAS             reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    MENOS           reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    POR             reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    MODULO          reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    MENQUE          reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    OR              reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    AND             reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    DOSP            reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    PARDER          reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    COMA            reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 58 (nativas -> UPPERCASE PARIZQ expression PARDER .)


state 226

    (59) nativas -> LOWERCASE PARIZQ expression PARDER .

    newline         reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    MAS             reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    MENOS           reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    POR             reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    MODULO          reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    MENQUE          reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    OR              reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    AND             reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    DOSP            reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    PARDER          reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    COMA            reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 59 (nativas -> LOWERCASE PARIZQ expression PARDER .)


state 227

    (60) nativas -> STR PARIZQ expression PARDER .

    newline         reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    MAS             reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    MENOS           reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    POR             reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    MODULO          reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    MENQUE          reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    OR              reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    AND             reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    DOSP            reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    PARDER          reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    COMA            reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 60 (nativas -> STR PARIZQ expression PARDER .)


state 228

    (61) nativas -> RANGE PARIZQ expression PARDER .

    newline         reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    MAS             reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    MENOS           reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    POR             reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    MODULO          reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    MENQUE          reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    OR              reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    AND             reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    DOSP            reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    PARDER          reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    COMA            reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 61 (nativas -> RANGE PARIZQ expression PARDER .)


state 229

    (62) nativas -> FLOAT PARIZQ expression PARDER .

    newline         reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    MAS             reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    MENOS           reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    POR             reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    MODULO          reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    MENQUE          reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    OR              reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    AND             reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    DOSP            reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    PARDER          reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    COMA            reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 62 (nativas -> FLOAT PARIZQ expression PARDER .)


state 230

    (63) nativas -> BOOL PARIZQ expression PARDER .

    newline         reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    MAS             reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    MENOS           reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    POR             reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    MODULO          reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    MENQUE          reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    OR              reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    AND             reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    DOSP            reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    PARDER          reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    COMA            reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 63 (nativas -> BOOL PARIZQ expression PARDER .)


state 231

    (64) nativas -> INT PARIZQ expression PARDER .

    newline         reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    MAS             reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    MENOS           reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    POR             reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    MODULO          reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    MENQUE          reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    OR              reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    AND             reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    DOSP            reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    PARDER          reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    COMA            reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 64 (nativas -> INT PARIZQ expression PARDER .)


state 232

    (65) nativas -> TRUNC PARIZQ INT COMA . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 254
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 233

    (66) nativas -> TRUNC PARIZQ expression PARDER .

    newline         reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    MAS             reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    MENOS           reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    POR             reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    MODULO          reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    MENQUE          reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    OR              reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    AND             reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    DOSP            reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    PARDER          reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    COMA            reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 66 (nativas -> TRUNC PARIZQ expression PARDER .)


state 234

    (67) nativas -> TYPEOF PARIZQ expression PARDER .

    newline         reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    MAS             reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    MENOS           reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    POR             reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    MODULO          reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    MENQUE          reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    OR              reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    AND             reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    DOSP            reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    PARDER          reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    COMA            reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 67 (nativas -> TYPEOF PARIZQ expression PARDER .)


state 235

    (68) nativas -> PARSE PARIZQ tipo COMA . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 255
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 236

    (69) nativas -> LEN PARIZQ expression PARDER .

    newline         reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    MAS             reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    MENOS           reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    POR             reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    MODULO          reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    MENQUE          reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    OR              reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    AND             reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    DOSP            reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    PARDER          reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    COMA            reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 69 (nativas -> LEN PARIZQ expression PARDER .)


state 237

    (70) nativas -> PUSH PARIZQ expression COMA . expression PARDER
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 256
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 238

    (71) nativas -> POP PARIZQ expression PARDER .

    newline         reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    MAS             reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    MENOS           reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    POR             reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    POTENCIA        reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    MODULO          reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    MAYQUE          reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    MENQUE          reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    MENIGUALQUE     reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    MAYIGUALQUE     reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    IGUALQUE        reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    NIGUALQUE       reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    OR              reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    AND             reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    DOSP            reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    PARDER          reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    COMA            reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)
    CORCHETEDER     reduce using rule 71 (nativas -> POP PARIZQ expression PARDER .)


state 239

    (115) create_struct -> STRUCT ID DOSP newline . attList END
    (116) attList -> . attList ID DOSP tipo PTCOMA newline
    (117) attList -> . ID DOSP tipo PTCOMA newline

    ID              shift and go to state 257

    attList                        shift and go to state 258

state 240

    (89) exp_list -> exp_list COMA expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          reduce using rule 89 (exp_list -> exp_list COMA expression .)
    COMA            reduce using rule 89 (exp_list -> exp_list COMA expression .)
    CORCHETEDER     reduce using rule 89 (exp_list -> exp_list COMA expression .)
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 241

    (85) definicion_asignacion_instr -> LOCAL ID IGUAL expression DOSP . tipo
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . CHAR
    (78) tipo -> . STRING
    (79) tipo -> . ARRAY
    (80) tipo -> . NOTHING

    INT             shift and go to state 174
    FLOAT           shift and go to state 175
    BOOL            shift and go to state 176
    CHAR            shift and go to state 177
    STRING          shift and go to state 178
    ARRAY           shift and go to state 179
    NOTHING         shift and go to state 180

    tipo                           shift and go to state 259

state 242

    (84) definicion_asignacion_instr -> ID IGUAL expression DOSP tipo .

    newline         reduce using rule 84 (definicion_asignacion_instr -> ID IGUAL expression DOSP tipo .)


state 243

    (91) index_list -> index_list CORCHETEIZQ expression CORCHETEDER .

    IGUAL           reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    CORCHETEIZQ     reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    MAS             reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    MENOS           reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    POR             reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    DIVIDIDO        reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    POTENCIA        reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    MODULO          reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    MAYQUE          reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    MENQUE          reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    MENIGUALQUE     reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    MAYIGUALQUE     reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    IGUALQUE        reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    NIGUALQUE       reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    OR              reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    AND             reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    newline         reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    DOSP            reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    PARDER          reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    COMA            reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)
    CORCHETEDER     reduce using rule 91 (index_list -> index_list CORCHETEIZQ expression CORCHETEDER .)


state 244

    (119) assign_access -> ID PUNTO ID IGUAL expression .
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    newline         reduce using rule 119 (assign_access -> ID PUNTO ID IGUAL expression .)
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 245

    (99) dec_params -> ID DOSP . DOSP tipo
    (100) dec_params -> ID DOSP . DOSP ID

    DOSP            shift and go to state 260


state 246

    (94) declare_function -> FUNCTION ID PARIZQ dec_params PARDER . DOSP newline statement END

    DOSP            shift and go to state 261


state 247

    (96) dec_params -> dec_params COMA . ID DOSP DOSP tipo
    (97) dec_params -> dec_params COMA . ID DOSP DOSP ID
    (98) dec_params -> dec_params COMA . ID

    ID              shift and go to state 262


state 248

    (95) declare_function -> FUNCTION ID PARIZQ PARDER DOSP . newline statement END

    newline         shift and go to state 263


state 249

    (102) if_state -> IF expression DOSP newline statement . END
    (103) if_state -> IF expression DOSP newline statement . ELSE DOSP newline statement END
    (104) if_state -> IF expression DOSP newline statement . else_if_list END
    (105) else_if_list -> . ELSEIF expression DOSP newline statement
    (106) else_if_list -> . ELSEIF expression DOSP newline statement ELSE DOSP newline statement
    (107) else_if_list -> . ELSEIF expression DOSP newline statement else_if_list

    END             shift and go to state 264
    ELSE            shift and go to state 265
    ELSEIF          shift and go to state 267

    else_if_list                   shift and go to state 266

state 250

    (93) statement -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (72) print_instr -> . PRINT PARIZQ exp_list PARDER
    (73) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (81) definicion_instr -> . LOCAL ID
    (82) asignacion_instr -> . ID IGUAL expression
    (83) asignacion_instr -> . LOCAL ID IGUAL expression
    (86) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (84) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (85) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (94) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (95) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (113) return_state -> . RETURN
    (114) return_state -> . RETURN expression
    (111) break_state -> . BREAK
    (112) continue_state -> . CONTINUE
    (102) if_state -> . IF expression DOSP newline statement END
    (103) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (104) if_state -> . IF expression DOSP newline statement else_if_list END
    (108) while_state -> . WHILE expression DOSP newline statement END
    (109) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (110) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER
    (115) create_struct -> . STRUCT ID DOSP newline attList END
    (118) declare_struct -> . ID DOSP DOSP ID
    (119) assign_access -> . ID PUNTO ID IGUAL expression

    END             reduce using rule 93 (statement -> instrucciones .)
    ELSE            reduce using rule 93 (statement -> instrucciones .)
    ELSEIF          reduce using rule 93 (statement -> instrucciones .)
    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51
    STRUCT          shift and go to state 52

    instruccion                    shift and go to state 53
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 251

    (108) while_state -> WHILE expression DOSP newline statement . END

    END             shift and go to state 268


state 252

    (109) for_state -> FOR ID IN expression DOSP . expression DOSP newline statement END
    (110) for_state -> FOR ID IN expression DOSP . newline statement END
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    newline         shift and go to state 270
    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 269
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 253

    (52) nativas -> LOG PARIZQ ENTERO COMA expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 271
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 254

    (65) nativas -> TRUNC PARIZQ INT COMA expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 272
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 255

    (68) nativas -> PARSE PARIZQ tipo COMA expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 273
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 256

    (70) nativas -> PUSH PARIZQ expression COMA expression . PARDER
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    PARDER          shift and go to state 274
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 257

    (117) attList -> ID . DOSP tipo PTCOMA newline

    DOSP            shift and go to state 275


state 258

    (115) create_struct -> STRUCT ID DOSP newline attList . END
    (116) attList -> attList . ID DOSP tipo PTCOMA newline

    END             shift and go to state 277
    ID              shift and go to state 276


state 259

    (85) definicion_asignacion_instr -> LOCAL ID IGUAL expression DOSP tipo .

    newline         reduce using rule 85 (definicion_asignacion_instr -> LOCAL ID IGUAL expression DOSP tipo .)


state 260

    (99) dec_params -> ID DOSP DOSP . tipo
    (100) dec_params -> ID DOSP DOSP . ID
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . CHAR
    (78) tipo -> . STRING
    (79) tipo -> . ARRAY
    (80) tipo -> . NOTHING

    ID              shift and go to state 278
    INT             shift and go to state 174
    FLOAT           shift and go to state 175
    BOOL            shift and go to state 176
    CHAR            shift and go to state 177
    STRING          shift and go to state 178
    ARRAY           shift and go to state 179
    NOTHING         shift and go to state 180

    tipo                           shift and go to state 279

state 261

    (94) declare_function -> FUNCTION ID PARIZQ dec_params PARDER DOSP . newline statement END

    newline         shift and go to state 280


state 262

    (96) dec_params -> dec_params COMA ID . DOSP DOSP tipo
    (97) dec_params -> dec_params COMA ID . DOSP DOSP ID
    (98) dec_params -> dec_params COMA ID .

    DOSP            shift and go to state 281
    PARDER          reduce using rule 98 (dec_params -> dec_params COMA ID .)
    COMA            reduce using rule 98 (dec_params -> dec_params COMA ID .)


state 263

    (95) declare_function -> FUNCTION ID PARIZQ PARDER DOSP newline . statement END
    (93) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (72) print_instr -> . PRINT PARIZQ exp_list PARDER
    (73) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (81) definicion_instr -> . LOCAL ID
    (82) asignacion_instr -> . ID IGUAL expression
    (83) asignacion_instr -> . LOCAL ID IGUAL expression
    (86) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (84) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (85) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (94) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (95) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (113) return_state -> . RETURN
    (114) return_state -> . RETURN expression
    (111) break_state -> . BREAK
    (112) continue_state -> . CONTINUE
    (102) if_state -> . IF expression DOSP newline statement END
    (103) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (104) if_state -> . IF expression DOSP newline statement else_if_list END
    (108) while_state -> . WHILE expression DOSP newline statement END
    (109) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (110) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER
    (115) create_struct -> . STRUCT ID DOSP newline attList END
    (118) declare_struct -> . ID DOSP DOSP ID
    (119) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51
    STRUCT          shift and go to state 52

    statement                      shift and go to state 282
    instrucciones                  shift and go to state 250
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 264

    (102) if_state -> IF expression DOSP newline statement END .

    newline         reduce using rule 102 (if_state -> IF expression DOSP newline statement END .)


state 265

    (103) if_state -> IF expression DOSP newline statement ELSE . DOSP newline statement END

    DOSP            shift and go to state 283


state 266

    (104) if_state -> IF expression DOSP newline statement else_if_list . END

    END             shift and go to state 284


state 267

    (105) else_if_list -> ELSEIF . expression DOSP newline statement
    (106) else_if_list -> ELSEIF . expression DOSP newline statement ELSE DOSP newline statement
    (107) else_if_list -> ELSEIF . expression DOSP newline statement else_if_list
    (22) expression -> . MENOS expression
    (23) expression -> . NOT expression
    (24) expression -> . expression MAS expression
    (25) expression -> . expression MENOS expression
    (26) expression -> . expression POR expression
    (27) expression -> . expression DIVIDIDO expression
    (28) expression -> . expression POTENCIA expression
    (29) expression -> . expression MODULO expression
    (30) expression -> . expression MAYQUE expression
    (31) expression -> . expression MENQUE expression
    (32) expression -> . expression MENIGUALQUE expression
    (33) expression -> . expression MAYIGUALQUE expression
    (34) expression -> . expression IGUALQUE expression
    (35) expression -> . expression NIGUALQUE expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression AND expression
    (38) expression -> . final_expression
    (39) final_expression -> . PARIZQ expression PARDER
    (40) final_expression -> . CORCHETEIZQ exp_list CORCHETEDER
    (41) final_expression -> . DECIMAL
    (42) final_expression -> . ENTERO
    (43) final_expression -> . CADENA
    (44) final_expression -> . CARACTER
    (45) final_expression -> . ID
    (46) final_expression -> . ID index_list
    (47) final_expression -> . TRUE
    (48) final_expression -> . FALSE
    (49) final_expression -> . call_function
    (50) final_expression -> . access_struct
    (51) final_expression -> . nativas
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (120) access_struct -> . ID PUNTO ID
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER

    MENOS           shift and go to state 83
    NOT             shift and go to state 84
    PARIZQ          shift and go to state 86
    CORCHETEIZQ     shift and go to state 87
    DECIMAL         shift and go to state 88
    ENTERO          shift and go to state 89
    CADENA          shift and go to state 90
    CARACTER        shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 93
    FALSE           shift and go to state 94
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51

    expression                     shift and go to state 285
    final_expression               shift and go to state 85
    call_function                  shift and go to state 95
    access_struct                  shift and go to state 96
    nativas                        shift and go to state 97

state 268

    (108) while_state -> WHILE expression DOSP newline statement END .

    newline         reduce using rule 108 (while_state -> WHILE expression DOSP newline statement END .)


state 269

    (109) for_state -> FOR ID IN expression DOSP expression . DOSP newline statement END
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    DOSP            shift and go to state 286
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 270

    (110) for_state -> FOR ID IN expression DOSP newline . statement END
    (93) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (72) print_instr -> . PRINT PARIZQ exp_list PARDER
    (73) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (81) definicion_instr -> . LOCAL ID
    (82) asignacion_instr -> . ID IGUAL expression
    (83) asignacion_instr -> . LOCAL ID IGUAL expression
    (86) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (84) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (85) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (94) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (95) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (113) return_state -> . RETURN
    (114) return_state -> . RETURN expression
    (111) break_state -> . BREAK
    (112) continue_state -> . CONTINUE
    (102) if_state -> . IF expression DOSP newline statement END
    (103) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (104) if_state -> . IF expression DOSP newline statement else_if_list END
    (108) while_state -> . WHILE expression DOSP newline statement END
    (109) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (110) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER
    (115) create_struct -> . STRUCT ID DOSP newline attList END
    (118) declare_struct -> . ID DOSP DOSP ID
    (119) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51
    STRUCT          shift and go to state 52

    statement                      shift and go to state 287
    instrucciones                  shift and go to state 250
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 271

    (52) nativas -> LOG PARIZQ ENTERO COMA expression PARDER .

    newline         reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    MAS             reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    MENOS           reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    POR             reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    DIVIDIDO        reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    POTENCIA        reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    MODULO          reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    MAYQUE          reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    MENQUE          reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    MENIGUALQUE     reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    MAYIGUALQUE     reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    IGUALQUE        reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    NIGUALQUE       reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    OR              reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    AND             reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    DOSP            reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    PARDER          reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    COMA            reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)
    CORCHETEDER     reduce using rule 52 (nativas -> LOG PARIZQ ENTERO COMA expression PARDER .)


state 272

    (65) nativas -> TRUNC PARIZQ INT COMA expression PARDER .

    newline         reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    MAS             reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    MENOS           reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    POR             reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    DIVIDIDO        reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    POTENCIA        reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    MODULO          reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    MAYQUE          reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    MENQUE          reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    MENIGUALQUE     reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    MAYIGUALQUE     reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    IGUALQUE        reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    NIGUALQUE       reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    OR              reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    AND             reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    DOSP            reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    PARDER          reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    COMA            reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)
    CORCHETEDER     reduce using rule 65 (nativas -> TRUNC PARIZQ INT COMA expression PARDER .)


state 273

    (68) nativas -> PARSE PARIZQ tipo COMA expression PARDER .

    newline         reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    MAS             reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    MENOS           reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    POR             reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    DIVIDIDO        reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    POTENCIA        reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    MODULO          reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    MAYQUE          reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    MENQUE          reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    MENIGUALQUE     reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    MAYIGUALQUE     reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    IGUALQUE        reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    NIGUALQUE       reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    OR              reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    AND             reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    DOSP            reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    PARDER          reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    COMA            reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)
    CORCHETEDER     reduce using rule 68 (nativas -> PARSE PARIZQ tipo COMA expression PARDER .)


state 274

    (70) nativas -> PUSH PARIZQ expression COMA expression PARDER .

    newline         reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    MAS             reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    MENOS           reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    POR             reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    DIVIDIDO        reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    POTENCIA        reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    MODULO          reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    MAYQUE          reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    MENQUE          reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    MENIGUALQUE     reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    MAYIGUALQUE     reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    IGUALQUE        reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    NIGUALQUE       reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    OR              reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    AND             reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    DOSP            reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    PARDER          reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    COMA            reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)
    CORCHETEDER     reduce using rule 70 (nativas -> PUSH PARIZQ expression COMA expression PARDER .)


state 275

    (117) attList -> ID DOSP . tipo PTCOMA newline
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . CHAR
    (78) tipo -> . STRING
    (79) tipo -> . ARRAY
    (80) tipo -> . NOTHING

    INT             shift and go to state 174
    FLOAT           shift and go to state 175
    BOOL            shift and go to state 176
    CHAR            shift and go to state 177
    STRING          shift and go to state 178
    ARRAY           shift and go to state 179
    NOTHING         shift and go to state 180

    tipo                           shift and go to state 288

state 276

    (116) attList -> attList ID . DOSP tipo PTCOMA newline

    DOSP            shift and go to state 289


state 277

    (115) create_struct -> STRUCT ID DOSP newline attList END .

    newline         reduce using rule 115 (create_struct -> STRUCT ID DOSP newline attList END .)


state 278

    (100) dec_params -> ID DOSP DOSP ID .

    PARDER          reduce using rule 100 (dec_params -> ID DOSP DOSP ID .)
    COMA            reduce using rule 100 (dec_params -> ID DOSP DOSP ID .)


state 279

    (99) dec_params -> ID DOSP DOSP tipo .

    PARDER          reduce using rule 99 (dec_params -> ID DOSP DOSP tipo .)
    COMA            reduce using rule 99 (dec_params -> ID DOSP DOSP tipo .)


state 280

    (94) declare_function -> FUNCTION ID PARIZQ dec_params PARDER DOSP newline . statement END
    (93) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (72) print_instr -> . PRINT PARIZQ exp_list PARDER
    (73) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (81) definicion_instr -> . LOCAL ID
    (82) asignacion_instr -> . ID IGUAL expression
    (83) asignacion_instr -> . LOCAL ID IGUAL expression
    (86) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (84) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (85) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (94) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (95) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (113) return_state -> . RETURN
    (114) return_state -> . RETURN expression
    (111) break_state -> . BREAK
    (112) continue_state -> . CONTINUE
    (102) if_state -> . IF expression DOSP newline statement END
    (103) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (104) if_state -> . IF expression DOSP newline statement else_if_list END
    (108) while_state -> . WHILE expression DOSP newline statement END
    (109) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (110) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER
    (115) create_struct -> . STRUCT ID DOSP newline attList END
    (118) declare_struct -> . ID DOSP DOSP ID
    (119) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51
    STRUCT          shift and go to state 52

    statement                      shift and go to state 290
    instrucciones                  shift and go to state 250
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 281

    (96) dec_params -> dec_params COMA ID DOSP . DOSP tipo
    (97) dec_params -> dec_params COMA ID DOSP . DOSP ID

    DOSP            shift and go to state 291


state 282

    (95) declare_function -> FUNCTION ID PARIZQ PARDER DOSP newline statement . END

    END             shift and go to state 292


state 283

    (103) if_state -> IF expression DOSP newline statement ELSE DOSP . newline statement END

    newline         shift and go to state 293


state 284

    (104) if_state -> IF expression DOSP newline statement else_if_list END .

    newline         reduce using rule 104 (if_state -> IF expression DOSP newline statement else_if_list END .)


state 285

    (105) else_if_list -> ELSEIF expression . DOSP newline statement
    (106) else_if_list -> ELSEIF expression . DOSP newline statement ELSE DOSP newline statement
    (107) else_if_list -> ELSEIF expression . DOSP newline statement else_if_list
    (24) expression -> expression . MAS expression
    (25) expression -> expression . MENOS expression
    (26) expression -> expression . POR expression
    (27) expression -> expression . DIVIDIDO expression
    (28) expression -> expression . POTENCIA expression
    (29) expression -> expression . MODULO expression
    (30) expression -> expression . MAYQUE expression
    (31) expression -> expression . MENQUE expression
    (32) expression -> expression . MENIGUALQUE expression
    (33) expression -> expression . MAYIGUALQUE expression
    (34) expression -> expression . IGUALQUE expression
    (35) expression -> expression . NIGUALQUE expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . AND expression

    DOSP            shift and go to state 294
    MAS             shift and go to state 134
    MENOS           shift and go to state 135
    POR             shift and go to state 136
    DIVIDIDO        shift and go to state 137
    POTENCIA        shift and go to state 138
    MODULO          shift and go to state 139
    MAYQUE          shift and go to state 140
    MENQUE          shift and go to state 141
    MENIGUALQUE     shift and go to state 142
    MAYIGUALQUE     shift and go to state 143
    IGUALQUE        shift and go to state 144
    NIGUALQUE       shift and go to state 145
    OR              shift and go to state 146
    AND             shift and go to state 147


state 286

    (109) for_state -> FOR ID IN expression DOSP expression DOSP . newline statement END

    newline         shift and go to state 295


state 287

    (110) for_state -> FOR ID IN expression DOSP newline statement . END

    END             shift and go to state 296


state 288

    (117) attList -> ID DOSP tipo . PTCOMA newline

    PTCOMA          shift and go to state 297


state 289

    (116) attList -> attList ID DOSP . tipo PTCOMA newline
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . CHAR
    (78) tipo -> . STRING
    (79) tipo -> . ARRAY
    (80) tipo -> . NOTHING

    INT             shift and go to state 174
    FLOAT           shift and go to state 175
    BOOL            shift and go to state 176
    CHAR            shift and go to state 177
    STRING          shift and go to state 178
    ARRAY           shift and go to state 179
    NOTHING         shift and go to state 180

    tipo                           shift and go to state 298

state 290

    (94) declare_function -> FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement . END

    END             shift and go to state 299


state 291

    (96) dec_params -> dec_params COMA ID DOSP DOSP . tipo
    (97) dec_params -> dec_params COMA ID DOSP DOSP . ID
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . CHAR
    (78) tipo -> . STRING
    (79) tipo -> . ARRAY
    (80) tipo -> . NOTHING

    ID              shift and go to state 300
    INT             shift and go to state 174
    FLOAT           shift and go to state 175
    BOOL            shift and go to state 176
    CHAR            shift and go to state 177
    STRING          shift and go to state 178
    ARRAY           shift and go to state 179
    NOTHING         shift and go to state 180

    tipo                           shift and go to state 301

state 292

    (95) declare_function -> FUNCTION ID PARIZQ PARDER DOSP newline statement END .

    newline         reduce using rule 95 (declare_function -> FUNCTION ID PARIZQ PARDER DOSP newline statement END .)


state 293

    (103) if_state -> IF expression DOSP newline statement ELSE DOSP newline . statement END
    (93) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (72) print_instr -> . PRINT PARIZQ exp_list PARDER
    (73) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (81) definicion_instr -> . LOCAL ID
    (82) asignacion_instr -> . ID IGUAL expression
    (83) asignacion_instr -> . LOCAL ID IGUAL expression
    (86) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (84) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (85) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (94) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (95) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (113) return_state -> . RETURN
    (114) return_state -> . RETURN expression
    (111) break_state -> . BREAK
    (112) continue_state -> . CONTINUE
    (102) if_state -> . IF expression DOSP newline statement END
    (103) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (104) if_state -> . IF expression DOSP newline statement else_if_list END
    (108) while_state -> . WHILE expression DOSP newline statement END
    (109) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (110) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER
    (115) create_struct -> . STRUCT ID DOSP newline attList END
    (118) declare_struct -> . ID DOSP DOSP ID
    (119) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51
    STRUCT          shift and go to state 52

    statement                      shift and go to state 302
    instrucciones                  shift and go to state 250
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 294

    (105) else_if_list -> ELSEIF expression DOSP . newline statement
    (106) else_if_list -> ELSEIF expression DOSP . newline statement ELSE DOSP newline statement
    (107) else_if_list -> ELSEIF expression DOSP . newline statement else_if_list

    newline         shift and go to state 303


state 295

    (109) for_state -> FOR ID IN expression DOSP expression DOSP newline . statement END
    (93) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (72) print_instr -> . PRINT PARIZQ exp_list PARDER
    (73) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (81) definicion_instr -> . LOCAL ID
    (82) asignacion_instr -> . ID IGUAL expression
    (83) asignacion_instr -> . LOCAL ID IGUAL expression
    (86) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (84) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (85) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (94) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (95) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (113) return_state -> . RETURN
    (114) return_state -> . RETURN expression
    (111) break_state -> . BREAK
    (112) continue_state -> . CONTINUE
    (102) if_state -> . IF expression DOSP newline statement END
    (103) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (104) if_state -> . IF expression DOSP newline statement else_if_list END
    (108) while_state -> . WHILE expression DOSP newline statement END
    (109) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (110) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER
    (115) create_struct -> . STRUCT ID DOSP newline attList END
    (118) declare_struct -> . ID DOSP DOSP ID
    (119) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51
    STRUCT          shift and go to state 52

    statement                      shift and go to state 304
    instrucciones                  shift and go to state 250
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 296

    (110) for_state -> FOR ID IN expression DOSP newline statement END .

    newline         reduce using rule 110 (for_state -> FOR ID IN expression DOSP newline statement END .)


state 297

    (117) attList -> ID DOSP tipo PTCOMA . newline

    newline         shift and go to state 305


state 298

    (116) attList -> attList ID DOSP tipo . PTCOMA newline

    PTCOMA          shift and go to state 306


state 299

    (94) declare_function -> FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END .

    newline         reduce using rule 94 (declare_function -> FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END .)


state 300

    (97) dec_params -> dec_params COMA ID DOSP DOSP ID .

    PARDER          reduce using rule 97 (dec_params -> dec_params COMA ID DOSP DOSP ID .)
    COMA            reduce using rule 97 (dec_params -> dec_params COMA ID DOSP DOSP ID .)


state 301

    (96) dec_params -> dec_params COMA ID DOSP DOSP tipo .

    PARDER          reduce using rule 96 (dec_params -> dec_params COMA ID DOSP DOSP tipo .)
    COMA            reduce using rule 96 (dec_params -> dec_params COMA ID DOSP DOSP tipo .)


state 302

    (103) if_state -> IF expression DOSP newline statement ELSE DOSP newline statement . END

    END             shift and go to state 307


state 303

    (105) else_if_list -> ELSEIF expression DOSP newline . statement
    (106) else_if_list -> ELSEIF expression DOSP newline . statement ELSE DOSP newline statement
    (107) else_if_list -> ELSEIF expression DOSP newline . statement else_if_list
    (93) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (72) print_instr -> . PRINT PARIZQ exp_list PARDER
    (73) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (81) definicion_instr -> . LOCAL ID
    (82) asignacion_instr -> . ID IGUAL expression
    (83) asignacion_instr -> . LOCAL ID IGUAL expression
    (86) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (84) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (85) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (94) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (95) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (113) return_state -> . RETURN
    (114) return_state -> . RETURN expression
    (111) break_state -> . BREAK
    (112) continue_state -> . CONTINUE
    (102) if_state -> . IF expression DOSP newline statement END
    (103) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (104) if_state -> . IF expression DOSP newline statement else_if_list END
    (108) while_state -> . WHILE expression DOSP newline statement END
    (109) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (110) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER
    (115) create_struct -> . STRUCT ID DOSP newline attList END
    (118) declare_struct -> . ID DOSP DOSP ID
    (119) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51
    STRUCT          shift and go to state 52

    statement                      shift and go to state 308
    instrucciones                  shift and go to state 250
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 304

    (109) for_state -> FOR ID IN expression DOSP expression DOSP newline statement . END

    END             shift and go to state 309


state 305

    (117) attList -> ID DOSP tipo PTCOMA newline .

    END             reduce using rule 117 (attList -> ID DOSP tipo PTCOMA newline .)
    ID              reduce using rule 117 (attList -> ID DOSP tipo PTCOMA newline .)


state 306

    (116) attList -> attList ID DOSP tipo PTCOMA . newline

    newline         shift and go to state 310


state 307

    (103) if_state -> IF expression DOSP newline statement ELSE DOSP newline statement END .

    newline         reduce using rule 103 (if_state -> IF expression DOSP newline statement ELSE DOSP newline statement END .)


state 308

    (105) else_if_list -> ELSEIF expression DOSP newline statement .
    (106) else_if_list -> ELSEIF expression DOSP newline statement . ELSE DOSP newline statement
    (107) else_if_list -> ELSEIF expression DOSP newline statement . else_if_list
    (105) else_if_list -> . ELSEIF expression DOSP newline statement
    (106) else_if_list -> . ELSEIF expression DOSP newline statement ELSE DOSP newline statement
    (107) else_if_list -> . ELSEIF expression DOSP newline statement else_if_list

    END             reduce using rule 105 (else_if_list -> ELSEIF expression DOSP newline statement .)
    ELSE            shift and go to state 311
    ELSEIF          shift and go to state 267

    else_if_list                   shift and go to state 312

state 309

    (109) for_state -> FOR ID IN expression DOSP expression DOSP newline statement END .

    newline         reduce using rule 109 (for_state -> FOR ID IN expression DOSP expression DOSP newline statement END .)


state 310

    (116) attList -> attList ID DOSP tipo PTCOMA newline .

    END             reduce using rule 116 (attList -> attList ID DOSP tipo PTCOMA newline .)
    ID              reduce using rule 116 (attList -> attList ID DOSP tipo PTCOMA newline .)


state 311

    (106) else_if_list -> ELSEIF expression DOSP newline statement ELSE . DOSP newline statement

    DOSP            shift and go to state 313


state 312

    (107) else_if_list -> ELSEIF expression DOSP newline statement else_if_list .

    END             reduce using rule 107 (else_if_list -> ELSEIF expression DOSP newline statement else_if_list .)


state 313

    (106) else_if_list -> ELSEIF expression DOSP newline statement ELSE DOSP . newline statement

    newline         shift and go to state 314


state 314

    (106) else_if_list -> ELSEIF expression DOSP newline statement ELSE DOSP newline . statement
    (93) statement -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr newline
    (5) instruccion -> . println_instr newline
    (6) instruccion -> . definicion_instr newline
    (7) instruccion -> . asignacion_instr newline
    (8) instruccion -> . asignacion_arreglo_instr newline
    (9) instruccion -> . definicion_asignacion_instr newline
    (10) instruccion -> . call_function newline
    (11) instruccion -> . declare_function newline
    (12) instruccion -> . return_state newline
    (13) instruccion -> . break_state newline
    (14) instruccion -> . continue_state newline
    (15) instruccion -> . if_state newline
    (16) instruccion -> . while_state newline
    (17) instruccion -> . for_state newline
    (18) instruccion -> . nativas newline
    (19) instruccion -> . create_struct newline
    (20) instruccion -> . declare_struct newline
    (21) instruccion -> . assign_access newline
    (72) print_instr -> . PRINT PARIZQ exp_list PARDER
    (73) println_instr -> . PRINTLN PARIZQ exp_list PARDER
    (81) definicion_instr -> . LOCAL ID
    (82) asignacion_instr -> . ID IGUAL expression
    (83) asignacion_instr -> . LOCAL ID IGUAL expression
    (86) asignacion_arreglo_instr -> . ID index_list IGUAL expression
    (84) definicion_asignacion_instr -> . ID IGUAL expression DOSP tipo
    (85) definicion_asignacion_instr -> . LOCAL ID IGUAL expression DOSP tipo
    (87) call_function -> . ID PARIZQ PARDER
    (88) call_function -> . ID PARIZQ exp_list PARDER
    (94) declare_function -> . FUNCTION ID PARIZQ dec_params PARDER DOSP newline statement END
    (95) declare_function -> . FUNCTION ID PARIZQ PARDER DOSP newline statement END
    (113) return_state -> . RETURN
    (114) return_state -> . RETURN expression
    (111) break_state -> . BREAK
    (112) continue_state -> . CONTINUE
    (102) if_state -> . IF expression DOSP newline statement END
    (103) if_state -> . IF expression DOSP newline statement ELSE DOSP newline statement END
    (104) if_state -> . IF expression DOSP newline statement else_if_list END
    (108) while_state -> . WHILE expression DOSP newline statement END
    (109) for_state -> . FOR ID IN expression DOSP expression DOSP newline statement END
    (110) for_state -> . FOR ID IN expression DOSP newline statement END
    (52) nativas -> . LOG PARIZQ ENTERO COMA expression PARDER
    (53) nativas -> . LOG10 PARIZQ expression PARDER
    (54) nativas -> . COS PARIZQ expression PARDER
    (55) nativas -> . SIN PARIZQ expression PARDER
    (56) nativas -> . TAN PARIZQ expression PARDER
    (57) nativas -> . SQRT PARIZQ expression PARDER
    (58) nativas -> . UPPERCASE PARIZQ expression PARDER
    (59) nativas -> . LOWERCASE PARIZQ expression PARDER
    (60) nativas -> . STR PARIZQ expression PARDER
    (61) nativas -> . RANGE PARIZQ expression PARDER
    (62) nativas -> . FLOAT PARIZQ expression PARDER
    (63) nativas -> . BOOL PARIZQ expression PARDER
    (64) nativas -> . INT PARIZQ expression PARDER
    (65) nativas -> . TRUNC PARIZQ INT COMA expression PARDER
    (66) nativas -> . TRUNC PARIZQ expression PARDER
    (67) nativas -> . TYPEOF PARIZQ expression PARDER
    (68) nativas -> . PARSE PARIZQ tipo COMA expression PARDER
    (69) nativas -> . LEN PARIZQ expression PARDER
    (70) nativas -> . PUSH PARIZQ expression COMA expression PARDER
    (71) nativas -> . POP PARIZQ expression PARDER
    (115) create_struct -> . STRUCT ID DOSP newline attList END
    (118) declare_struct -> . ID DOSP DOSP ID
    (119) assign_access -> . ID PUNTO ID IGUAL expression

    PRINT           shift and go to state 22
    PRINTLN         shift and go to state 23
    LOCAL           shift and go to state 24
    ID              shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LOG             shift and go to state 33
    LOG10           shift and go to state 34
    COS             shift and go to state 35
    SIN             shift and go to state 36
    TAN             shift and go to state 37
    SQRT            shift and go to state 38
    UPPERCASE       shift and go to state 39
    LOWERCASE       shift and go to state 40
    STR             shift and go to state 41
    RANGE           shift and go to state 42
    FLOAT           shift and go to state 43
    BOOL            shift and go to state 44
    INT             shift and go to state 45
    TRUNC           shift and go to state 46
    TYPEOF          shift and go to state 47
    PARSE           shift and go to state 48
    LEN             shift and go to state 49
    PUSH            shift and go to state 50
    POP             shift and go to state 51
    STRUCT          shift and go to state 52

    statement                      shift and go to state 315
    instrucciones                  shift and go to state 250
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    println_instr                  shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    asignacion_arreglo_instr       shift and go to state 8
    definicion_asignacion_instr    shift and go to state 9
    call_function                  shift and go to state 10
    declare_function               shift and go to state 11
    return_state                   shift and go to state 12
    break_state                    shift and go to state 13
    continue_state                 shift and go to state 14
    if_state                       shift and go to state 15
    while_state                    shift and go to state 16
    for_state                      shift and go to state 17
    nativas                        shift and go to state 18
    create_struct                  shift and go to state 19
    declare_struct                 shift and go to state 20
    assign_access                  shift and go to state 21

state 315

    (106) else_if_list -> ELSEIF expression DOSP newline statement ELSE DOSP newline statement .

    END             reduce using rule 106 (else_if_list -> ELSEIF expression DOSP newline statement ELSE DOSP newline statement .)

